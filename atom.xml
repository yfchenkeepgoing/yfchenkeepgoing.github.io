<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YifanChen&#39;s Blog</title>
  
  <subtitle>一个专注技术的新手程序员</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-20T00:56:39.893Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Yifan Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2025/01/19/hello-world/"/>
    <id>http://example.com/2025/01/19/hello-world/</id>
    <published>2025-01-19T17:00:50.690Z</published>
    <updated>2024-01-20T00:56:39.893Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Comprehensive Introduction to C#</title>
    <link href="http://example.com/2024/11/18/Comprehensive-Introduction-to-C/"/>
    <id>http://example.com/2024/11/18/Comprehensive-Introduction-to-C/</id>
    <published>2024-11-18T01:19:51.000Z</published>
    <updated>2025-01-01T02:10:16.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comprehensive-Introduction-to-C"><a href="#Comprehensive-Introduction-to-C" class="headerlink" title="Comprehensive Introduction to C"></a>Comprehensive Introduction to C</h1><p>参考笔记：<a href="https://blog.csdn.net/weixin_52421373/article/details/127972228">https://blog.csdn.net/weixin_52421373/article/details/127972228</a></p><p>vs 2013 ultimate的密钥：</p><p>VS_2013英文版下载：<a href="https://www.123pan.com/s/mWzgjv-es653.html">https://www.123pan.com/s/mWzgjv-es653.html</a></p><p>中文语言包下载：<a href="https://www.123pan.com/s/mWzgjv-ts653.html">https://www.123pan.com/s/mWzgjv-ts653.html</a> </p><p>KEY:BWG7X-J98B3-W34RT-33B3R-JVYW9</p><h2 id="1-课程简介，C-语言简介，开发环境准备"><a href="#1-课程简介，C-语言简介，开发环境准备" class="headerlink" title="1. 课程简介，C#语言简介，开发环境准备"></a>1. 课程简介，C#语言简介，开发环境准备</h2><h3 id="课程简介"><a href="#课程简介" class="headerlink" title="课程简介"></a>课程简介</h3><p>C#面向对象</p><p>采用知识点和示例程序相结合的方式</p><p>认真做课后作业，独自写一遍视频中的程序</p><h3 id="C-语言简介"><a href="#C-语言简介" class="headerlink" title="C#语言简介"></a>C#语言简介</h3><ul><li><p>程序（Program），即软件。机器码（计算机指令）-&gt;汇编语言-&gt;高级语言。高级语言翻译为计算机指令的过程被称为编译，编译用编译器。</p></li><li><p>为什么需要程序：随着硬件功能的增强，需要更强大的软件（程序）来统一管理硬件，让硬件之间能够协调和网络通信。这些软件组合在一起形成了操作系统。在操作系统上编写具备特定功能的程序。为什么需要程序可以总结为两点：</p><ul><li>管理硬件资源</li><li>实现用户的特定需求</li></ul></li><li><p>C#是一门通用的语言，可以编写多种类型的程序。不是特别追求性能时，可以用C#开发各种应用程序。</p><ul><li><p>纵向：语言-&gt;类库-&gt;框架（由浅入深）</p><p>框架是有一定逻辑组织的类库。框架是类库的最佳组合（best practice），避免自行组合时出错。</p></li><li><p>横向：命令行程序，桌面程序，设备（平板/手机）程序，Web（网站/服务）程序，游戏…</p></li></ul><p>C++偏底层，学习曲线陡峭。</p><p>C语言不面向对象，主要目标是编写高性能的操作系统，不适合用来写应用程序。</p><p>Java适合写设备程序和Web程序，但是不适合用来写桌面程序。</p></li><li><p>怎样编写程序</p><p>编辑-&gt;编译（高级语言经过编译变为机器语言）-&gt;调试（编译器看不出来的错误，通过调试被发现）-&gt;发布</p></li></ul><h3 id="开发环境和学习资料的准备"><a href="#开发环境和学习资料的准备" class="headerlink" title="开发环境和学习资料的准备"></a>开发环境和学习资料的准备</h3><ul><li><p>集成开发环境：集成了编辑、编译、调试和发布四个步骤。</p></li><li><p>下载Visual Studio：可视化工作室，应用了所见即所得的理念。</p><p>有两种桌面程序，后者是新一代的桌面开发技术：</p><ul><li>Windows Forms Application</li><li>WPF Application (windows presentation foundation)</li></ul></li><li><p>安装Visual Studio(2013)，安装免费版即可</p></li><li><p>打开Visual Studio，进入start page。选择tools-options-start up-show empty environment，点击OK。下次再打开visual studio，就会显示一个空的开发环境，让我们创建新项目。</p></li><li><p>学习资料</p><ul><li>下载离线MSDN文档（特点：全面，文章数量多，在Visual Studio的help-add and remove help content-manage content中下载，点击update，文档很大，速度较慢）</li><li>C#语言定义文档（Language Specification）（特点：精确，难读懂，会出现很大的跳跃性，看不懂的去看MSDN文档，谷歌下载即可）</li><li>推荐数据：C# 5.0 In A Nutshell（特点：读MSDN文档的指南针，其中列出了重点）</li></ul></li><li><p>MSDN文档中最重要的部分：</p><ul><li>Visual Basic and Visual C#-Visual C#-C# Programming Guide</li><li>Visual Basic and Visual C#-Visual C#-C# Reference：横向领略C#语言的特性</li><li>Visual Basic and Visual C#-Visual C#-C# Reference-C# Sample Application：源码</li><li>Visual Basic and Visual C#-Visual C#-C# Reference-C# Walkthroughs：功能浏览</li></ul></li></ul><h3 id="本节课作业"><a href="#本节课作业" class="headerlink" title="本节课作业"></a>本节课作业</h3><ul><li>下载并安装Visual Studio Express 2013 for Windows Desktop（建议学生下载professional版本，其对学生免费）</li><li>下载离线MSDN文档并尝试阅读</li><li>编写视频中的小程序（所见即所得的wpf程序）</li></ul><h3 id="作业完成情况"><a href="#作业完成情况" class="headerlink" title="作业完成情况"></a>作业完成情况</h3><ul><li><code>HelloWorld</code>项目的地址：D:\OneDrive - stu.xjtu.edu.cn\文档\Visual Studio 2013\Projects</li><li>MSDN文档成功下载了下面四个（最重要的文档已经下载下来了，其他文档要么是没有要么是下载失败）：<ul><li>.NET Framework 4</li><li>Get started with Blend for Visual Studio 2013</li><li>Welcome to Visual Studio 2013</li><li>Visual Basic and Visual C#</li></ul></li></ul><h2 id="2-初识各类应用程序"><a href="#2-初识各类应用程序" class="headerlink" title="2. 初识各类应用程序"></a>2. 初识各类应用程序</h2><p>带领大家认识各种可以用C#编写的应用程序</p><h3 id="编程学习的捷径"><a href="#编程学习的捷径" class="headerlink" title="编程学习的捷径"></a>编程学习的捷径</h3><ul><li>编程不是“学”出来的，而是“练”出来的</li><li>在反复应用中积累，忽然有一天就会“顿悟”。在实践中理解书本上知识的精髓。</li><li>学习原则<ul><li>从感观到原理</li><li>从使用别人的到创建自己的</li><li>必须亲自动手</li><li>必须学以致用、紧跟实际工作</li><li>追求实用，不搞“学院派”</li></ul></li></ul><h3 id="编写我们的第一个程序——Hello-World"><a href="#编写我们的第一个程序——Hello-World" class="headerlink" title="编写我们的第一个程序——Hello, World!"></a>编写我们的第一个程序——Hello, World!</h3><ul><li><p>Solution与Project</p><ul><li>Solution是针对客户需求的总的解决方案。举例：汽车经销商需要一套销售软件</li><li>Project利用具体的技术解决具体的某个问题</li><li>Visual Studio针对不同技术有不同的Project模板</li><li>Visual Studio在管理代码时，解决方案（Solution）在最高的级别。一个Solution中可以包含一到多个Project。</li></ul><p>如下图所示（各个组件是Project，所有Project在一起构成一个Solution）：</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/solution%20and%20project.png?raw=true" alt="solution and project.png"></p></li><li><p>Project模板（对比不同VS版本）</p><p>VS有各种版本（express, professional, ultimate），版本越高级，其中包含的Project的模板越多，所支持的开发技术越多。一般来说，professional版本足够用了。</p></li><li><p>分别编写Console, WPF, Windows Forms的Hello World程序</p></li><li><p>初学编程时很重要的两点</p><ul><li>不要怕见到自己看不懂的东西</li><li>要跟着操作，一遍一遍地练习，为的是熟悉手里的工具，培养感觉</li></ul></li></ul><h3 id="见识C-编写的各类应用程序"><a href="#见识C-编写的各类应用程序" class="headerlink" title="见识C#编写的各类应用程序"></a>见识C#编写的各类应用程序</h3><ul><li>目的1：让大家拥有辨识各类程序的“火眼金睛”</li><li>目的2：让大家了解一下完成C#语言学习后的职业发展方向（你最喜欢哪种？）</li></ul><p>十种技术编写Hello World程序，打星号的是当下流行的技术。</p><h4 id="Console（控制台）"><a href="#Console（控制台）" class="headerlink" title="Console（控制台）"></a>Console（控制台）</h4><ul><li><p>File-New Project-Visual C#-Windows-Console Application，可以分别设置solution和project的name。</p></li><li><p>C#的源码文件用<code>.cs</code>作为扩展名</p></li><li><p>写入以下的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行时，直接点击Start会一闪而过，选择Debug-Start Without Debugging，就可以持续看到结果。</p></li></ul><h4 id="WPF-Windows-Presentation-Foundation"><a href="#WPF-Windows-Presentation-Foundation" class="headerlink" title="WPF(Windows Presentation Foundation)*"></a>WPF(Windows Presentation Foundation)*</h4><p>注意对比其与WPF。新建项目，选择WPF Application。现在页面下方出现了一些类似html的代码（<code>xaml</code>代码），设计师可以直接通过修改这些代码来设计界面。我理解类似前后端分离，同时前端不需要写代码，有可视化界面。后端的代码类似Windows Forms。</p><ul><li><p>点击Toolbox，搜索TextBox，将其拖入窗口中并调整大小。改Name，去掉其中的Text。</p></li><li><p>再搜索Button，将其拖入窗口中并调整大小。改Name，改其中的Text。</p></li><li><p>既可以改代码来改属性，也可以改可视化界面来改属性。</p></li><li><p>选中Button，点击Events。目前Click的值为空，点击Button不会有响应。双击Button，同样生成代码模板，在其中写入以下的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Controls;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Documents;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Input;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Navigation;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WpfHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interaction logic for MainWindow.xaml</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buttonSayHello_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            textBoxShowHello.Text = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行项目，点击Click Me按钮，TextBox中出现Hello, World!</p></li></ul><h4 id="Windows-Forms-Old"><a href="#Windows-Forms-Old" class="headerlink" title="Windows Forms(Old)"></a>Windows Forms(Old)</h4><p>新建项目，选择windows forms application。</p><ul><li><p>点击Toolbox，搜索TextBox，将其拖入窗口中并调整大小。</p></li><li><p>再搜索Button，将其拖入窗口中并调整大小。</p></li><li><p>修改Button的属性：修改其上的文字，给其起一个带有独特含义的名字</p></li><li><p>修改TextBox的属性：修改其名字为<code>textBoxShowHello</code></p></li><li><p>选中Button，在属性面板有闪电符号，就是Events（事件）。当前Click对应的值为空，表示点击Click没有任何的反应。双击事件中的Click，自动生成了代码模板。写入以下的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WinFormHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buttonSayHello_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            textBoxShowHello.Text = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在点击click me时，文本框就显示了Hello, World!现在让程序响应了button click事件，程序的相应为在<code>TextBox</code>中显示出<code>Hello, World</code>。</p></li></ul><h4 id="ASP-NET-Web-Forms-Old"><a href="#ASP-NET-Web-Forms-Old" class="headerlink" title="ASP.NET Web Forms(Old)"></a>ASP.NET Web Forms(Old)</h4><p>选择visual c#-web-asp.net web application，再选择empty，勾选web forms。此时就获得了一个空的网站。右击右侧菜单的WebFormHelloWorld，选择add-web form，输入其名称为default，这样就生成了一个模板代码<code>Default.aspx</code>。在其中加入<code>Hello, World</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Default.aspx.cs&quot; Inherits=&quot;WebFormHelloWorld.Default&quot; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head runat=&quot;server&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello, World!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>点击运行（点击浏览器的名称即可），网页就显示出了<code>Hello, World!</code>。右键<code>WebFormHelloWorld</code>，点击publish，即可将其部署，供外人访问。</p><h4 id="ASP-NET-MVC-Model-View-Controller"><a href="#ASP-NET-MVC-Model-View-Controller" class="headerlink" title="ASP.NET MVC(Model-View-Controller)*"></a>ASP.NET MVC(Model-View-Controller)*</h4><p>是ASP.NET Web Forms技术的升级版。其特点是代码解耦合，易于维护。创建项目同ASP.NET Web Forms，但是要点击empty，勾选MVC。选择controllers-add-controller，选择MVC 5 Controller - Empty，点击add，然后输入其名称为<code>HomeController</code>，然后add。此时生成了<code>HomeController.cs</code>的样板代码：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MvcHelloWorld.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// GET: /Home/</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时views文件夹中的home文件夹中还没有任何view。在函数：<code>public ActionResult Index()</code>中右击，选择add view，点击add，此时在home文件夹中生成了<code>Index.cshtml</code>。在其中写入代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = &quot;Index&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello, Wolld!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>点击运行，网页上出现了Hello, World!同样也可以将这个项目publish到自己的网站上去。</p><h4 id="WCF-Windows-Communication-Foundation"><a href="#WCF-Windows-Communication-Foundation" class="headerlink" title="WCF(Windows Communication Foundation)*"></a>WCF(Windows Communication Foundation)*</h4><p>wcf是纯粹的网络服务。创建项目时选择visual c#-wcf-wcf service application，命名为WcfHello。</p><p>打开模板代码<code>IService1.cs</code>，在其中写入代码：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IService1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">OperationContract</span>]</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetData</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">OperationContract</span>]</span><br><span class="line">    <span class="function">CompositeType <span class="title">GetDataUsingDataContract</span>(<span class="params">CompositeType composite</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">OperationContract</span>]</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">SayHello</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Add your service operations here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到<code>Service1.svc.cs</code>中，点击<code>IService1</code>下面的蓝色小标记，选择Implement interface IService1。此时就会生成模板代码：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SayHello</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将其改为：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SayHello</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>点击运行，会启动wcf test client的工具。wcf是最特殊的服务，只有纯粹的数据交互，没有前端，因此需要用到这个测试工具。双击其中的SayHello()，点击Invoke，就会调用SayHello函数，该函数会返回一个hello world给客户端。我尝试调用，果然在测试界面打印出了hello world。</p><p>现在尝试写一个加法器，在<code>IService1.cs</code>中写：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">OperationContract</span>]</span><br><span class="line"><span class="function"><span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>在<code>Service1.svc.cs</code>中写：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再次运行，双击Add方法，设置a和b的值为10和20，点击Invoke，计算结果为30。</p><h4 id="Windows-Store-Application"><a href="#Windows-Store-Application" class="headerlink" title="Windows Store Application*"></a>Windows Store Application*</h4><p>给平板电脑app写的程序。选择visual c#-windows store-blank app(xaml)。其和WPF很像。打开<code>MainPage.xaml</code>，将ToolBox中的TextBox拖进去，然后再拖入button。将TextBox重命名为<code>textBoxShowHello</code>，再将其中的Text清空。将buttom重命名为<code>buttonSayHello</code>，将其content改为Click Me。选择simulator，运行之，此时点击button没有任何反应。</p><p>选择button-click，然后双击，生成模板代码，在其中写入代码：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textBoxShowHello.Text = <span class="string">&quot;Hello, World!&quot;</span>;</span><br></pre></td></tr></table></figure></p><p>再次在simulator中运行，此时点击click me，hello world就出现了。</p><h4 id="Windows-Phone-Application"><a href="#Windows-Phone-Application" class="headerlink" title="Windows Phone Application*"></a>Windows Phone Application*</h4><p>创建项目，选择visual c#-windows phone-windows phone app，取名为PhoneHelloWorld。生成的代码同样和wpf非常类似。</p><p>同样的，在ToolBox中搜索TextBox，拖入界面中，取名为textBoxShowHello，清空text；再搜索Button，同样拖入界面中，取名为buttonSayHello，将content改为click me；再切换到Button的事件中去，双击click，生成模板代码，写入以下内容：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textBoxShowHello.Text = <span class="string">&quot;Hello, World!&quot;</span>;</span><br></pre></td></tr></table></figure></p><p>选择一款较好的模拟器（内存和屏幕分辨率可选），然后执行。点击click me，hello world就出现了。</p><p>如何部署到手机上？<br>选择build-deploy solution，如果windows phone连接到了电脑上，就会直接找到该设备然后部署上去。</p><h4 id="Cloud-Windows-Azure"><a href="#Cloud-Windows-Azure" class="headerlink" title="Cloud(Windows Azure)*"></a>Cloud(Windows Azure)*</h4><p>微软云计算平台上的hello world。创建项目，选择visual c#-cloud-windows azure cloud service，项目取名为CloudHelloWorld，要架网站，就选择asp.net web role，点击右箭头将其加到云平台上，改名为SayHello，点击OK。选择empty，勾选MVC。此时看上去和ASP.NET MVC完全相同。</p><p>右键controllers-add-controller，选择MVC 5 Controller - Empty，取名为HomeController。在生成的主函数中右键，add view，点击add。在index.cshtml中，写上hello world。点击运行即可，此时要启动云平台的模拟器才能运行程序。</p><p>查找最近的项目：file-recent projects and solutions</p><p>云平台模拟器会加载刚刚写的网站。</p><p>部署时，右键CloudHelloWorld，选择publish，选择云平台的订阅，就可以直接发布。发布网站需要买域名，买空间，但微软的云平台替你完成了这些步骤。</p><h4 id="WF-Workflow-Foundation"><a href="#WF-Workflow-Foundation" class="headerlink" title="WF(Workflow Foundation)"></a>WF(Workflow Foundation)</h4><p>workflow：工作流。选择visual c#-workflow-workflow console application，这个工作流执行起来是在console中执行，命名为WfHelloWorld。</p><p>在ToolBox中搜索WriteLine，拖入界面中，在其中写入<code>&quot;Hello, World!&quot;</code>，点击debug-start with debugging。</p><h2 id="3-初识类与名称空间"><a href="#3-初识类与名称空间" class="headerlink" title="3. 初识类与名称空间"></a>3. 初识类与名称空间</h2><h3 id="剖析Hello-World程序"><a href="#剖析Hello-World程序" class="headerlink" title="剖析Hello, World程序"></a>剖析Hello, World程序</h3><p>剖析的对象：最简单的console application。</p><ul><li>初识类（class）与名称空间（namespace）<ul><li>初学者：类（class）构成程序的主体。高级版本：类是最基础的C#类型。类是一个数据结构，将状态（字段）和操作（方法和其他函数成员）组合在一个单元中。类为动态创建的类实例（instance）提供了定义，实例也称为对象（object）。类支持继承和多态性，这是派生类可用来扩展和专用化基类的机制。</li><li>名称空间（namespace）以树型结构组织类（和其他类型），也可以有效地避免同名类的冲突。<ul><li>例如Button和Path类</li></ul></li></ul></li><li><p>下面以<code>HelloWorld</code>程序来展示类和名称空间。有以下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using是将名称空间引用到程序中来</span></span><br><span class="line"><span class="comment">// 名称空间的标记是&#123;&#125;</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写的Program类放在了ConsoleHelloWorld这个名称空间中，该名称空间的名字默认和project的名字一样</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 类在visual studio中高亮的颜色是水蓝色</span></span><br><span class="line">    <span class="comment">// c#是完全面向对象的</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Console类是内置的，我们利用其中的WriteLine方法</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以简写为（权限命名写法）：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>); <span class="comment">// 权限命名写法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印两行：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            System.Console.WriteLine(<span class="string">&quot;Good morning!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更方便的写法是引入名称空间：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Good morning!&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Good evening!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何知道某个函数属于哪个名称空间？</p><ul><li>方法1：help-view help，在index中搜索console class，可以看到相应的文档。其中有信息：<code>Assembly: mscorlib (in mscorlib.dll)</code>，<code>mscorlib(microsoft core library)</code>是类库。与操作系统有关的重要的类都在System这个名称空间中。</li><li>点击报红的单词的任意位置，单词的首字母处会出现蓝色的小方块，为智能标记。点开智能标记，可选择<code>Using System</code>或者<code>System.Console</code>。弹出智能标记的快捷键：<code>ctrl + .</code>或者<code>Shift+Alt+F10</code>。</li></ul><p>不同命名空间中相同的类名产生冲突的例子：</p><p>新建一个wpf程序。在<code>MainWindow.xaml.cs</code>中，可以存在两个path类，分别是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Windows.Shapes.Path</span><br><span class="line">System.IO.Path</span><br></pre></td></tr></table></figure><p>前者是windows中用于画多边形的path，后者是文件路径的path。如果需要同时用到两者，就只能用权限命名。</p><p>另一个例子：button class有更多种，用来写web/.NET/windows等等。使用名称空间就可以解决类名冲突的问题。</p></li></ul><h3 id="类库-assembly-的应用"><a href="#类库-assembly-的应用" class="headerlink" title="类库(assembly)的应用"></a>类库(assembly)的应用</h3><p>dll: dynamic link library（动态链接库），以ddl结尾的文件是类库。</p><p>类和名称空间是放在类库中的。类库是类的仓库。</p><ul><li>类库引用是使用名称空间和类的物理基础</li></ul><p>以一个wpf程序为例，其中的<code>Button</code></p><ul><li>名称空间为System.Windows.Controls</li><li>类库为 (in PresentationFramework.dll) </li><li>如何查看类库引用在项目的哪里？在项目的References中就可以看到PresentationFramework。双击PresentationFramework，打开的窗口为对象浏览器（ObjectBrowser）。展开其中的PresentationFramework，即可看到有哪些名称空间，展开名称空间又可以看到其中有哪些类。</li></ul><p>Console application由于不需要显示窗口，因此需要引用的类库要少于wpf application。</p><p>不同技术类型的项目会默认引用不同的类库。</p><p>如何为自己的项目添加对其他类库的引用？</p><ul><li><p>DLL引用（黑盒引用，无ddl的源代码，直接用编译好的dll文件）</p><ul><li><p>以输出hello world的console application为例。如果有一个外部的dll，必须配有文档。例如一个文件夹中存放了<code>MyLibrary.dll</code>和<code>MyLibrary Document</code>。右键项目的references-add reference-browse，即可把dll文件给加载进来，此时<code>MyLibrary</code>就会出现在References中。然后可以对照文档来使用类库中的名称空间、类和方法。也可以双击References中的<code>MyLibrary</code>，打开对象浏览器，来查看其中的名称空间、类和方法。</p></li><li><p>黑盒引用的问题：类库一旦出错，本人无法修改，只能让类库的编写者去修改，然后编写者再次将类库编译为ddl并将该文件发送给本人，才能解决这个错误。此时我的项目会对类库产生依赖，我的<code>Program</code>类也会对类库中的类和方法产生依赖。这就是依赖关系。尽量使用弱的依赖关系，避免牵一发而动全身的问题。有一些办法可以减轻依赖关系。</p></li><li><p>做实验：引用微软提供的类库，让console application显示窗口。在references中添加类库：<code>System.Windows.Forms</code>。help viewer中的msdn文档搜索功能非常难用，不如用微软提供的在线文档。让console application显示窗口的代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form form = <span class="keyword">new</span> Form();</span><br><span class="line">            form.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NuGet简介</p><p>使用NuGet添加对dll的引用。NuGet技术被用来解决比较复杂的依赖关系（复杂的依赖关系：底层的类库未被引用，则上层的类库也无法被引用）。</p><ul><li><p>做实验，在console application中引入一个wpf的窗口。在References中添加依赖：PresentationFramework。然后写入以下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.Windows.Window window = <span class="keyword">new</span> System.Windows.Window();</span><br><span class="line">            window.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时会产生报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error1The type &#x27;System.Windows.Markup.IAddChild&#x27; is defined in an assembly that is not referenced. You must add a reference to assembly &#x27;PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&#x27;.d:\OneDrive - stu.xjtu.edu.cn\文档\Visual Studio 2013\Projects\ConsoleHelloWorld\ConsoleHelloWorld\Program.cs1013ConsoleHelloWorld</span><br><span class="line"></span><br><span class="line">Error2The type &#x27;System.Windows.Markup.IQueryAmbient&#x27; is defined in an assembly that is not referenced. You must add a reference to assembly &#x27;System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;.d:\OneDrive - stu.xjtu.edu.cn\文档\Visual Studio 2013\Projects\ConsoleHelloWorld\ConsoleHelloWorld\Program.cs1013ConsoleHelloWorld</span><br></pre></td></tr></table></figure><p>报错说明更底层的类库：<code>PresentationCore</code>和<code>System.Xaml</code>还没有被引用，需要将这两者加入到References中。再运行时，还会出现报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error2The type &#x27;System.Windows.DependencyObject&#x27; is defined in an assembly that is not referenced. You must add a reference to assembly &#x27;WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&#x27;.d:\OneDrive - stu.xjtu.edu.cn\文档\Visual Studio 2013\Projects\ConsoleHelloWorld\ConsoleHelloWorld\Program.cs1013ConsoleHelloWorld</span><br></pre></td></tr></table></figure><p>还需要添加更底层的<code>WindowsBase</code>，这很麻烦。因为这时候你只有DLL，没有源代码，几乎可以说是“蒙着眼睛引用类库”。这是很危险的！特别是对于大型的项目。</p><p>后来有人用包的形式发布一组类库，用户输入命令，一组类库就都被引用了，不需要手动引用，这样很安全且高效，这就是NuGet技术。</p><p>例如需要写一个用于连接数据库的程序，需要用到技术<code>Entity Framework</code>（实体框架），该类库可以将代码中的类和数据库中的表映射起来。可以采用NuGet技术来对上述类库进行引用。右击References-点击add nuget packages-选择online-输入Entity Framework，点击Install即可，此时就会看到两个自动安装的类库：<code>EntityFramework</code>和<code>EntityFramework.SqlServer</code>，这两个类库由NuGet自动管理。但是我这样操作搜索不到结果，于是我采用了另一种方式。点击Tools-Library Package Manager-Package Manager Console，在其中输入命令：<code>Install-Package EntityFramework</code>，也可以起到相同的效果。</p></li></ul></li></ul></li><li><p>项目引用（白盒引用，有源代码，源代码放在项目中，故称项目引用）</p><p>直接获得类库项目的源代码，比如类库项目的名字是<code>MyLibrary</code>，其中的代码名为<code>Calculator.cs</code>，代码为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Tools</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何引用<code>MyLibrary</code>这个类库，点击References-add references-solution-projects，当前的projects页面为空，因此需要将<code>MyLibrary</code>这个project添加到当前的solution中去。一个项目可以被多个solution包含（这被称为project的重用），因此将类库项目也包含到当前的solution中。将类库的project包含到当前solution中的操作：solution-add-existing project，选中MyLibrary-MyLibrary.csproj，将其添加进来。现在solution中有两个项目，一个是HelloWorld，一个是MyLibrary。再次右击References-add references-solution-projects，勾选<code>MyLibrary</code>，点击OK，此时<code>MyLibrary</code>就作为类库被成功引用了。此时就可以愉快地在console application中引用<code>MyLibrary</code>中的类和方法了：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result = Tools.Calculator.Sub(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时由于已经有了类库的源代码，就可以对类库中的错误进行排除。接下来的内容跳转到排除错误部分。</p></li></ul><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>类与类之间，类库与类库之间一旦互相引用，就产生了依赖关系。依赖关系在软件质量中起了关键作用。</p><p>质量好的软件，其依赖关系清晰且好维护；质量差的软件，依赖关系不清楚。</p><ul><li><p>依赖关系，就是类（或对象）之间的耦合关系</p></li><li><p>优秀的程序追求“高内聚，低耦合”</p><ul><li>高内聚指的是一些数据和功能，该属于哪个类，就精确地放入哪个类。</li><li>低耦合指的是类和类之间的依赖关系尽可能低</li><li>“高内聚，低耦合”对类和类库都是如此</li><li>程序只有这样做才会结构清晰</li><li>教学程序往往会违反这个原则</li></ul></li><li><p>UML（通用建模语言）类图：以图的形式表达程序中的关系，UML除了可以画类图，还可以画流程图、序列图等。类图用来展现类和类之间的关系。以<code>HelloWrold</code>程序为例：</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/uml.png?raw=true" alt="uml.png"></p><p>这是一种非常紧密的耦合关系。</p></li></ul><h3 id="排除错误"><a href="#排除错误" class="headerlink" title="排除错误"></a>排除错误</h3><p>如何排除程序中的错误？</p><p>在项目引用时，由于有类库的源代码，可以直接debug。点击出错的行（<code>double result = Tools.Calculator.Sub(1, 1);</code>），设置断点。然后debug-start debugging，此时程序会执行到断点前，result值为0.0（还未进行出错行的运算）。接下来点击step into(F11)，此时执行指针就自动跳转到了类库的此处：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b - <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就可以发现错误的出处。debug时需要找到root cause。</p><p>中文标点符号：全角<br>英文标点符号：半角</p><ul><li>仔细阅读编译器的报错</li><li>MSDN文档与搜索引擎结合</li></ul><h3 id="如何建立一个类库项目"><a href="#如何建立一个类库项目" class="headerlink" title="如何建立一个类库项目"></a>如何建立一个类库项目</h3><p>solution-add-new project-class library（非可执行程序，编译出来的结果就是dll文件，即类库），项目起名为<code>SuperCalculator</code>，模板代码重命名为<code>Calculator.cs</code>，在其中写入代码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Tools</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Mul</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Div</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">double</span>.PositiveInfinity;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> a / b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着右击references-add reference-project-SuperCalculator，将这个自定义的类库引入主程序，就可以在主程序中使用它：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleHelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result1 = Calculator.Mul(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">            Console.WriteLine(result1);</span><br><span class="line">            <span class="built_in">double</span> result2 = Calculator.Div(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">            Console.WriteLine(result2);</span><br><span class="line">            <span class="built_in">double</span> result3 = Calculator.Div(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">            Console.WriteLine(result3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="本节作业"><a href="#本节作业" class="headerlink" title="本节作业"></a>本节作业</h3><ul><li>练习创建类库项目进行项目引用</li><li>练习DLL引用</li><li>练习阅读编译器报错并排除错误</li></ul><h2 id="4-类、对象、类成员简介"><a href="#4-类、对象、类成员简介" class="headerlink" title="4. 类、对象、类成员简介"></a>4. 类、对象、类成员简介</h2><h3 id="类（class）是显示世界事物的模型"><a href="#类（class）是显示世界事物的模型" class="headerlink" title="类（class）是显示世界事物的模型"></a>类（class）是显示世界事物的模型</h3><ul><li>类是现实世界事物进行抽象所得到的结果<ul><li>事物包括“物质”（实体）与“运动”（逻辑）</li><li>抽象也被称为建模。建模是一个去伪存真（留下需要的，去掉不要的）、由表及里（暴露的接口是表，封装的内容是里）的过程</li></ul></li></ul><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul><li><p>什么时候叫“对象”，什么时候叫“实例”</p><ul><li><p>对象也叫实例，是类经过“实例化”后得到的内存中的实体</p><ul><li>Formally “instance” is synonymous with “object”——对象和实例是一回事</li><li>“飞机”与“一架飞机”有何区别？天上有（一架）飞机——必须是实例飞，概念是不能飞的</li><li>有些类是不能实例化的，比如“数学”（Math class），我们不能说“一个数学”</li></ul></li><li><p>依照类，我们可以创建对象，这就是“实例化”</p><ul><li>现实世界中常称“对象”，程序世界中（特别是内存关系）常称“实例”</li><li>二者并无太大区别，常常混用，初学者不必迷惑</li></ul></li><li><p>使用new操作符创建类的实例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassAndInstance</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 实例化</span></span><br><span class="line">            (<span class="keyword">new</span> Form()).ShowDialog(); <span class="comment">// ()表示实例在内存中诞生后的初始化方式，被称为构造器</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序运行的结果就是表单已窗口的形式呈现，即表单已被实例化。</p></li></ul></li><li><p>引用变量</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassAndInstance</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form myForm; <span class="comment">// 声明引用变量</span></span><br><span class="line">            myForm = <span class="keyword">new</span> Form(); <span class="comment">// 用引用变量引用一个实例</span></span><br><span class="line">            myForm.Text = <span class="string">&quot;My Form!&quot;</span>; <span class="comment">// 设置标题的文字</span></span><br><span class="line">            myForm.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用引用变量引用了一个实例后，我们就可以多次访问这个实例。</p></li><li><p>引用变量与实例的关系</p><ul><li><p>孩子与气球。孩子相当于引用变量，气球相当于实例。绳子相当于赋值符号</p></li><li><p>气球不一定有孩子牵着。此时气球就飞掉了，内存垃圾收集器很快就回收了该变量，内存就被释放掉了</p></li><li><p>多个孩子可以使用各自的绳子牵着同一个气球。如以下代码所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Form myForm1;</span><br><span class="line">Form myForm2;</span><br><span class="line">myForm1 = <span class="keyword">new</span> Form();</span><br><span class="line">myForm2 = myForm1;</span><br></pre></td></tr></table></figure><p>上面两个引用变量引用的是同一个实例/对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassAndInstance</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form myForm1;</span><br><span class="line">            Form myForm2;</span><br><span class="line">            myForm1 = <span class="keyword">new</span> Form();</span><br><span class="line">            myForm2 = myForm1;</span><br><span class="line">            myForm1.Text = <span class="string">&quot;My Form&quot;</span>;</span><br><span class="line">            myForm2.Text = <span class="string">&quot;I changed it!&quot;</span>;</span><br><span class="line">            myForm1.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时显示的是<code>I changed it!</code>。用任何一个引用变量访问到的都是同一个实例。</p><p>多个孩子也可以都通过同一根绳子牵着气球，目前暂且不讲。</p></li></ul></li></ul><h3 id="类的三大成员"><a href="#类的三大成员" class="headerlink" title="类的三大成员"></a>类的三大成员</h3><p>类的成员有十多种，但这三种非常重要，也是初学者最先接触到的。</p><ul><li><p>属性（Property）</p><ul><li>用于存储数据</li><li>这些数据组合起来表示类或对象当前的状态</li></ul></li><li><p>方法（Method）</p><ul><li>由C语言中的函数（function）进化而来，表示类或对象“能做什么”</li><li>工作中90%的时间是在与方法打交道，因为它是“真正做事”、“构成逻辑”的成员</li></ul></li><li><p>事件（Event）</p><ul><li>类或对象通知其他类或对象的机制，<strong>为C#所特有</strong>（Java通过其他方法实现这个机制）。例如当点击按钮时，发生click这个事件，响应该事件的方法中可以让界面上的文本框显示出<code>Hello World</code>的字符串。</li><li>事件是非必须的，但有它在编程会变得方便且灵活，但这也意味着它可能会被滥用。因此，善用事件机制非常重要。</li></ul></li><li><p>使用MSDN文档。将鼠标移到一个类上，按下快捷键ctrl+shift+F1，就可以跳转到相应的MSDN文档。如果想看该类在哪个分支上，点击左上角的show topic in contents按钮。以Form class为例，其下面的第一句话：<code>Represents a window or dialog box that makes up an application&#39;s user  interface.</code>，是以一句话概括本类的作用。接着是：</p><ul><li>继承关系列表：Inheritance Hierarchy</li><li>名称空间：namespace</li><li>类库: Assembly</li><li>声明的格式：Syntax</li><li>构造函数: Constructors</li><li>属性：要么用来记忆值，要么表示Form的状态</li><li>方法：Form这个类/对象可以做什么</li><li>事件：表示Form能以怎样的形式在发生什么事情时通知别的类或对象</li><li>类的详细解释，包含了类最常用的功能（即最常用的属性、方法和事件）：Remarks</li><li>例子：Examples。MSDN的例子质量良莠不齐</li><li>版本信息</li><li>平台</li><li>多线程安全性：Thread Safety</li></ul></li><li><p>某些特殊类或对象在成员方面侧重点不同</p><ul><li><p>模型类或对象重在属性，如Entity Framework。模型类的功能主要是从数据库中读取数据，然后把数据写回数据库。其侧重于数据，因此属性特别发达。例子：用<code>Entity Framework</code>生成的作为数据模型的类。首先需要安装Entity Framework及其相关的包，可以使用Nuget/命令行，我的Nuget不管用，因此使用命令行。</p><p>打开sql server 2012 developer version，创建一个样例数据库：AdventureWorksLT2012，打开Tables，再打开<code>SalesLT.Product</code>，打开其前1000行，主要包含ProductID, Name, ProductNumber, Color等数据。</p><p>在项目中，右击solution-add-new item-data-ado.net entity data model，将其名字改为<code>AdventureWorksModel.edmx</code>。选择generate from database，然后新建一个和本地数据库<code>AdventureWorksLT2012</code>的连接。然后选择Product表和Address表。此时visual studio就和entity framework一起生成了一些专门用于数据传输的数据模型类。会显示两个数据模型类，分别是<code>Product</code>和<code>Address</code>类。这两个类中，只有属性，没有方法和事件。使用这些类的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印产品的Name属性</span></span><br><span class="line">AdventureWorksLT2012Entities proxy = <span class="keyword">new</span> AdventureWorksLT2012Entities();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速插入foreach代码的方法是：输入foreach时，当VS2013有所提示时，连续按两下Tab键</span></span><br><span class="line"><span class="keyword">foreach</span>(Product p <span class="keyword">in</span> proxy.Products)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 输入cw，然后按两下tab键，就会补全为Console.WriteLine</span></span><br><span class="line">    Console.WriteLine(p.Name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印产品的数目</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;===========================&quot;</span>); <span class="comment">// 分割线</span></span><br><span class="line">Console.WriteLine(proxy.Products.Count());</span><br></pre></td></tr></table></figure></li><li><p>工具类或对象重在方法，如Math, Console。工具类主要用于计算和其他具体功能。以<code>Math</code>为示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MethodSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> x = Math.Sqrt(<span class="number">4</span>);</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">double</span> y = Math.Pow(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通知类或对象重在事件，如各种Timer（时钟每隔一段时间触发某个事件，这个事件会执行某些功能）。</p><p>新建WPF Application，先创建一个合适大小的textBox，然后去后台，写入以下代码，即可生成一个简易的时钟：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Controls;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Documents;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Input;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Navigation;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Shapes;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EventSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interaction logic for MainWindow.xaml</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Window的构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            DispatcherTimer timer = <span class="keyword">new</span> DispatcherTimer();</span><br><span class="line">            timer.Interval = TimeSpan.FromSeconds(<span class="number">1</span>); <span class="comment">// 时间间隔1秒钟</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写完+=后，连续按两次tab键</span></span><br><span class="line">            <span class="comment">// 将timer_Tick函数挂接到事件上</span></span><br><span class="line">            <span class="comment">// 当事件Tick被触发时，timer_Tick函数就会被执行</span></span><br><span class="line">            <span class="comment">// timer_Tick方法用于响应事件，因此该方法也被称为事件处理器</span></span><br><span class="line">            timer.Tick += timer_Tick;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 让时钟开始</span></span><br><span class="line">            timer.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">timer_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.timeTextBox.Text = DateTime.Now.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="类的静态成员与实例成员"><a href="#类的静态成员与实例成员" class="headerlink" title="类的静态成员与实例成员"></a>类的静态成员与实例成员</h3><ul><li><p>静态（Static）成员在语义上表示它是“类的成员”</p></li><li><p>实例（非静态）成员在语义上表示它是“对象的成员”，而非“类的成员”</p></li><li><p>例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StaticSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// WriteLine方法是隶属于Console类的，因此该方法是静态方法</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Form form = <span class="keyword">new</span> Form();</span><br><span class="line">            form.Text = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// Text是实例属性</span></span><br><span class="line">            form.ShowDialog(); <span class="comment">// ShowDialog是实例方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在MSDN文档中，若某个属性上面加了红色的大写的S，那么其是静态属性。同理，同样的标记也被用于静态方法。静态事件非常少见。</p></li><li><p>“绑定”（Binding）指的是编译器如何把一个成员 与 类或对象关联起来</p><ul><li>早绑定。编译器就决定将成员与哪个类/对象关联。</li><li><p>晚绑定。程序运行起来后，再决定将成员与哪个类/对象关联，编译器不知道此事。有晚绑定功能的语言是动态语言，比如javascript。</p></li><li><p>不可小觑的“.”操作符——成员访问</p></li></ul></li></ul><h3 id="本节作业-1"><a href="#本节作业-1" class="headerlink" title="本节作业"></a>本节作业</h3><ul><li>跟着视频进行操作，直到能够自己动手编写这些程序</li></ul><h2 id="5-语言基本元素概览、初始类型、变量与方法，算法简介"><a href="#5-语言基本元素概览、初始类型、变量与方法，算法简介" class="headerlink" title="5. 语言基本元素概览、初始类型、变量与方法，算法简介"></a>5. 语言基本元素概览、初始类型、变量与方法，算法简介</h2><h3 id="构成C-语言的基本元素"><a href="#构成C-语言的基本元素" class="headerlink" title="构成C#语言的基本元素"></a>构成C#语言的基本元素</h3><p>前五种被统称为标记（Token）。标记是对编译器有意义的记号。</p><ul><li><p>关键字（Keyword）：构成一门编程语言的基本词汇。</p><p>具体参照这个文档：<a href="https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/x53a06bb(v=vs.120)?redirectedfrom=MSDN">https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/x53a06bb(v=vs.120)?redirectedfrom=MSDN</a></p><p>其中包含两个表格，第一个表格中的关键字一直都是关键字（70多个），第二个表格中的关键字是上下文关键字（20多个）。一共100多个关键字。</p><p>注意：</p><ul><li>某些关键字有多个用途</li><li>关键字按照逻辑分组，可以分为Types, Modifiers, Statement, Namespace, Operator等</li></ul></li><li><p>操作符（Operator）</p><p>查看文档：<a href="https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/6a71f45d(v=vs.120)?redirectedfrom=MSDN">https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/6a71f45d(v=vs.120)?redirectedfrom=MSDN</a></p><p>操作符大概30-40个。有些操作符是关键字，因此这类关键字被称为操作符关键字。</p></li><li><p>标识符（Identifier），即名字</p><ul><li><p>什么是合法的标识符</p><ul><li>首先不能与关键字冲突。关键字又名保留字，不能被用来作为标识符。</li><li><p>可以用字母、数字和下划线来组成标识符，但是不能拿数字开头，可以拿字母和下划线开头。</p></li><li><p>怎样阅读语言定义文档</p><p>以Identifier为例：</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/identifier1.png?raw=true" alt="identifier1.png"></p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/identifier2.png?raw=true" alt="identifier2.png"></p><ul><li>斜体字意味着还未完全解释清楚，后面还有它的解释</li><li>标识符=非关键字的标识符&amp;关键字+<code>@ 标识符&amp;关键字</code></li><li>下标opt表示可选的</li><li>汉语也可以用作标识符</li></ul></li></ul></li><li><p>大小写规范：驼峰命名法（myVariable），pascal命名法（MyVariable）</p><p>C#中，变量名都用驼峰法，方法名、类名、名称空间等用pascal法</p></li><li><p>命名规范：要求变量名、类名、类的成员都有意义</p><ul><li>类名是一个名词</li><li>类的成员名的属性是名字，方法是动词/动词短语</li></ul></li></ul></li><li><p>标点符号：比如<code>&#123;&#125;</code>, <code>;</code>。是符号，但是不参与运算。</p></li><li><p>文本（字面值）</p><ul><li><p>整数</p><ul><li><p>多种后缀</p></li><li><p>例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> x = <span class="number">2</span>; <span class="comment">// 32 bit表示一个数字</span></span><br><span class="line"><span class="built_in">long</span> y = <span class="number">3L</span>; <span class="comment">// 大小写L均可，64 bit表示一个数字，long能表示的数字范围广于int</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>实数</p><ul><li><p>多种后缀</p></li><li><p>例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> x = <span class="number">3.0F</span>; <span class="comment">// 32 bit表示一个浮点数，F是必须的后缀，否则3.0默认为双精度浮点数</span></span><br><span class="line"><span class="built_in">double</span> y = <span class="number">4.0</span>D; <span class="comment">// D表示双精度浮点数, 64 bit表示一个浮点数</span></span><br><span class="line"><span class="built_in">double</span> z = <span class="number">4.0</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符</p></li><li><p>字符串</p><ul><li>例子：<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> c = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 单引号中只能有一个字符，字符类型的变量必须用单引号</span></span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str3 = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>布尔</p></li><li><p>空（null）</p><ul><li>例子：<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">bool</span> b2 = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">string</span> str = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>注释与空白</p><ul><li>单行：<code>//</code></li><li>多行（块注释）：<code>/* */</code>。块注释不能嵌套</li><li>空白：一个空白和多个空白/tab键生成的空白没有区别</li><li>格式化代码：edit-advanced-format document，快捷键为ctrl + k, ctrl + d</li></ul></li></ul><h3 id="简要介绍类型、变量与方法"><a href="#简要介绍类型、变量与方法" class="headerlink" title="简要介绍类型、变量与方法"></a>简要介绍类型、变量与方法</h3><ul><li><p>初识类型（Type）</p><ul><li><p>亦称数据类型（Data Type）：明确的数据类型/推断的数据类型（<code>var</code>）</p></li><li><p>例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>; <span class="comment">// 编译器会根据赋的值自动推断var变量的类型</span></span><br><span class="line">Console.WriteLine(x.GetType().Name); <span class="comment">// 输出为Int32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">3L</span>;</span><br><span class="line">Console.WriteLine(y.GetType().Name); <span class="comment">// 输出为Int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> z = <span class="number">3.0</span>;</span><br><span class="line">Console.WriteLine(z.GetType().Name); <span class="comment">// 输出为Double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="number">3.0F</span>;</span><br><span class="line">Console.WriteLine(w.GetType().Name); <span class="comment">// 输出为Single</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>变量是存放数据的地方，简称“数据”</p><ul><li>变量的声明</li><li>变量的使用</li></ul></li><li><p>方法（旧称函数）是处理数据的逻辑，又称“算法”</p><ul><li><p>方法即成员函数</p></li><li><p>方法的声明</p></li><li><p>方法的调用</p></li><li><p>例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Identifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">            <span class="built_in">int</span> x = c.Add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> str = c.GetToday();</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line"></span><br><span class="line">            c.PrintSum(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetToday</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> day = DateTime.Now.Day;</span><br><span class="line">            <span class="keyword">return</span> day.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintSum</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = a + b;</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>程序=数据+算法</p><ul><li>有了变量和方法就可以写有意义的程序了</li></ul></li></ul><h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><ul><li><p>循环初体验</p><p>循环又称迭代。例子：打印x到1</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Identifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">            c.PrintXTo1(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintXTo1</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = x; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归初体验</p><p>例子：打印x到1</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Identifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">            c.PrintXTo1(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 递归写法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintXTo1</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(x);</span><br><span class="line">                PrintXTo1(x - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>计算1到100的和</p><p>循环写法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Identifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">            <span class="built_in">int</span> result = c.SumFrom1ToX(<span class="number">100</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环写法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SumFrom1ToX</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; x + <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归写法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Identifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">            <span class="built_in">int</span> result = c.SumFrom1ToX(<span class="number">100</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 递归写法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">SumFrom1ToX</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> result = x + SumFrom1ToX(x - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="本节作业-2"><a href="#本节作业-2" class="headerlink" title="本节作业"></a>本节作业</h3><p>独立完成“汉诺塔问题”</p><p>汉诺塔的问题：n个盘子，由A柱子，经过B柱子，最终放到C柱子上。</p><p>以递归角度进行分析为：</p><ul><li>把n-1个盘子由A移动到B；(借助辅助塔C)</li><li>把第n个盘子，由A移动到C;</li><li>把n-1个盘子由B移动到C; (借助辅助塔A) </li></ul><p>汉诺塔的代码：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Identifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">move</span>(<span class="params"><span class="built_in">int</span> disks, <span class="built_in">char</span> <span class="keyword">from</span>, <span class="built_in">char</span> to</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;移动次数: &#123;0&#125; 把块: &#123;1&#125; 按照如下移动： &#123;2&#125; --&gt; &#123;3&#125;&quot;</span>, ++m, disks, <span class="keyword">from</span>, to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoi</span>(<span class="params"><span class="built_in">int</span> disks, <span class="built_in">char</span> <span class="keyword">from</span>, <span class="built_in">char</span> to, <span class="built_in">char</span> assist</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (disks == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                move(<span class="number">1</span>, <span class="keyword">from</span>, to);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                hanoi(disks - <span class="number">1</span>, <span class="keyword">from</span>, assist, to);</span><br><span class="line">                move(disks, <span class="keyword">from</span>, to);</span><br><span class="line">                hanoi(disks - <span class="number">1</span>, assist, to, <span class="keyword">from</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">char</span> A = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">char</span> B = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">            <span class="built_in">char</span> C = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">            hanoi(<span class="number">4</span>, A, C, B);</span><br><span class="line">            Console.WriteLine(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简化后的程序：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Identifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">move</span>(<span class="params"><span class="built_in">char</span> <span class="keyword">from</span>, <span class="built_in">char</span> to</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoi</span>(<span class="params"><span class="built_in">int</span> disks, <span class="built_in">char</span> <span class="keyword">from</span>, <span class="built_in">char</span> to, <span class="built_in">char</span> assist</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (disks == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                move(<span class="keyword">from</span>, to);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                hanoi(disks - <span class="number">1</span>, <span class="keyword">from</span>, assist, to);</span><br><span class="line">                move(<span class="keyword">from</span>, to);</span><br><span class="line">                hanoi(disks - <span class="number">1</span>, assist, to, <span class="keyword">from</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">char</span> <span class="keyword">from</span> = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="built_in">char</span> to = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">            <span class="built_in">char</span> assist = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">            hanoi(<span class="number">4</span>, <span class="keyword">from</span>, to, assist);</span><br><span class="line">            Console.WriteLine(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-详解类型、变量与对象（上）"><a href="#6-详解类型、变量与对象（上）" class="headerlink" title="6. 详解类型、变量与对象（上）"></a>6. 详解类型、变量与对象（上）</h2><p>分析编程语言在内存中是如何运作的。</p><h3 id="什么是类型（Type）"><a href="#什么是类型（Type）" class="headerlink" title="什么是类型（Type）"></a>什么是类型（Type）</h3><ul><li><p>数据结构是类型的延申。</p></li><li><p>又名数据类型（Data Type）</p><ul><li>A data type is a homogeneous collection of values, effectively presented, equipped with a set of operations which manipulate these values.</li><li>是数据在内存中存储时的“型号”。内存全称是内部存储单元。当今的计算机架构是冯诺依曼系统，其有几大组成部分：运算器和控制器（CPU），存储器（内存），输入输出系统。程序运行时必须从硬盘加载到内存中，内存越大的计算机，内存中可以同时运行的程序越多。总之，内存是计算机程序运行的空间。外存是扩展存储器，是对内存的扩展，如计算机中的硬盘，硬盘是电磁存储，因此关机后数据也不会丢失。</li><li>小内存容纳大尺寸数据会轻则丢失精确度，重则发生错误。</li><li>大内存容纳小尺寸数据会导致内存的浪费。</li><li>编程语言的数据类型与数学中的数据类型不完全相同。例如数学中3/4=0.75，编程中3/4=0。</li></ul></li><li><p>强类型语言与弱类型语言的比较</p><ul><li><p>编程时，数据受到数据类型的约束，就是强类型编程语言。数据不严格受数据类型的约束，就是弱类型编程语言。强弱类型语言各有优缺点。C#语言是强类型语言。例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> x;</span><br><span class="line">x = <span class="number">100</span>; <span class="comment">// 内存中用32 bit/4 Byte来存储100这个整数值</span></span><br><span class="line"><span class="built_in">long</span> y;</span><br><span class="line">y = <span class="number">100L</span>; <span class="comment">// L代表长整型整数，在内存中用64 bit/8 Byte</span></span><br><span class="line"><span class="comment">// x = 100L; 这样写会报错，且会build失败</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> b;</span><br><span class="line">b = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// b = 100; 报错，因为整数100无法转化为bool类型的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (x = <span class="number">200</span>) <span class="comment">// if的括号中明确要求一个bool类型的值。赋值后得到的不是bool值，因此会报错</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;It&#x27;s OK!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>C语言实例：if条件</p><p>例子：新建一个c++项目，new project-visual c++-win32-Win32 Console Application</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Console.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// c中没有专门的布尔类型，只要表达式的值不为0，就算作真，此处赋值后，得到的值为200，算作真</span></span><br><span class="line"><span class="keyword">if</span> (x = <span class="number">200</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s OK!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C中常见的避免错误的写法，将字面值写到前面去，即<code>200 = x</code>，编译器报错后，就立即改为<code>200 == x</code>。</p></li><li><p>JavaScript示例：动态类型。js中的变量基本不受数据类型的约束。</p><p>例子：新建项目，选择visual c#-web-asp.net web application，选择empty，web forms。右击项目-add-html page，命名为<code>index.html</code>，这样其执行后就是首页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ButtonClicked</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> myVar = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            myVar = <span class="string">&quot;Chen Yifan&quot;</span>; <span class="comment">// 强类型中不允许，但js中可以</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(myVar); <span class="comment">// 弹出小的警告框，显示100，这里js并没有管100的类型</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, JavaScript!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click Me&quot;</span><span class="attr">onclick</span>=<span class="string">&quot;ButtonClicked()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>弱类型，灵活性与危险并存。</p></li><li><p>C#语言（4.0版本后）对弱类型/动态类型的模仿，例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c#中的dynamic关键字类似于js中的var关键字</span></span><br><span class="line"><span class="built_in">dynamic</span> myVar = <span class="number">100</span>;</span><br><span class="line">Console.WriteLine(myVar);</span><br><span class="line">myVar = <span class="string">&quot;Chen Yifan&quot;</span>;</span><br><span class="line">Console.WriteLine(myVar);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="类型在C-语言中的作用"><a href="#类型在C-语言中的作用" class="headerlink" title="类型在C#语言中的作用"></a>类型在C#语言中的作用</h3><ul><li><p>一个C#类型中所包含的信息有：</p><ul><li><p>存储此类型变量所需的内存空间大小，例如int类型占有4 Byte/32 bit，long类型占有8 Byte/64 bit。</p></li><li><p>此类型的值可表示的最大、最小值范围（与第一条推算）。可以查看以下的<a href="https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/s1ax56ch(v=vs.120">文档</a>?redirectedfrom=MSDN)，再分为三个文档：<a href="https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/exx3b86w(v=vs.120">Integral Types Table</a>?redirectedfrom=MSDN), <a href="https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/9ahet949(v=vs.120">Floating-Point Types Table</a>?redirectedfrom=MSDN), <a href="https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/364x0z75(v=vs.120">decimal</a>?redirectedfrom=MSDN)。一般用<code>ulong</code>来表示对象的身份id（类似<code>uuid</code>）。</p></li><li><p>此类型所包含的成员（如方法、属性、事件等）</p></li><li><p>此类型由何基类（父类）派生而来。程序未执行时，处于静态时期，即编辑期和编译期；程序执行起来后，处于动态/运行时期，即运行期。C#的机制：反射，即程序运行时，拿到对象/类型，可以立即知道其中的成员，然后根据需求来操作这些成员。例子参见<code>TypeSample</code>，代码如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type myType = <span class="keyword">typeof</span>(Form); <span class="comment">// 查看Form类的类型</span></span><br><span class="line"></span><br><span class="line">            PropertyInfo[] pInfos = myType.GetProperties(); <span class="comment">// 一个类型知道其成员, GetProperties能够在程序运行的过程中动态地探知类型的所有属性</span></span><br><span class="line">            MethodInfo[] mInfos = myType.GetMethods(); <span class="comment">// GetMethods是得到该类型方法的函数</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> m <span class="keyword">in</span> mInfos)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(m.Name);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> pInfos)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(p.Name);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">            Console.WriteLine(myType.Name); <span class="comment">// Form类的类型的名字就是Form</span></span><br><span class="line">            Console.WriteLine(myType.FullName); <span class="comment">// Form类的类型的全名是System.Windows.Forms.Form</span></span><br><span class="line">            Console.WriteLine(myType.BaseType.FullName); <span class="comment">// 一个类型知道其基类/父类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射的用途：能够拿到某个属性，就能动态地访问到该属性的值；能够拿到某个方法，就能够动态地调用该方法。</p></li><li><p>程序运行的时候，此类型的变量在分配在内存的什么位置（即变量应该被分配到栈中还是堆中）。静态的程序在硬盘中，动态的程序在内存中。运行程序就是静态到动态的切换，就是从硬盘中装载到内存中。内存中有两个区域，分别是stack栈和heap堆。</p><ul><li><p>Stack简介：函数调用用到的是栈。栈较小，只有1-2M。</p></li><li><p>Stack overflow：栈较小且快。栈爆的两种情况：</p><ul><li>算法没写好，函数调用过多</li><li>往栈上分配了太多的内存</li></ul></li><li><p>stack overflow的例子1，对应stack overflow的第一种情况：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StackOverflow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BadGuy bg = <span class="keyword">new</span> BadGuy();</span><br><span class="line">            bg.BadMethod();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">BadGuy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BadMethod</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 递归调用BadMethod</span></span><br><span class="line">            <span class="comment">// 很快就会stack overflow，因为每次调用都需要在栈上切出一块内存存储变量x</span></span><br><span class="line">            <span class="keyword">this</span>.BadMethod(); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stack overflow的例子2，对应stack overflow的第二种情况：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StackOverflow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// stackalloc是往栈上切内存，切的过多就会stack overflow</span></span><br><span class="line">            <span class="comment">// c#中不推荐使用指针，一定要用需要在函数前加unsafe</span></span><br><span class="line">            <span class="comment">// 记得去project-StackOverflow properties-build中勾选allow unsafe code，并保存</span></span><br><span class="line">            <span class="keyword">unsafe</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span>* p = <span class="keyword">stackalloc</span> <span class="built_in">int</span>[<span class="number">9999999</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Heap简介：堆用来存储对象/实例。堆较大，有几个G。</p></li><li><p>使用Performance Monitor查看进程的堆内存使用量</p></li><li><p>使用wpf application介绍堆。compile是编译，build是组装。一个程序从硬盘加载到内存中，开始执行后，就形成了一个进程（process）。在wpf application中，创建一个界面，上面有两个button，一个用于consume heap memory，一个用于release heap memory，对应的点击两个按钮后执行的逻辑为：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Controls;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Documents;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Input;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Navigation;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HeapSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interaction logic for MainWindow.xaml</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Window&gt; winList; <span class="comment">// 本变量需要被两个函数使用，因此被声明在函数之外</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            winList = <span class="keyword">new</span> List&lt;Window&gt;();</span><br><span class="line">            <span class="comment">// 往list中加入15000个Window，Window的实例占用的内存较多</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15000</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Window w = <span class="keyword">new</span> Window();</span><br><span class="line">                winList.Add(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Botton2_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            winList.Clear(); <span class="comment">// 找合适的时机回收垃圾内存</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build-build solution后，右击项目，选择open folder in file explorer，进入bin-debug，双击运行<code>HeapSample.exe</code>。win+r，键入perfmon，即performance monitor，打开了性能监视器，可用其监视系统和某个程序的性能。点击添加-process-private bytes，选择实例为HeapSample，即可开始监视HeapSample这个程序使用的堆内存。双击图例，选择图表，最大值从100改为1024，然后的点击两个按钮，即可开始实验。观察到，点击consume heap memory按钮，堆内存的占用拉高；点击release heap memory按钮，堆内存的占用先不变，后拉低（因为不是立即释放内存，而是在合适的时机释放内存，当内存占用不多时，先不会释放内存）。</p><p>未来写程序时，观察程序是否占用过多内存，或者某个操作是否占用过多的内存，就可以用performance monitor。</p></li><li><p>关于内存泄漏：对象被分配，但没有被回收，导致内存被浪费掉了。比较C++和C#</p><ul><li>C++中，对象被分配但没被回收，会导致内存泄漏</li><li>C#中，有垃圾收集器的机制，不需要手动释放内存，会自动回收内存。C#中也不需要手动释放内存，相对安全，不易出现内存泄漏。</li></ul></li></ul></li><li><p>此类型所允许的操作（运算），例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result1 = <span class="number">3.0</span> / <span class="number">4.0</span>; <span class="comment">// 浮点除法</span></span><br><span class="line">            Console.WriteLine(result1);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">double</span> result2 = <span class="number">3</span> / <span class="number">4</span>; <span class="comment">// 整数除法</span></span><br><span class="line">            Console.WriteLine(result2); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="7-详解类型、变量与对象（下）"><a href="#7-详解类型、变量与对象（下）" class="headerlink" title="7. 详解类型、变量与对象（下）"></a>7. 详解类型、变量与对象（下）</h2><h3 id="C-语言的类型系统"><a href="#C-语言的类型系统" class="headerlink" title="C#语言的类型系统"></a>C#语言的类型系统</h3><ul><li><p>C#的五大数据类型</p><ul><li>类（Classes）：如Windows, Form, Console, String</li><li>结构体（Structures）：如Int32, Int64, Single, Double</li><li>枚举（Enumerations）：如HorizontalAlignment, Visibility</li><li>接口（Interfaces）</li><li>委托（Delegates）</li></ul></li><li><p>C#类型的派生谱系</p><p>树状的，带有层级结构的类型系统。根部是Object数据类型。C#的类型系统包括引用类型和值类型，引用类型包括类、接口和委托，值类型包括结构体和枚举，所有类型都以Object类型为基类型。三组关键字。第一组对应的是引用类型，蓝色的是数据类型的关键字，黑色的是用于定义引用类型的关键字，<code>class</code>用于定义类，<code>interface</code>用于定义接口，<code>delegate</code>用于定义委托。第二组对应的是值类型，蓝色的是数据类型，黑色的是用于定义值类型的关键字，<code>struct</code>用于定义结构体，<code>enum</code>用于定义枚举。第三组，最上面是bool类型的取值，中间的：<code>void</code>表示函数无返回值，<code>null</code>表示引用变量为空，最下面是用于声明变量的。</p><p>蓝色的字表明：</p><ul><li>是现成的数据类型，非常常用，c#已经将其作为关键字</li><li>是基本数据类型（又称内建数据类型），别的类型都是基于这些类型构成的，没有更基本的类型来构成它们</li></ul><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/csharpType.png?raw=true" alt="csharpType.png"></p></li><li><p>实验</p><ul><li><p>实验1：证明Form是一个类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type myType = <span class="keyword">typeof</span>(Form); <span class="comment">// 获取Form的类型</span></span><br><span class="line">Console.WriteLine(myType.FullName);</span><br><span class="line">Console.WriteLine(myType.IsClass);</span><br></pre></td></tr></table></figure><p>或者在<code>Form</code>上右击，选择go to definition，或者按下快捷键F12，就来到了微软定义<code>Form</code>的地方，可以看到定义<code>Form</code>时，有以下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Form</span> : <span class="title">ContainerControl</span></span><br></pre></td></tr></table></figure><p>因此<code>Form</code>的类型是class，其基类是<code>ContainerControl</code>。</p></li><li><p>实验2：结构体类型：<code>int</code>, <code>long</code>等，都是结构体类型。在上面右击，选择go to definition，即可验证。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Int32 : IComparable, IFormattable, IConvertible, IComparable&lt;<span class="built_in">int</span>&gt;, IEquatable&lt;<span class="built_in">int</span>&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Int64 : IComparable, IFormattable, IConvertible, IComparable&lt;<span class="built_in">long</span>&gt;, IEquatable&lt;<span class="built_in">long</span>&gt;</span><br></pre></td></tr></table></figure><p><code>int</code>即相当于<code>Int32</code>，<code>long</code>即相当于<code>Int64</code>。</p></li><li><p>实验3：枚举类型，用于限定用户从一个集合中选取有效值。显示窗口时，有三种状态：最大化、标准模式（可调整窗口大小）和最小化。现在来设置窗口的状态，有效值就三个，因此需要枚举类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Form f = <span class="keyword">new</span> Form();</span><br><span class="line">f.WindowState = FormWindowState.Maximized; </span><br><span class="line">f.ShowDialog(); <span class="comment">// 此时显示最大化的窗口</span></span><br></pre></td></tr></table></figure><p>查看<code>FormWindowState</code>的源代码，用<code>enum</code>关键字声明的类型就是枚举类型：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> Assembly System.Windows.Forms.dll, v4.0.0.0</span></span><br><span class="line"><span class="comment">// C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.Windows.Forms.dll</span></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System.Windows.Forms</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     Specifies how a form window is displayed.</span></span><br><span class="line">    [<span class="meta">ComVisible(true)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> FormWindowState</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Summary:</span></span><br><span class="line">        <span class="comment">//     A default sized window.</span></span><br><span class="line">        Normal = <span class="number">0</span>,</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Summary:</span></span><br><span class="line">        <span class="comment">//     A minimized window.</span></span><br><span class="line">        Minimized = <span class="number">1</span>,</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Summary:</span></span><br><span class="line">        <span class="comment">//     A maximized window.</span></span><br><span class="line">        Maximized = <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三个关键字：</p><ul><li><code>class</code>：用来声明类 类型</li><li><code>struct</code>：用来声明结构体类型</li><li><code>enum</code>：用来声明枚举类型</li></ul></li><li><p>接口和委托类型暂且不讲。</p></li></ul></li></ul><h3 id="变量、对象与内存（核心内容）"><a href="#变量、对象与内存（核心内容）" class="headerlink" title="变量、对象与内存（核心内容）"></a>变量、对象与内存（核心内容）</h3><ul><li><p>什么是变量</p><p><strong>变量 = 以变量名所对应的内存地址为起点、以其数据类型所要求的存储空间为长度的一块内存区域</strong></p><ul><li><p>表面上来看（C#代码的上下文行文上来看），变量的用途是存储数据</p></li><li><p>实际上，<strong>变量表示了存储位置，并且每个变量都有一个类型，以决定什么样的值能够存入变量</strong></p><ul><li><p>变量表示了存储位置：变量名表示（对应着）变量的值在内存中的存储位置。例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> x; <span class="comment">// x是一个标签，其对应着内存中的地址，100就存在这个地址</span></span><br><span class="line">x = <span class="number">100</span>; </span><br></pre></td></tr></table></figure></li><li><p>每个变量都有一个类型，以决定什么样的值能够存入变量。同样用上面的例子解释：只有<code>int</code>类型的值可以保存到x指示的地址上去。</p></li></ul></li><li><p>变量一共有7种</p><ul><li>静态变量，实例变量（成员变量，字段），数组元素，值参数，引用参数，输出形参，局部变量</li></ul></li><li><p>狭义的变量指局部变量，因为其它种类的变量都有自己的约定名称</p><ul><li>简单地讲，局部变量就是方法体（函数体）里声明的变量</li></ul></li><li><p>7种变量的例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeInCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">100</span>]; <span class="comment">// 声明了长度为100的整型数组</span></span><br><span class="line">            <span class="comment">// 取出数组中的元素: array[0], array[99]</span></span><br><span class="line">            <span class="comment">// 这100个数组中的元素都是变量</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> x; <span class="comment">// 局部变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Amount; <span class="comment">// 静态成员变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例变量/字段</span></span><br><span class="line">        <span class="comment">// 字段容易被赋为不合法的值，属性自带逻辑，可以保护字段不被赋不合法的值</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        <span class="comment">// double b是值参数变量, ref double a是引用参数变量, out double a是输出参数变量</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result = a + b; <span class="comment">// result是Add方法的局部变量</span></span><br><span class="line">            <span class="keyword">return</span> result; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量的声明</p><ul><li><p>有效的修饰符组合<sub>opt</sub>+类型+变量名+初始化器<sub>opt</sub></p></li><li><p>opt表示可选的，没有opt下角标则是必需的</p></li><li><p>例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeInCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> a; <span class="comment">// 声明变量</span></span><br><span class="line">            a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> b; <span class="comment">// 声明变量</span></span><br><span class="line">            b = <span class="number">200</span>;</span><br><span class="line">            <span class="built_in">int</span> c = a + b; <span class="comment">// 声明变量</span></span><br><span class="line">            Console.WriteLine(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 有效的修饰符组合: public static</span></span><br><span class="line">        <span class="comment">// 类型: int</span></span><br><span class="line">        <span class="comment">// 变量名: Amount</span></span><br><span class="line">        <span class="comment">// 初始化器: = 0</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Amount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>值类型的变量</p><ul><li><p>值类型没有实例，所谓的“实例”与变量合二为一。比如<code>int a = 100</code>，<code>a</code>既是变量，也是<code>int</code>类型的实例。</p></li><li><p>基本知识：计算机内存的最小单位是bit，1个bit存储1个二进制数。8个bit组成一个字节（Byte），计算机内存中以字节为单元进行存取数据和读取数据，计算机为每个字节准备了一个唯一的编号，内存地址就是某个字节在计算机中的编号。寻找某个特定字节的过程：寻址。</p><p>操作系统如何使用内存：</p><ul><li>部分内存保留给计算机操作系统，别的应用程序不能用</li><li>其他内存为自由内存</li></ul></li><li><p>以byte/sbyte/short/ushort这四种结构体为例，演示值类型的变量在内存中如何存储。</p><ul><li><p>byte: vs中输入byte，然后快捷键ctrl+shift+F1查看其文档，获取基本信息</p></li><li><p>例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeInCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span> b;</span><br><span class="line">            b = <span class="number">100</span>; <span class="comment">// 内存中存储为二进制，值为01100100</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">sbyte</span> sb; <span class="comment">// Signed 8-bit integer, range -128 to 127</span></span><br><span class="line">            sb = <span class="number">100</span>; <span class="comment">// 内存中存储为二进制，值为01100100，最高位为符号位</span></span><br><span class="line">            <span class="comment">// 负数 = 正数按位取反加1，故-100 = 10011100（注意进位）</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">ushort</span> us; <span class="comment">// Unsigned 16-bit integer, range 0 to 65,535</span></span><br><span class="line">            us = <span class="number">1000</span>; <span class="comment">// 内存中存储为二进制，值为000000 + 1111101000, 注意高位存储在内存地址（字节编号）较大处</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">short</span> s; <span class="comment">// Signed 16-bit integer, range -32,768 to 32,767</span></span><br><span class="line">            s = <span class="number">1000</span>; <span class="comment">// 值为000000 + 1111101000</span></span><br><span class="line">            s = <span class="number">-1000</span>; <span class="comment">// 按位取反加1, -1000存储为1111110000011000</span></span><br><span class="line">            <span class="built_in">string</span> str = Convert.ToString(s, <span class="number">2</span>); <span class="comment">// s转为二进制，然后打印为字符串</span></span><br><span class="line">            Console.WriteLine(str); <span class="comment">// 验证-1000存储为1111110000011000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>引用类型的变量与实例</p><ul><li><p>引用类型变量与实例的关系：引用类型变量里存储的数据是对象/实例的内存地址</p></li><li><p>以类为例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeInCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu; <span class="comment">// 计算机看到引用类型，就分配4 Byte，将其中的所有bit都置为0，说明此时变量stu没有引用任何实例</span></span><br><span class="line">            stu = <span class="keyword">new</span> Student(); <span class="comment">// 在堆内存中创建一个Student实例，实例才是真正包含ID和Score这两个字段的实体</span></span><br><span class="line">            <span class="comment">// 将实例在堆内存中的地址保存到stu变量中，即将内存编号以二进制的形式写入上面的4 Byte中</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 也可解释为什么可以用两个不同的引用变量来引用同一个实例</span></span><br><span class="line">            Student stu2;</span><br><span class="line">            stu2 = stu;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uint</span> ID; <span class="comment">// 32 bit</span></span><br><span class="line">        <span class="built_in">ushort</span> Score; <span class="comment">// 16 bit</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>局部变量是在stack上分配内存</p></li><li><p>变量的默认值。例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeInCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ID和Score的默认值为0</span></span><br><span class="line">            <span class="comment">// 所有类型的变量，其默认值都是分配好的Byte的各个bit全部置为0</span></span><br><span class="line">            <span class="comment">// 但所有本地变量都需要有显示地赋初值</span></span><br><span class="line">            Console.WriteLine(stu.ID); </span><br><span class="line">            Console.WriteLine(stu.Score);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">uint</span> ID; </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">ushort</span> Score; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常量（值不可改变的变量），例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeInCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> x = <span class="number">100</span>; <span class="comment">// 常量const，常量不可被二次赋值，常量的初始化器不可省略或者换行</span></span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>装箱与拆箱（Boxing &amp; Unboxing）</p><p>在实际编程中少用，因为会导致性能的损失。有以下的例子和笔记：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TypeInCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">object</span> obj = x; <span class="comment">// 装箱</span></span><br><span class="line">            <span class="comment">// obj是引用类型，在内存中分配4 Byte的存储单元</span></span><br><span class="line">            <span class="comment">// 分开来写: object obj; // 4 Byte全部置零</span></span><br><span class="line">            <span class="comment">// obj = x;</span></span><br><span class="line">            <span class="comment">// 装箱：当obj要引用的值不是堆上的实例，而是栈上的值类型变量</span></span><br><span class="line">            <span class="comment">// 操作就是在堆上找一片空余的区域，将栈上的值拷贝过去</span></span><br><span class="line">            <span class="comment">// 再将堆上的地址存储到obj对应的内存空间中</span></span><br><span class="line">            <span class="comment">// 总之，obj变量对堆上的实例进行引用，实例中封装着x这个整数，这就是装箱</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拆箱: 拿到obj在堆上存储的整数值x</span></span><br><span class="line">            <span class="built_in">int</span> y = (<span class="built_in">int</span>)obj;</span><br><span class="line">            <span class="comment">// 看到obj在堆上存储的值，将其转换为整数类型，然后存储在y对应的内存空间中</span></span><br><span class="line">            Console.WriteLine(y);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 装箱和拆箱会损失性能，因为在栈和堆之间搬运了东西</span></span><br><span class="line">            <span class="comment">// 装箱：将栈上的值类型变量封装为object类型的实例，存储在堆上</span></span><br><span class="line">            <span class="comment">// 拆箱：将堆上object类型的实例里面的值，按照要求拆为目标数据类型，存储在栈上</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="本节作业-3"><a href="#本节作业-3" class="headerlink" title="本节作业"></a>本节作业</h3><ul><li>理解并熟记所有概念和知识</li><li>对照视频编写示例程序，直至能够默写</li></ul><h2 id="8-方法的定义、调用与调试（上）"><a href="#8-方法的定义、调用与调试（上）" class="headerlink" title="8. 方法的定义、调用与调试（上）"></a>8. 方法的定义、调用与调试（上）</h2><h3 id="方法的由来"><a href="#方法的由来" class="headerlink" title="方法的由来"></a>方法的由来</h3><h3 id="方法的定义与调用（重要）"><a href="#方法的定义与调用（重要）" class="headerlink" title="方法的定义与调用（重要）"></a>方法的定义与调用（重要）</h3><h3 id="构造器（一种特殊的方法）"><a href="#构造器（一种特殊的方法）" class="headerlink" title="构造器（一种特殊的方法）"></a>构造器（一种特殊的方法）</h3><h3 id="方法的重载（Overload）"><a href="#方法的重载（Overload）" class="headerlink" title="方法的重载（Overload）"></a>方法的重载（Overload）</h3><h3 id="如何对方法进行debug"><a href="#如何对方法进行debug" class="headerlink" title="如何对方法进行debug"></a>如何对方法进行debug</h3><h3 id="方法的调用与栈"><a href="#方法的调用与栈" class="headerlink" title="方法的调用与栈*"></a>方法的调用与栈*</h3><h2 id="9-方法的定义、调用与调试（下）"><a href="#9-方法的定义、调用与调试（下）" class="headerlink" title="9. 方法的定义、调用与调试（下）"></a>9. 方法的定义、调用与调试（下）</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Comprehensive-Introduction-to-C&quot;&gt;&lt;a href=&quot;#Comprehensive-Introduction-to-C&quot; class=&quot;headerlink&quot; title=&quot;Comprehensive Introduction to </summary>
      
    
    
    
    <category term="Software Development" scheme="http://example.com/categories/Software-Development/"/>
    
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
    <category term="Introduction" scheme="http://example.com/tags/Introduction/"/>
    
  </entry>
  
  <entry>
    <title>Detailed Explanation of Java Stream</title>
    <link href="http://example.com/2024/10/13/Detailed-Explanation-of-Java-Stream/"/>
    <id>http://example.com/2024/10/13/Detailed-Explanation-of-Java-Stream/</id>
    <published>2024-10-13T17:39:20.000Z</published>
    <updated>2024-10-14T03:06:02.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Details-Explanation-of-Java-Stream"><a href="#Details-Explanation-of-Java-Stream" class="headerlink" title="Details Explanation of Java Stream"></a>Details Explanation of Java Stream</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>wsl和本地上用IDEA运行java代码，最新修改的结果往往都无法被正常运行出来，我推测是缓存没有及时刷新之类的。有两个解决办法：</p><ul><li>每次运行前按下快捷键：ctrl + shift + f9，达到rebuild project的目的</li><li>手动点击上边栏，选择build-rebuild project，选择build project没有作用</li></ul><p>根据这个<a href="https://youtrack.jetbrains.com/issue/IDEA-339871/Line-numbers-are-likely-diverged...-tooltip-is-wrong">帖子</a>，要彻底解决这个问题，恐怕要更新到2024.1以后的版本，我暂时不要更新自己的IDEA，因为当前的IDEA还能够正常使用，而我使用的是破解版的密钥，贸然更新可能会导致反而无法正常使用的情况出现。</p><h2 id="不可变集合详解"><a href="#不可变集合详解" class="headerlink" title="不可变集合详解"></a>不可变集合详解</h2><h3 id="创建不可变集合"><a href="#创建不可变集合" class="headerlink" title="创建不可变集合"></a>创建不可变集合</h3><p>不可变集合：不可以被修改的集合。其长度和内容都不可以被修改。</p><p>创建不可变集合的应用场景：</p><ul><li>如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践。</li><li>当集合对象被不可信的库调用时，不可变形式是安全的。</li><li>某些确定的规则。</li><li>电脑中的硬件信息。</li></ul><p><strong>简单理解</strong>：不想让别人修改集合中的内容，就可以给他提供一个不可变的集合。拿到不可变集合的人只能做查询操作，不能删除、修改、添加。</p><p>创建不可变集合的书写格式：<br>在List, Set, Map接口中，都存在静态的of方法，可以获取一个不可变的集合。<br>|                  方法名称                  |                说明                |<br>| :————————————————————: | :————————————————: |<br>|   <code>static &lt;E&gt; List&lt;E&gt; of(E...elements)</code>    | 创建一个具有指定元素的List集合对象 |<br>|    <code>static &lt;E&gt; Set&lt;E&gt; of(E...elements)</code>    | 创建一个具有指定元素的Set集合对象  |<br>| <code>static &lt;K, V&gt; Map&lt;K, V&gt; of(E...elements)</code> | 创建一个具有指定元素的Map集合对象  |</p><p><code>List of</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyf.a01immutable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建不可变的List集合</span></span><br><span class="line"><span class="comment">        &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ctrl + alt + v可以自动生成List&lt;String&gt; list，只需要自己写List.of即可</span></span><br><span class="line">        <span class="comment">// 一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list.remove(&quot;李四&quot;);</span></span><br><span class="line">        <span class="comment">// list.add(&quot;aaa&quot;);</span></span><br><span class="line">        <span class="comment">// list.set(0, &quot;aaa&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Set of</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyf.a01immutable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo2</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建不可变的Set集合</span></span><br><span class="line"><span class="comment">        &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ctrl + alt + v可以自动生成List&lt;String&gt; list，只需要自己写List.of即可</span></span><br><span class="line">    <span class="comment">// 一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">    <span class="comment">// 细节：当我们要获取一个不可变的Set集合时，里面的参数一定要保证唯一性</span></span><br><span class="line">    Set&lt;String&gt; set = Set.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set中没有索引，因此查询只能遍历</span></span><br><span class="line">    <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">      System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">      System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能删除、添加、修改</span></span><br><span class="line">    <span class="comment">// set.remove(&quot;王五&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map.of</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyf.a01immutable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo3</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建Map的不可变集合</span></span><br><span class="line"><span class="comment">    细节1：键是不能重复的</span></span><br><span class="line"><span class="comment">    细节2：Map里面的of方法，参数是有上限的，最多只能传递20个参数，即10个键值对</span></span><br><span class="line"><span class="comment">    细节3：如果我们要传递多个键值对对象，数量大于10个，在Map接口中还有一个方法：Map.ofEntries()</span></span><br><span class="line"><span class="comment">    其将键和值看作一个整体，由于形参中可以有一个可变参数，因此可以实现传递多个键值对对象的功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">    Map&lt;String, String&gt; map =</span><br><span class="line">        Map.of(</span><br><span class="line">            <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;广州&quot;</span>, <span class="string">&quot;孙七&quot;</span>, <span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;周八&quot;</span>, <span class="string">&quot;杭州&quot;</span>, <span class="string">&quot;吴九&quot;</span>, <span class="string">&quot;宁波&quot;</span>,</span><br><span class="line">            <span class="string">&quot;郑十&quot;</span>, <span class="string">&quot;苏州&quot;</span>, <span class="string">&quot;刘一&quot;</span>, <span class="string">&quot;无锡&quot;</span>, <span class="string">&quot;陈二&quot;</span>, <span class="string">&quot;嘉兴&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map.keySet获取所有的键</span></span><br><span class="line">    Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">      System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map的第二种遍历方式</span></span><br><span class="line">    <span class="comment">// map.entrySet()获取所有键值对</span></span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">      <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">      System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果我想让这个方法能够接收多个键和值</span></span><br><span class="line">  <span class="comment">// 解决方案：</span></span><br><span class="line">  <span class="comment">// 键 可变参数</span></span><br><span class="line">  <span class="comment">// 值 可变参数</span></span><br><span class="line">  <span class="comment">// 键和值的类型不确定：泛型方法&lt;&gt;</span></span><br><span class="line">  <span class="comment">// 由于两个可变参数无法在形参中共存，因此无法设计这个方法</span></span><br><span class="line">  <span class="comment">//  public static&lt;K, V&gt; void of(K...keys, V...values) &#123;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map.ofEntries</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyf.a01immutable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo4</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建Map的不可变集合，键值对的数量超过10个</span></span><br><span class="line"><span class="comment">    细节3：如果我们要传递多个键值对对象，数量大于10个，在Map接口中还有一个方法：Map.ofEntries()</span></span><br><span class="line"><span class="comment">    其将键和值看作一个整体，由于形参中可以有一个可变参数，因此可以实现传递多个键值对对象的功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 创建一个普通的Map集合</span></span><br><span class="line">    HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hm.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;南京&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;广州&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;孙七&quot;</span>, <span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;周八&quot;</span>, <span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;吴九&quot;</span>, <span class="string">&quot;宁波&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;郑十&quot;</span>, <span class="string">&quot;苏州&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;刘一&quot;</span>, <span class="string">&quot;无锡&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;陈二&quot;</span>, <span class="string">&quot;嘉兴&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 利用上面的数据来获取一个不可变的集合</span></span><br><span class="line">    <span class="comment">// 获取所有的键值对对象（Entry对象）</span></span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hm.entrySet();</span><br><span class="line">    <span class="comment">// 由于可变参数在底层就是一个数组，因此需要将上面的entries变成数组</span></span><br><span class="line">    <span class="comment">// 需要调用指定类型的toArray函数，类型是Map.Entry</span></span><br><span class="line">    Map.Entry[] arr1 = <span class="keyword">new</span> <span class="title class_">Map</span>.Entry[<span class="number">0</span>]; <span class="comment">// 将map中的所有数据放到arr中</span></span><br><span class="line">    <span class="comment">// toArray方法在底层会比较集合的长度跟数组的长度两者的大小</span></span><br><span class="line">    <span class="comment">// 如果集合的长度11 &gt; 数组的长度0：数据在数组中放不下，此时会根据实际数据的个数11，重新创建数组</span></span><br><span class="line">    <span class="comment">// 如果集合的长度&lt;=数组的长度：数据在数组中放得下，此时不会创建新的数组，而是直接用</span></span><br><span class="line">    <span class="comment">// 因此数组的长度直接写成0就可以，不用想数组的长度是否和集合的长度匹配</span></span><br><span class="line">    Map.Entry[] arr2 = entries.toArray(arr1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可变的map集合</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> Map.ofEntries(arr2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可增删改，只可查</span></span><br><span class="line">    <span class="comment">// map.put(&quot;bbb&quot;, &quot;222&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码非常麻烦，可以简化。</p><h3 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h3><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><h2 id="初爽Stream流"><a href="#初爽Stream流" class="headerlink" title="初爽Stream流"></a>初爽Stream流</h2><h2 id="Stream流的思想和获取Stream流"><a href="#Stream流的思想和获取Stream流" class="headerlink" title="Stream流的思想和获取Stream流"></a>Stream流的思想和获取Stream流</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Details-Explanation-of-Java-Stream&quot;&gt;&lt;a href=&quot;#Details-Explanation-of-Java-Stream&quot; class=&quot;headerlink&quot; title=&quot;Details Explanation of J</summary>
      
    
    
    
    <category term="web开发" scheme="http://example.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Java Stream" scheme="http://example.com/tags/Java-Stream/"/>
    
  </entry>
  
  <entry>
    <title>Day 31 Leetcode Basics of Greedy Algorithms, 455, 376, 53</title>
    <link href="http://example.com/2024/09/09/Day-31-Leetcode-Basics-of-Greedy-Algorithms-455-376-53/"/>
    <id>http://example.com/2024/09/09/Day-31-Leetcode-Basics-of-Greedy-Algorithms-455-376-53/</id>
    <published>2024-09-08T23:21:53.000Z</published>
    <updated>2024-09-09T02:06:14.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">理论基础</a></p><p><a href="https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html">455.分发饼干</a></p><p><a href="https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html">376. 摆动序列</a></p><p><a href="https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html">53. 最大子序和</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><h4 id="什么是贪心"><a href="#什么是贪心" class="headerlink" title="什么是贪心"></a>什么是贪心</h4><p>贪心算法的本质是找到每个阶段的<strong>局部最优</strong>，从而去推导<strong>全局最优</strong>。</p><p>例如：</p><ul><li>10张面值不同的钞票，如何取能取到总数最多的钱？每次取面额最大的钞票即可，这就是局部最优。取10次后拿到最多的钱，就是全局最优。这是贪心的思路。</li><li>背包最大承重是n。有一系列物品，其重量和价值各不相同，问这个背包能装的最大价值是多少？这需要用动态规划的思路来解决。</li></ul><h4 id="贪心的两个极端"><a href="#贪心的两个极端" class="headerlink" title="贪心的两个极端"></a>贪心的两个极端</h4><p>贪心的题目要么太简短，要么太难。</p><h4 id="贪心的套路"><a href="#贪心的套路" class="headerlink" title="贪心的套路"></a>贪心的套路</h4><p>不像二叉树或者回溯算法的套路，<strong>贪心是没有套路的</strong>。部分较难的贪心题目，做过了才知道怎么做，否则完全想不到。非要说有套路，就是要想清楚每个阶段的局部最优，能否由局部最优推出全局最优。怎么由局部最优推出全局最优，也没有固定的思考方式。不需要做数学证明（数学证明的常用方法是数学归纳法和反证法），浪费时间。面试时，<strong>只要想到局部最优，可以推出全局最优，没有明显的反例，就已经可以试试</strong>，面试官不会要求严谨的数学证明。文字版讲解中有解决贪心算法的四个步骤，但实际做题时无法严格遵循四个步骤，实操性不强。</p><h3 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455.分发饼干"></a>455.分发饼干</h3><h3 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376.摆动序列"></a>376.摆动序列</h3><h3 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h3><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="455-分发饼干-1"><a href="#455-分发饼干-1" class="headerlink" title="455.分发饼干"></a>455.分发饼干</h3><p>本题我的思路是，找出s数组的最大值，然后看g数组中有几个数小于等于s数组中的最大值，即为结果。我写了如下的代码，但只通过了23/25个测试样例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; g, vector&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> max = s[s.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (g[i] &lt;= max)</span><br><span class="line">                res ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt;= res) <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>直接看代码随想录的讲解吧。</p><h3 id="376-摆动序列-1"><a href="#376-摆动序列-1" class="headerlink" title="376.摆动序列"></a>376.摆动序列</h3><h3 id="53-最大子序和-1"><a href="#53-最大子序和-1" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h3><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="455-分发饼干-2"><a href="#455-分发饼干-2" class="headerlink" title="455.分发饼干"></a>455.分发饼干</h3><p>例子：<br>胃g: 1, 2, 7, 10<br>饼s: 1, 3, 5, 9<br>输出：3</p><p><strong>策略：尽量用大饼干去喂胃口大的孩子，这样就可以充分利用饼干</strong>。</p><p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对两个数组进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> index = s.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">// 饼干的index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先用大饼干喂胃口大的小孩，因此倒序遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line">    <span class="comment">// 饼干成功投喂后，再向前遍历小孩数组，否则不能向前</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; s[index] &gt;= g[i]) &#123;</span><br><span class="line">        res ++ ;</span><br><span class="line">        index -- ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure></p><p>一定要外层循环遍历胃口，内层循环遍历饼干。如果外层循环遍历饼干，内层循环遍历胃口，拿上面的例子模拟就知道不可行。拿外层循环遍历饼干，内层循环遍历胃口，代码为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对两个数组进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> index = g.<span class="built_in">size</span>() - <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; s[i] &gt;= g[index]) &#123;</span><br><span class="line">        res ++ ;</span><br><span class="line">        index -- ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure></p><p>对于上面的例子，上述写法返回值为0。核心在于，要尝试去喂饱胃口大的孩子，而我们无法确保最大的饼干一定能喂饱胃口最大的孩子，如果最大的饼干无法喂饱胃口最大的孩子，那么上述写法的返回值恒为0。</p><p><strong>另一种思路：尽量用小饼干去满足胃口小的孩子，这样可以充分利用小饼干</strong>。</p><h3 id="376-摆动序列-2"><a href="#376-摆动序列-2" class="headerlink" title="376.摆动序列"></a>376.摆动序列</h3><h3 id="53-最大子序和-2"><a href="#53-最大子序和-2" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h3><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="455-分发饼干-3"><a href="#455-分发饼干-3" class="headerlink" title="455.分发饼干"></a>455.分发饼干</h3><ol><li>一定要外层循环遍历胃口，内层循环遍历饼干。</li><li>内存循环用if判断而不用while循环，因为要一个小孩一个小孩地喂过去。</li><li>两种思路：先去满足大胃口的孩子，先去使用小饼干。两种思路遍历的顺序不同。</li></ol><h3 id="376-摆动序列-3"><a href="#376-摆动序列-3" class="headerlink" title="376.摆动序列"></a>376.摆动序列</h3><h3 id="53-最大子序和-3"><a href="#53-最大子序和-3" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%</summary>
      
    
    
    
    <category term="算法（贪心算法）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="理论基础" scheme="http://example.com/tags/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="贪心算法" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Dublin Restaurant Recommendations</title>
    <link href="http://example.com/2024/07/15/Dublin-Restaurant-Recommendations/"/>
    <id>http://example.com/2024/07/15/Dublin-Restaurant-Recommendations/</id>
    <published>2024-07-15T03:14:56.000Z</published>
    <updated>2024-07-15T03:33:52.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>都柏林，素有美食荒漠、欧洲宁古塔之称。然而，经过本人和好友长期约饭探店的实地考察之后，发现都柏林的中餐馆门类齐全、品种多样，除去价格稍贵外相比于国内并无显著的短板和缺憾。因此，本人维护本帖用于记录都柏林吃喝之旅，并为读者提供一份尽可能详细的都柏林美食推荐清单。</p><p>本人向来赞同孔夫子“食不厌精，脍不厌细”的名言，因此，性价比是这份排行榜中相对次要的因素，食物的调味、口感、精细和新颖程度是更重要的。本帖中的五星代表着这个饭店的食物有独道之处，甚至超过了国内同种食物之最。四星代表着这个饭店的食物在味道或性价比方面至少有一个非常出众，而另一个也至少在平均水平之上。三星代表着值得一试，但并不惊艳。果腹则代表着仅供日常果腹之用，胜在量大管饱。心愿清单则是我早有耳闻，但还未成行的餐馆。本帖中推荐的餐馆会附带有谷歌地图的位置信息和一句简短的点评。本帖中也会提到一些国内的餐馆，主要分布在南昌、西安和合肥，都是本人曾经久居过的城市。本帖中评分点评随性，主观色彩浓重，愿博看官一笑。</p><h2 id="五星"><a href="#五星" class="headerlink" title="五星"></a>五星</h2><ol><li>四川</li><li>川九香</li></ol><h2 id="四星"><a href="#四星" class="headerlink" title="四星"></a>四星</h2><h2 id="三星"><a href="#三星" class="headerlink" title="三星"></a>三星</h2><h2 id="果腹"><a href="#果腹" class="headerlink" title="果腹"></a>果腹</h2><h2 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h2><h2 id="心愿清单"><a href="#心愿清单" class="headerlink" title="心愿清单"></a>心愿清单</h2><ol><li>日料Omakase</li><li>西餐Shanahan’s on the Green</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;都柏林，素有美食荒漠、欧洲宁古塔之称。然而，经过本人和好友长期约饭探店的实地考察之后，发现都柏林的中餐馆门类齐全、品种多样，除去价格稍贵外相</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="美食" scheme="http://example.com/tags/%E7%BE%8E%E9%A3%9F/"/>
    
    <category term="中餐" scheme="http://example.com/tags/%E4%B8%AD%E9%A4%90/"/>
    
    <category term="西餐" scheme="http://example.com/tags/%E8%A5%BF%E9%A4%90/"/>
    
    <category term="日料" scheme="http://example.com/tags/%E6%97%A5%E6%96%99/"/>
    
    <category term="都柏林" scheme="http://example.com/tags/%E9%83%BD%E6%9F%8F%E6%9E%97/"/>
    
  </entry>
  
  <entry>
    <title>recipe</title>
    <link href="http://example.com/2024/06/19/recipe/"/>
    <id>http://example.com/2024/06/19/recipe/</id>
    <published>2024-06-19T04:06:58.000Z</published>
    <updated>2024-06-19T04:20:21.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="菜谱"><a href="#菜谱" class="headerlink" title="菜谱"></a>菜谱</h1><p>下面是我目前已经掌握的菜肴做法。</p><h2 id="青椒炒牛肉"><a href="#青椒炒牛肉" class="headerlink" title="青椒炒牛肉"></a>青椒炒牛肉</h2><p><a href="https://www.xiaohongshu.com/explore/64084cf10000000014024bf6?xsec_token=ABjk8kDPjbnjQBy5ninATf_t4OFqDsNTj2tvDoDR8YAew=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/64084cf10000000014024bf6?xsec_token=ABjk8kDPjbnjQBy5ninATf_t4OFqDsNTj2tvDoDR8YAew=&amp;xsec_source=pc_user</a></p><h2 id="素炒小青菜"><a href="#素炒小青菜" class="headerlink" title="素炒小青菜"></a>素炒小青菜</h2><p><a href="https://www.xiaohongshu.com/explore/649eb823000000001203d1d0?xsec_token=ABhF-yZeYWU_KFyde9iuIRaP4osN7hN84uBTDHM4muOJY=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/649eb823000000001203d1d0?xsec_token=ABhF-yZeYWU_KFyde9iuIRaP4osN7hN84uBTDHM4muOJY=&amp;xsec_source=pc_user</a></p><h2 id="酸汤水饺"><a href="#酸汤水饺" class="headerlink" title="酸汤水饺"></a>酸汤水饺</h2><p><a href="https://www.xiaohongshu.com/explore/640626770000000013030f32?xsec_token=ABKMjy9V_2e41wBdiSonEoj8xIax3g9thkyzM_zYygvEo=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/640626770000000013030f32?xsec_token=ABKMjy9V_2e41wBdiSonEoj8xIax3g9thkyzM_zYygvEo=&amp;xsec_source=pc_user</a></p><h2 id="烤鸡腿"><a href="#烤鸡腿" class="headerlink" title="烤鸡腿"></a>烤鸡腿</h2><p><a href="https://www.xiaohongshu.com/explore/61d80f75000000000102f662?xsec_token=ABFeZ243mB41AtUkgopJjbtnfNUjXvXk5X0vREX-Cr9-o=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/61d80f75000000000102f662?xsec_token=ABFeZ243mB41AtUkgopJjbtnfNUjXvXk5X0vREX-Cr9-o=&amp;xsec_source=pc_user</a></p><h2 id="清汤面"><a href="#清汤面" class="headerlink" title="清汤面"></a>清汤面</h2><p><a href="https://www.xiaohongshu.com/explore/64ef0d47000000001e031fc3?xsec_token=ABhdjuqwDUBOmK31gzU44aiEzUHgQx9krLx1OMg7WbYlQ=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/64ef0d47000000001e031fc3?xsec_token=ABhdjuqwDUBOmK31gzU44aiEzUHgQx9krLx1OMg7WbYlQ=&amp;xsec_source=pc_user</a></p><h2 id="辣椒炒鸡丁"><a href="#辣椒炒鸡丁" class="headerlink" title="辣椒炒鸡丁"></a>辣椒炒鸡丁</h2><p><a href="https://www.xiaohongshu.com/explore/642ef0440000000013003052?xsec_token=ABP-oNHr9xdj_dfJ3PFdEz90JgCfpOKhxwZCwXod7BaKM=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/642ef0440000000013003052?xsec_token=ABP-oNHr9xdj_dfJ3PFdEz90JgCfpOKhxwZCwXod7BaKM=&amp;xsec_source=pc_user</a></p><h2 id="耗油生菜"><a href="#耗油生菜" class="headerlink" title="耗油生菜"></a>耗油生菜</h2><p><a href="https://www.xiaohongshu.com/explore/6331a4890000000017019ee3?xsec_token=ABvHsXQ8990EWiCV0UivQ0VJJbi921rouqm8fD0HcXocg=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/6331a4890000000017019ee3?xsec_token=ABvHsXQ8990EWiCV0UivQ0VJJbi921rouqm8fD0HcXocg=&amp;xsec_source=pc_user</a></p><h2 id="蛋炒饭"><a href="#蛋炒饭" class="headerlink" title="蛋炒饭"></a>蛋炒饭</h2><p><a href="https://www.xiaohongshu.com/explore/6539c724000000001f036536?xsec_token=AByuVdQE_Yu5WBwBdOxBbp1JqGxwtjXagF-Ct3aIRyTB4=&amp;xsec_source=pc_user">https://www.xiaohongshu.com/explore/6539c724000000001f036536?xsec_token=AByuVdQE_Yu5WBwBdOxBbp1JqGxwtjXagF-Ct3aIRyTB4=&amp;xsec_source=pc_user</a></p><h2 id="炒米粉"><a href="#炒米粉" class="headerlink" title="炒米粉"></a>炒米粉</h2><p><a href="https://www.xiaohongshu.com/explore/63d11d5e000000002203b147?xsec_token=AB6hQFjxlcFe1hFOtuDSpjFvIpDPYH0fIElCl-xqe0uk8=&amp;xsec_source=pc_search">https://www.xiaohongshu.com/explore/63d11d5e000000002203b147?xsec_token=AB6hQFjxlcFe1hFOtuDSpjFvIpDPYH0fIElCl-xqe0uk8=&amp;xsec_source=pc_search</a></p><h2 id="排骨汤"><a href="#排骨汤" class="headerlink" title="排骨汤"></a>排骨汤</h2><p><a href="https://www.xiaohongshu.com/explore/63b295f3000000001c0349e2?xsec_token=ABx6mW_uBfj9nVHk20uySHX_8uZaNhS6D0mnuGF2iL0IY=&amp;xsec_source=pc_search">https://www.xiaohongshu.com/explore/63b295f3000000001c0349e2?xsec_token=ABx6mW_uBfj9nVHk20uySHX_8uZaNhS6D0mnuGF2iL0IY=&amp;xsec_source=pc_search</a></p><p><a href="https://www.xiaohongshu.com/explore/654d46ab000000003103d1b1?xsec_token=ABC1d6ftIfXeIjYWoQ6zTAFYDNRBJPT1MTjZYuH7pO92o=&amp;xsec_source=pc_search">https://www.xiaohongshu.com/explore/654d46ab000000003103d1b1?xsec_token=ABC1d6ftIfXeIjYWoQ6zTAFYDNRBJPT1MTjZYuH7pO92o=&amp;xsec_source=pc_search</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;菜谱&quot;&gt;&lt;a href=&quot;#菜谱&quot; class=&quot;headerlink&quot; title=&quot;菜谱&quot;&gt;&lt;/a&gt;菜谱&lt;/h1&gt;&lt;p&gt;下面是我目前已经掌握的菜肴做法。&lt;/p&gt;
&lt;h2 id=&quot;青椒炒牛肉&quot;&gt;&lt;a href=&quot;#青椒炒牛肉&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="做菜" scheme="http://example.com/tags/%E5%81%9A%E8%8F%9C/"/>
    
    <category term="菜谱" scheme="http://example.com/tags/%E8%8F%9C%E8%B0%B1/"/>
    
    <category term="小红书" scheme="http://example.com/tags/%E5%B0%8F%E7%BA%A2%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Day 30 Leetcode 332, 51, 37</title>
    <link href="http://example.com/2024/05/27/Day-30-Leetcode-332-51-37/"/>
    <id>http://example.com/2024/05/27/Day-30-Leetcode-332-51-37/</id>
    <published>2024-05-27T19:30:48.000Z</published>
    <updated>2024-06-07T04:57:59.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0332.%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B.html">332.重新安排行程</a><br><a href="https://programmercarl.com/0051.N%E7%9A%87%E5%90%8E.html">51. N皇后</a><br><a href="https://programmercarl.com/0037.%E8%A7%A3%E6%95%B0%E7%8B%AC.html">37. 解数独</a><br><a href="https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E6%80%BB%E7%BB%93.html">总结</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="51-N皇后"><a href="#51-N皇后" class="headerlink" title="51. N皇后"></a>51. N皇后</h3><p>初始化一个<code>vector&lt;string&gt;</code>，其中的元素全是字符<code>.</code>（共有n行，每行是一个字符串，每个字符串由n个<code>.</code>构成）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">chessboard</span><span class="params">(n, string(n, <span class="string">&#x27;.&#x27;</span>))</span></span>;</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>今天这三道题都非常难，那么这么难的题，为啥一天做三道？</strong> </p><p>因为一刷也不求能把这么难的问题解决，所以一刷的时候，就了解一下题目的要求，了解一下解题思路，不求能直接写出代码，先大概熟悉一下这些题，二刷的时候，随着对回溯算法的深入理解，再去解决如下三题。 </p><h3 id="332-重新安排行程"><a href="#332-重新安排行程" class="headerlink" title="332.重新安排行程"></a>332.重新安排行程</h3><p>本题的思路不难，但选择的数据结构和初始化、遍历等操作非常复杂，是一道难题。</p><p>本题需要一个特殊的数据结构来存储一个机场映射多个机场，机场之间要靠字母序排列的这种复杂关系，选择的数据结构是<code>unordered_map&lt;string, map&lt;string, int&gt;&gt; targets</code>。其具体的含义为<code>unordered_map&lt;出发机场, map&lt;到达机场, 航班次数&gt;&gt; targets</code>。在遍历 <code>unordered_map&lt;出发机场, map&lt;到达机场, 航班次数&gt;&gt; targets</code>的过程中，<strong>可以使用”航班次数”这个字段的数字做相应的增减，来标记到达机场是否使用过了。</strong>如果“航班次数”大于零，说明目的地还可以飞，如果“航班次数”等于零说明目的地不能飞了，而不用对集合做删除元素或者增加元素的操作。有如下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unordered_map&lt;出发机场, map&lt;到达机场, 航班次数&gt;&gt; targets</span></span><br><span class="line"><span class="comment">// 使用map的原因是为了让其key有序（字典序）</span></span><br><span class="line"><span class="comment">// 第一个unordered_map是为了存储出发机场和到达机场间的映射关系，第二个map是为了对到达机场按照字典序排序，且记录到达机场在输入数据中出现的次数</span></span><br><span class="line">unordered_map&lt;string, map&lt;string, <span class="type">int</span>&gt;&gt; targets;</span><br></pre></td></tr></table></figure></p><p>本题的树形结构如下所示，以输入：<code>[[&quot;JFK&quot;, &quot;KUL&quot;], [&quot;JFK&quot;, &quot;NRT&quot;], [&quot;NRT&quot;, &quot;JFK&quot;]</code>为例：<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2020111518065555-20230310121223600.png" alt="332.重新安排行程1"></p><p>对上述树形结构的解释：始终从<code>JFK</code>出发，输入中<code>JFK</code>可以到<code>KUL</code>或者<code>NRT</code>，因此可以有这两个选择。输入中没有以<code>KUL</code>作为出发点的航班，因此飞向<code>KUL</code>的那一枝结束。飞向<code>NRT</code>的一枝，输入中以<code>NRT</code>为出发点的航班的终点是<code>JFK</code>，因此有行程：<code>JFK-&gt;NRT-&gt;JFK</code>。输入中以<code>JFK</code>为出发点的航班的终点可以是<code>KUL</code>或者<code>NRT</code>，因此分为两枝。<code>JKF</code>已经飞过<code>NRT</code>，因此剪枝；<code>JKF</code>飞<code>KUL</code>构成了行程：<code>JFK-&gt;NRT-&gt;JFK-&gt;KUL</code>，三趟航班，形成中有四个机场，说明找到了结果。</p><p>通过上述分析，我们可以得出代码的终止条件：n张机票，即有n个航班，则行程中有n + 1个机场（机场可重复）时，收集结果。原因是行程是由若干个向量组成的，每个向量都是一个航班，行程是单向的，不会形成环。因此，若有n个向量（即n个航班），那么就会有n + 1个节点（即单个向量的首尾），即n + 1个机场。有如下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; res; <span class="comment">// 存放结果，即由n个航班拼接成的行程，其中有n + 1个机场</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ticketNum为票数，即航班数</span></span><br><span class="line"><span class="keyword">if</span> (result.<span class="built_in">size</span>() == ticketNum + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在写单层递归逻辑前，需要先对<code>res</code>数组和<code>targets</code>数组进行初始化，代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">const</span> vector&lt;string&gt;&amp; vec : tickets) &#123;</span><br><span class="line">    targets[vec[<span class="number">0</span>]][vec[<span class="number">1</span>]]++; <span class="comment">// 记录映射关系</span></span><br><span class="line">&#125;</span><br><span class="line">result.<span class="built_in">push_back</span>(<span class="string">&quot;JFK&quot;</span>); <span class="comment">// 起始机场</span></span><br></pre></td></tr></table></figure></p><p><code>tickets</code>数组是输入，其类型是<code>vector&lt;vector&lt;string&gt;&gt;</code>。由于输入不可更改，且其中的每个元素的类型都是<code>vector&lt;string&gt;</code>，因此用类型为<code>const vector&lt;string&gt;</code>的变量对其进行遍历，这里的引用就不加都可以，不会影响运行结果。<code>vec[0]</code>为出发机场，<code>vec[1]</code>为到达机场。<code>targets</code>中存储的是出发机场与到达机场的映射关系。对一个出发机场，若输入中存在其的到达机场，则在<code>targets</code>中记录这个映射关系，且<code>map&lt;string, int&gt;</code>中的<code>string</code>存储到达机场（<code>vec[1]</code>），<code>int</code>存储次数（有出发机场和其对应的到达机场，则该<code>int</code>存1）。这实现了对每一个航线（从某个出发机场到某个目的地机场）的航班次数进行计数。</p><p>根据树形结构，可以写出单层递归的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (pair&lt;<span class="type">const</span> string, <span class="type">int</span>&gt;&amp; target : targets[result[result.<span class="built_in">size</span>() - <span class="number">1</span>]]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target.second &gt; <span class="number">0</span> ) &#123; <span class="comment">// 记录到达机场是否飞过了</span></span><br><span class="line">        result.<span class="built_in">push_back</span>(target.first);</span><br><span class="line">        target.second--;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">backtracking</span>(ticketNum, result)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        result.<span class="built_in">pop_back</span>();</span><br><span class="line">        target.second++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里特别需要注意的是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (pair&lt;<span class="type">const</span> string, <span class="type">int</span>&gt;&amp; target : targets[result[result.<span class="built_in">size</span>() - <span class="number">1</span>]])</span><br></pre></td></tr></table></figure></p><p>其含义为：<code>result[result.size() - 1]</code> 获取 <code>result</code> 向量的最后一个元素，即当前路径中最新的机场。然后，使用这个机场名称作为键，从 <code>targets</code> 映射中检索对应的内层 <code>map</code>，这个内层 <code>map</code> 包含所有从该机场出发的航班及其次数。<code>for</code> 循环遍历这个内层 <code>map</code>，即遍历从当前结果集中的最新机场可以直接到达的所有机场及对应的航班次数。一定要加上引用即 <code>&amp; target</code>，因为后面有对 <code>target.second</code> 做减减操作，如果没有引用，单纯复制，这个结果就没记录下来，那最后的结果就不对了。加上引用之后，就必须在<code>string</code>前面加上<code>const</code>，因为map中的key是不可修改了，这就是语法规定了。</p><p>还需要注意本题的递归函数的返回值和参数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> ticketNum, vector&lt;string&gt;&amp; result)</span></span></span><br></pre></td></tr></table></figure></p><p><strong>注意函数返回值用的是bool！</strong>因为我们只需要找到一个行程，就是在树形结构中唯一的一条通向叶子节点的路线。所以找到了这个叶子节点了直接返回。</p><p>拆分地写好了各部分的代码之后，整合起来就是本题的完整代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;string, map&lt;string, <span class="type">int</span>&gt;&gt; targets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> ticketSum, vector&lt;string&gt;&amp; res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (ticketSum + <span class="number">1</span> == res.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="comment">// 以res中最新机场为出发点，遍历targets寻找可能的目的地</span></span><br><span class="line">        <span class="keyword">for</span> (pair&lt;<span class="type">const</span> string, <span class="type">int</span>&gt;&amp; target: targets[res[res.<span class="built_in">size</span>() - <span class="number">1</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// target.second &gt; 0说明目的地可用</span></span><br><span class="line">            <span class="keyword">if</span> (target.second &gt; <span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 处理节点</span></span><br><span class="line">                res.<span class="built_in">push_back</span>(target.first);</span><br><span class="line">                target.second -- ;</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">backtracking</span>(ticketSum, res)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">                target.second ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findItinerary</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化res</span></span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(<span class="string">&quot;JFK&quot;</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化targets</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> vec: tickets)</span><br><span class="line">            targets[vec[<span class="number">0</span>]][vec[<span class="number">1</span>]] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用递归函数并返回结果</span></span><br><span class="line">        <span class="built_in">backtracking</span>(tickets.<span class="built_in">size</span>(), res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用<code>auto</code>来简化上述代码，避免需要手写复杂的变量类型：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 提取输入数据中的信息：构造出发机场和到达机场间的映射，到达机场按照字典序排序并记录到达机场出现的次数</span></span><br><span class="line">    unordered_map&lt;string, map&lt;string, <span class="type">int</span>&gt;&gt; targets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> ticketSum, vector&lt;string&gt;&amp; res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (ticketSum + <span class="number">1</span> == res.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; target: targets[res[res.<span class="built_in">size</span>() - <span class="number">1</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.second &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                target.second -- ;</span><br><span class="line">                res.<span class="built_in">push_back</span>(target.first);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">backtracking</span>(ticketSum, res)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                target.second ++ ;</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findItinerary</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化res</span></span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化targets</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ticket: tickets) targets[ticket[<span class="number">0</span>]][ticket[<span class="number">1</span>]] ++ ;</span><br><span class="line">        <span class="built_in">backtracking</span>(tickets.<span class="built_in">size</span>(), res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="51-N皇后-1"><a href="#51-N皇后-1" class="headerlink" title="51. N皇后"></a>51. N皇后</h3><p>本题是回溯中较难的题目。题意：给一个n*n的棋盘，在其中放n个皇后，要求同一行、同一列、同意斜线上不能有两个皇后，将放置皇后的结果返回。难点：之前讲的组合问题、分割问题、子集问题和排列问题，都是一个一维的集合按照条件输出若个子集，本题则是一个二维的集合（数组）。</p><p>首先想如何暴力枚举，以4*4的棋盘为例，需要4个for循环，每一行每个位置尝试放皇后，根据规则判断能否放皇后。回溯算法的本质和暴力枚举没有区别，但回溯算法用递归的方式控制嵌套for循环的层数。</p><p>本题的树形结构如下所示，以3*3的棋盘为例：<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210130182532303.jpg" alt="51.N皇后" style="zoom: 50%;" /></p><p><strong>第n层递归对应着尝试在第n行中放置皇后</strong>。3*3的N皇后问题是无解的，画其只是为了展现其树形结构。树的深度为棋盘的行数，树的宽度为棋盘的列数。接下来写本题的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个棋盘是一个二维数组，放置若干棋盘，因此需要三维数组</span></span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; res; <span class="comment">// 三维数组收集所有可能的摆放结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// chessboard为棋盘，n为棋盘的大小, row为行，第n层递归负责处理第n行，用row来记录当前处理到了第几行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; chessboard, <span class="type">int</span> n, <span class="type">int</span> row)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件: 叶子节点收获结果</span></span><br><span class="line">    <span class="keyword">if</span> (row == n) </span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(chessboard); <span class="comment">// 单层递归逻辑中会对合法性进行判断，保证放入res中的chessboard都是合法的</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 合法性判断</span></span><br><span class="line">        <span class="comment">// 判断在第row行，第i个位置放皇后是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isValid</span>(row, i, chessboard, n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 放皇后</span></span><br><span class="line">            chessboard[row][i] = <span class="string">&#x27;Q&#x27;</span>; </span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(chessboard, n, row + <span class="number">1</span>); <span class="comment">// 下一层递归, row-&gt;row + 1</span></span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            chessboard[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：回溯法解决二维数组问题，第n层递归处理第n行，每层递归中遍历每一行中的每个元素。</p><p>在理解了本题的主题思路后，独立写出代码依然有难度，因为本题返回的变量类型是<code>vector&lt;vector&lt;string&gt;</code>，chessboard的变量类型应该为<code>vector&lt;string&gt;</code>，对其进行初始化有一定难度。另外，<code>isValid</code>函数的实现我第一次写也有一定的困难，直接看文字版讲解。</p><p>我独立写出的本题的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 结果集</span></span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(vector&lt;string&gt;&amp; chessboard, <span class="type">int</span> n, <span class="type">int</span> row, <span class="type">int</span> col)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 同一列中不能有两个皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][col] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主对角线不能有两个皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i -- , j -- )</span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 副对角线不能有两个皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i -- , j ++ )</span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入棋盘，棋盘大小，行数（即递归层数）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;string&gt;&amp; chessboard, <span class="type">int</span> n, <span class="type">int</span> row)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (row == n) </span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(chessboard);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 合法性判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(chessboard, n, row, i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 放皇后</span></span><br><span class="line">                chessboard[row][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                <span class="built_in">backtracking</span>(chessboard, n, row + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                chessboard[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">chessboard</span><span class="params">(n, string(n, <span class="string">&#x27;.&#x27;</span>))</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(chessboard, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>需要特别注意的是，在放皇后时，每次只在一行中的某个位置放一个皇后，且放完后会回溯，因此同一行中不会出现两个皇后，因此不需要在<code>isValid</code>函数中对同一行中出现两个皇后的情况进行判断。另外，放皇后的顺序是从行数小放到行数大，从列数小放到列数大。在不同行中，行数小的位置会被优先尝试放置皇后。在同一行的不同列中，列数小的位置会被优先尝试放置皇后。因此，<code>isValid</code>函数中对同一列判断，只需要判断从0-row列；对主对角线判断，只需要判断i从row-1到0，j从col-1到0；对副对角线判断，只需要判断i从row - 1到0，j从col + 1到n（由于优先放小的行，所以<code>i &lt; row, j &gt; col</code>的位置可能已经放置了皇后）。</p><h3 id="37-解数独"><a href="#37-解数独" class="headerlink" title="37. 解数独"></a>37. 解数独</h3><p>给一个9<em>9的棋盘，用1-9填满这个棋盘，规则为：同一行中不能有重复的数字，同一列中不能有重复的数字，九宫格中不能有重复的数字。本题求出一个填满的方案即可。本题是回溯章节的难题，和上一题N皇后类似。但用N皇后的思路做本题做不出来。<em>*本题比N皇后多一个维度</em></em>。N皇后用for循环遍历行，递归遍历列。本题不仅行要放满数字，列也要放满数字，整个棋盘都要放满数字。</p><p><strong>本题解法被称为二维递归</strong>，即两个for循环，下面是一个递归函数。一个for循环来遍历行，一个for循环来遍历列，这样才能确定一个空格。递归用来确定空格中应该放的数字。本题的树形结构如下所示：<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2020111720451790-20230310131816104.png" alt="37.解数独"></p><p>现在开始写本题的代码，本题的代码其实并不复杂。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定递归函数的返回值和参数</span></span><br><span class="line"><span class="comment">// 返回值为bool类型，原因是本题求数独的一个解即可，一旦棋盘被填满，立即返回</span></span><br><span class="line"><span class="comment">// 若一题有多个结果，多个结果散落在树形结构里，需要将树形结构全都搜索一遍，然后将结果放入结果集中，因此返回值为void类型</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> <span class="comment">// board要引用，这样才会修改board</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 本题不需要写终止条件，棋盘被填满后会直接return true，若无法满足填充规则，则会return false</span></span><br><span class="line">    <span class="comment">// 两个for循环，一个遍历行，另一个遍历列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].<span class="built_in">size</span>(); j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            <span class="comment">// 棋盘中的点表示空格</span></span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> k = <span class="string">&#x27;1&#x27;</span>; k &lt;= <span class="string">&#x27;9&#x27;</span>; k ++ )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 检查在board的(i, j)处放置数字k是否合法</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">isValid</span>(i, j, k, board)) </span><br><span class="line">                    &#123;</span><br><span class="line">                        board[i][j] = k;</span><br><span class="line">             <span class="comment">// 进入下一层递归</span></span><br><span class="line">                        <span class="type">bool</span> res = <span class="built_in">backtracking</span>(board);</span><br><span class="line">                        <span class="comment">// 找到一个结果就立即停止搜索，返回</span></span><br><span class="line">                        <span class="keyword">if</span> (res == <span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// 回溯</span></span><br><span class="line">                        board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 在空格处将9个数字都尝试了，无法填入，则说明该棋盘没有结果，返回false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 若没有走到return false，则return true（若棋盘一直被填充直到被填满，则不会走if (board[i][j] == &#x27;.&#x27;)）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据上面的核心代码，我自己实现了<code>isValid</code>函数，写出了本题的完整代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span> k, vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 检查第i行能否放入k</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].<span class="built_in">size</span>(); j ++ )</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == k)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查第j列能否放入k</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == k)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查九宫格能否放入k</span></span><br><span class="line">        <span class="type">int</span> starti = i / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> startj = j / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> endi = starti + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> endj = startj + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = starti; i &lt;= endi; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = startj; j &lt;= endj; j ++ )</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == k)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].<span class="built_in">size</span>(); j ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 处理节点</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">char</span> k = <span class="string">&#x27;1&#x27;</span>; k &lt;= <span class="string">&#x27;9&#x27;</span>; k ++ )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">isValid</span>(i, j, k, board))</span><br><span class="line">                        &#123;</span><br><span class="line">                            board[i][j] = k;</span><br><span class="line">                            <span class="comment">// 递归</span></span><br><span class="line">                            <span class="type">bool</span> res = <span class="built_in">backtracking</span>(board);</span><br><span class="line">                            <span class="keyword">if</span> (res == <span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="comment">// 回溯</span></span><br><span class="line">                            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(board);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="332-重新安排行程-1"><a href="#332-重新安排行程-1" class="headerlink" title="332.重新安排行程"></a>332.重新安排行程</h3><ol><li>本题的解题思路其实不难，画出树形结构后，是一道经典的回溯问题。本题的难点在于选用怎样的数据结构来有效地存放和处理输入的数据。</li><li>因为本题是hard题，且由于使用了较为复杂的数据结构，因此我觉得在hard中都算是难题，显著比N皇后困难。因此，第一遍学习本题，了解本题的思路和核心代码即可，不要求能够将本题完整地写出来。</li><li><p>本题的实现部分对代码进行了细致的拆分讲解，大致可以分为以下几个要点：</p><ul><li>用怎样的数据结构存储输入数据中出发机场和到达机场间的映射关系，且要求同一个出发机场的到达机场按照字典序排列，同时记录到达机场的使用次数</li><li>如何对结果集和上面的数据结构进行初始化</li><li>根据树形结构写出终止条件和单层搜索逻辑，并确定递归函数的返回值和传入的参数。本题递归函数的返回值是罕见的bool类型，而非void类型</li></ul><p>明确上述三个问题，即可理解本题的思路和实现细节，进而顺畅地写出本题的代码。</p></li><li><p>在初始化targets时，范围遍历可以直接采用<code>auto</code>类型的变量，避免需要手写复杂的变量类型。但在单层递归逻辑中遍历<code>targets</code>时，不能直接采用<code>auto</code>，因为for循环中涉及到了对遍历的值的修改操作，因此一定要使用引用，可以使用<code>auto&amp;</code>。</p></li></ol><h3 id="51-N皇后-2"><a href="#51-N皇后-2" class="headerlink" title="51. N皇后"></a>51. N皇后</h3><ol><li><p>本题的新奇之处在于：之前用回溯法解决过组合、切割、子集、排列问题，处理的对象都是一维数组，N皇后问题处理的对象却是<strong>二维数组</strong>。</p></li><li><p>本题的原理实际上非常简单，理解本题的<strong>树形结构</strong>即可：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210130182532303.jpg" alt="51.N皇后" style="zoom:50%;" /></p></li><li><p>由上述树形结构可知，<strong>树的宽度是棋盘的列数，树的深度是棋盘的行数</strong>。据此，可以轻松地写出<code>backtracking</code>函数的终止条件和单层递归逻辑。</p></li><li><p>对棋盘合法性的判断其实是比较容易写错的。按照以下标准验证棋盘是否合法，两皇后：</p><ul><li><p>不能同行</p></li><li><p>不能同列</p></li><li><p>不能同斜线 （主对角线和副对角线）</p></li></ul><p>在<code>isValid</code>函数中，不能同行的判断不需要写。因为在单层搜索的过程中，每一层递归，只会选for循环（也就是同一行）里的一个元素，且后序还会回溯释放掉这个元素。因此只需要写不能同列、不能同主对角线、不能同副对角线的判断。这三个判断的书写依据如<strong>下图</strong>所示。</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/n_queen_revised_2.png?raw=true" alt="n_queen_revised_2.png"></p><p>当我们尝试在<code>(row, col)</code>处放置皇后时，只有绿色部分可能在之前被放置过皇后。原因是：递归到当前层，只有行数&lt;row的格点上可能被放置过皇后。根据三条黄线，可以方便地写出三个判断。</p></li><li><p>本题的时间复杂度O(n!)，空间复杂度O(n)。</p><ul><li>时间复杂度：由于回溯法的本质依然是暴搜，因此，在棋盘的第一行，有n种放置皇后的方式；第二行最多有n - 1种，依次类推，得到时间复杂度为O(n!)。</li><li>空间复杂度即为树的深度，即为棋盘的行数，故空间复杂度为O(n)。</li></ul></li></ol><h3 id="37-解数独-1"><a href="#37-解数独-1" class="headerlink" title="37. 解数独"></a>37. 解数独</h3><ol><li>和之前的递归题目不同，本题的递归是<strong>二维递归</strong>。一个for循环遍历棋盘的行，一个for循环遍历棋盘的列，一行一列确定下来之后，递归遍历这个位置放9个数字的可能性。</li><li>本题递归函数的函数返回值类型为<code>bool</code>类型。原因是本题只需要找到一个解，就立即返回。如果需要搜索整棵二叉树，找到所有的解，然后将结果记录在结果集中，那么递归函数的返回值类型为<code>void</code>。</li><li>本题不需要写终止条件。因为在递归逻辑中，如果找到了满足条件的解，就会直接<code>return true</code>。如果某个空格中无论填入哪个数字都无法满足条件，就会直接<code>return false</code>。</li><li>注意<code>return true</code>和<code>return false</code>的位置。前者放在递归函数末尾，意思是若棋盘一直被填充直到被填满，则不会走<code>if (board[i][j] == &#39;.&#39;)</code>，就<code>return true</code>。后者放在<code>for (char k = &#39;1&#39;; k &lt;= &#39;9&#39;; k ++ )</code>的结束之处，意思是在空格处将9个数字都尝试了，无法填入，则说明该棋盘没有结果，<code>return false</code>。</li><li>时间复杂度：O(9^m) , m是’.’的数目。空间复杂度：$O(n^2)$，原因是递归的深度是n^2（原因是第一层<code>for</code>循环代表树的宽度，后面两层<code>for</code>循环代表了树的深度。由于本题中数独的长宽固定为9，因此本题中的<code>n = 9</code>）。</li><li>回溯的题目到此结束，总体来说比较简单，有统一的模板，但每个题目又有一些需要注意的小细节。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0332.%E9%87%8D%E6%96%B0%E5%AE%89%E</summary>
      
    
    
    
    <category term="算法（回溯算法）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="hard题" scheme="http://example.com/tags/hard%E9%A2%98/"/>
    
    <category term="二维递归" scheme="http://example.com/tags/%E4%BA%8C%E7%BB%B4%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Day 29 Leetcode 491, 46, 47</title>
    <link href="http://example.com/2024/05/26/Day-29-Leetcode-491-46-47/"/>
    <id>http://example.com/2024/05/26/Day-29-Leetcode-491-46-47/</id>
    <published>2024-05-26T06:24:04.000Z</published>
    <updated>2024-05-27T19:31:19.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html">491.递增子序列</a><br><a href="https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html">46.全排列</a><br><a href="https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html">47.全排列 II</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491.递增子序列"></a>491.递增子序列</h3><h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46.全排列"></a>46.全排列</h3><h3 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47.全排列 II"></a>47.全排列 II</h3><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="491-递增子序列-1"><a href="#491-递增子序列-1" class="headerlink" title="491.递增子序列"></a>491.递增子序列</h3><p>本题的关键：递增、至少两个元素、去重。但本题存在一个很大的问题，就是去重的时候不能对原数组进行排序，否则会打乱原数组的顺序，以以下测试样例为例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,4,3,2,1]</span><br><span class="line">Output: [[4,4]]</span><br></pre></td></tr></table></figure></p><p>一旦顺序被打乱，实际输出和理论输出就会不同，会多出很多递增的子序列。</p><p>本题和90.子集II非常像，但又很不一样，很容易掉坑里。直接看卡尔的讲解吧。</p><h3 id="46-全排列-1"><a href="#46-全排列-1" class="headerlink" title="46.全排列"></a>46.全排列</h3><p>本题是排列问题，不需要<code>startIndex</code>，但我写不出代码，直接看卡尔的讲解。经过卡尔的提示用<code>used</code>数组避免重复取元素后，我独立写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="47-全排列-II-1"><a href="#47-全排列-II-1" class="headerlink" title="47.全排列 II"></a>47.全排列 II</h3><p>本题中的数组中会有重复元素，因此本题需要去重逻辑。本题相当于40.组合总和II去重逻辑和46.全排列的结合。我先尝试用<code>set</code>去重。我独立写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; uset;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (uset.<span class="built_in">find</span>(nums[i]) != uset.<span class="built_in">end</span>() || used[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            uset.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再接着尝试写出<code>used</code>数组去重的代码。我独立写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] == <span class="number">1</span> || i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>由于本题中<code>nums[i]</code>的数据范围在-10-10之间，所以可以不用<code>set</code>去重，而是用数组去重（将数据范围-10-10映射到数组下标范围0-20），这样效率更高，代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组去重</span></span><br><span class="line">        <span class="type">int</span> hash[<span class="number">21</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] == <span class="number">1</span> || hash[nums[i] + <span class="number">10</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            hash[nums[i] + <span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="491-递增子序列-2"><a href="#491-递增子序列-2" class="headerlink" title="491.递增子序列"></a>491.递增子序列</h3><p>列出递增子序列，子序列元素数量大于等于2。有以下测试样例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4, 7, 6, 7]</span><br><span class="line">Output: [4, 7, 7], [4, 7], [4, 6], [4, 6, 7], [6, 7], [7, 7]</span><br></pre></td></tr></table></figure></p><p>要求不能有重复的子序列，因此需要去重。本题和90.子集II，只不过要求元素有顺序，且元素个数大于等于2。<strong>实际上，本题的细节和90有很大区别</strong>。<strong>本题的去重思路不可以沿用先排序再去重的做法，因为会改变原数组中元素的顺序，导致递增子序列的改变</strong>。例如对上述测试样例排序后，递增子序列会包括<code>[4, 6, 7, 7]</code>，实际上原本的输出不包含<code>[4, 6, 7, 7]</code>。</p><p>所有的回溯算法都是深搜，所有的深搜都可以说是递归。画本题的树形结构：<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124200229824.png" alt="491. 递增子序列1"></p><p>去重为树层去重。现在开始写代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; path; <span class="comment">// 单个结果</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res; <span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 子集类问题可以不写终止条件，具体原因参见78/90</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) res.<span class="built_in">push_back</span>(path); <span class="comment">// 子集中元素数量大于等于2</span></span><br><span class="line">    </span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; uset; <span class="comment">// set去重</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 剪枝条件1：所取元素小于子序列最后一个元素，此时要求子序列非空，否则path.back()会报错</span></span><br><span class="line">        <span class="comment">// 剪枝条件2：用set做树层去重</span></span><br><span class="line">        <span class="keyword">if</span> (!path.<span class="built_in">empty</span>() &amp;&amp; nums[i] &lt; path.<span class="built_in">back</span>() || uset.<span class="built_in">find</span>(nums[i]) != uset.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        <span class="comment">// 记录每一层取的数(for循环中除去递归部分外都是横向遍历的)，每一层不能重复取相同的数</span></span><br><span class="line">        uset.<span class="built_in">insert</span>(nums[i]); </span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么没有对uset做回溯操作？<br>原因：上述代码中，每进入一层递归，都会重新定义一个<code>uset</code>。因此<code>uset</code>就是确保同一层中没有取到相同的元素，在进入下一层递归时，<code>uset</code>会被刷新。因此<code>uset</code>并不会对树枝去重，只会对树层去重。而<code>used</code>数组需要做回溯，因为<code>used</code>数组记录的是元素是否在<code>path</code>中被使用过，因此<code>path</code>中加减元素都需要对<code>used</code>数组进行修改。</p><p>本题的去重方式也可以应用于40.组合总和II和90.子集II。本题也可以用数组取代<code>set</code>进行去重，用数组的效率会更高些。</p><p>本题的完整代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 收集结果</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; uset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 剪枝条件1：所取元素小于子序列最后一个元素，此时要求子序列非空，否则path.back()会报错</span></span><br><span class="line">            <span class="comment">// 剪枝条件2：用set做树层去重</span></span><br><span class="line">            <span class="comment">// cpp中&amp;&amp;的优先级高于||，因此是先与后或，不需要给剪枝条件1加括号</span></span><br><span class="line">            <span class="keyword">if</span> (!path.<span class="built_in">empty</span>() &amp;&amp; nums[i] &lt; path.<span class="built_in">back</span>() || uset.<span class="built_in">find</span>(nums[i]) != uset.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            uset.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>由于本题<code>nums[i]</code>的数据范围很小，因此可以用数组做去重，运行效率也更高。只需要将<code>set</code>替换为普通数组，然后做一个偏移（数值-100-100映射到数组下标0-200上）即可。代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() &gt; <span class="number">1</span>) res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!path.<span class="built_in">empty</span>() &amp;&amp; nums[i] &lt; path.<span class="built_in">back</span>() || cnt[nums[i] + <span class="number">100</span>] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            cnt[nums[i] + <span class="number">100</span>] = <span class="number">1</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="46-全排列-2"><a href="#46-全排列-2" class="headerlink" title="46.全排列"></a>46.全排列</h3><p>题目中明确说了给定的集合中没有重复元素，因此不用去重。</p><p>排列相对于组合的区别：<code>[2, 1], [1, 2]</code>是同一个组合，但是两个排列。排列是强调元素顺序的，组合不强调元素顺序。接下来画本题的树形结构。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20211027181706.png" alt="46.全排列"></p><p>排列问题中也需要用到<code>used</code>数组，用于标记哪些元素被使用过，因为在排列问题中同一个元素不能重复使用。组合问题中是用<code>startIndex</code>来避免取同一个元素和避免产生相同组合的情况。树的深度由<code>nums</code>的长度来控制。</p><p><code>used</code>数组用来标记哪些元素被取过，取过的元素不能重复取，但所有没取过的元素都可以重复取，而不需要像组合问题那样用<code>startIndex</code>来控制只能取当前元素的下一个元素。具体的代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; path; <span class="comment">// 放单个结果</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res; <span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path); <span class="comment">// 收获结果</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑</span></span><br><span class="line">    <span class="comment">// 排列问题不需要startIndex，只要不重复取同一个元素即可</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i] == <span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">// 不重复取同一个元素</span></span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        used[i] = <span class="number">1</span>;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        used[i] = <span class="number">0</span>;</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="47-全排列-II-2"><a href="#47-全排列-II-2" class="headerlink" title="47.全排列 II"></a>47.全排列 II</h3><p>上一题给定的集合中没有重复元素，本题给定的集合中有重复元素。以<code>[1, 1, 2]</code>为例，如果依然用上一题的办法求解本题，结果集中会出现两个<code>[1, 1, 2]</code>，因此本题需要做去重。如果对去重的思路不够了解，可以看40.组合总和II。回溯的所有题目中，去重的逻辑都是相同的。本题等于排列+去重。<strong>但排列问题中的去重会有些与之前不同的地方</strong>。</p><p>画出本题的树形结构：<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124201331223.png" alt="47.全排列II1"></p><p>用<code>used</code>数组做树层去重前，记得对<code>nums</code>数组进行排序。本题中的<code>used</code>数组有两个作用：</p><ul><li>避免同一个元素被重复使用</li><li>做树层去重</li></ul><p>接下来写具体的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 树层去重</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 同一个元素不能被重复取，因此取过的数直接跳过</span></span><br><span class="line">        <span class="keyword">if</span> (used[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        used[i] = <span class="number">1</span>;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        used[i] = <span class="number">0</span>;</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>细节：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树层去重</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></p><p>可以通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树枝去重</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p>也可以通过。这意味着树层去重和树枝去重都可以解决本题。但树层去重的效率更高，树层去重会剪掉更多分支，而树枝去重要一直到最后一个树枝才会列出所有的结果。因此还是推荐树层去重的写法。以<code>[1, 1, 1]</code>为例，画出<strong>树层去重和树枝去重</strong>的树形结构：<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124201406192.png" alt="47.全排列II2"></p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124201431571.png" alt="47.全排列II3"></p><p>很清晰的看到，树层上对前一位去重非常彻底，效率很高，树枝上对前一位去重虽然最后可以得到答案，但是做了很多无用搜索。</p><p>时间复杂度和空间复杂度分析：</p><ul><li>时间复杂度: 最差情况所有元素都是唯一的，时间复杂度为$O(n!\times n)$。 对于n个元素一共有n!中排列方案。而对于每一个答案，我们需要$O(n)$去复制最终放到<code>res</code>数组。</li><li>空间复杂度: $O(n)$。空间复杂度即为回溯树的深度，其取决于<code>nums</code>数组中有多少个元素。</li></ul><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="491-递增子序列-3"><a href="#491-递增子序列-3" class="headerlink" title="491.递增子序列"></a>491.递增子序列</h3><p>关键点：<code>set</code>去重-&gt;剪枝-&gt;数组去重取代<code>set</code>去重</p><ol><li><p>本题和90.子集II乍一看非常相似，但细节上有很大不同，解决本题时不能有惯性思维。</p></li><li><p>之前<strong>去重</strong>的方法都是利用<code>used</code>数组，这意味着需要对<code>nums</code>数组进行排序。在本题中，如果对<code>nums</code>数组进行排序，就会打乱原数组中元素的顺序，导致递增子序列发生改变。因此，本题不能用<code>used</code>数组去重，而需要用<code>set</code>去重。因为用<code>set</code>去重不需要对原数组排序。</p></li><li><p>本题有两个<strong>剪枝</strong>条件：</p><ul><li><p>剪枝条件1：若所取元素小于子序列最后一个元素，则需要剪枝。此时要求子序列非空，否则<code>path.back()</code>会报错。剪枝条件1的原因是本题要求子序列是递增的。</p></li><li><p>剪枝条件2：用set做树层去重</p></li></ul><p>两个剪枝条件用||相连。</p></li><li><p>为什么不需要对<code>set</code>进行回溯？</p><p>每进入一层递归，都会重新定义一个<code>set</code>。因此<code>set</code>就是确保同一层中没有取到相同的元素。在进入下一层递归时，<code>set</code>会被刷新（重新定义）。因此<code>set</code>并不会对树枝去重，只会对树层去重。而<code>used</code>数组需要做回溯，因为<code>used</code>数组记录的是元素是否在<code>path</code>中被使用过，因此<code>path</code>中加减元素都需要对<code>used</code>数组进行相应的修改。</p></li><li><p>本题的去重方法也可以应用于40.组合总和II和90.子集II。</p></li><li><p>由于本题<code>nums[i]</code>的数据范围很小，因此可以用数组做去重，运行效率也更高。只需要将<code>set</code>替换为普通数组，然后做一个偏移（数值-100-100映射到数组下标0-200上）即可。</p></li><li><p>本题的时间和空间复杂度分别为$O(n\times2^n)$和$O(n)$。同90和78。</p></li></ol><h3 id="46-全排列-3"><a href="#46-全排列-3" class="headerlink" title="46.全排列"></a>46.全排列</h3><ol><li>排列问题和组合问题的两大区别：<ul><li>每层都是从0开始搜索而不是<code>startIndex</code></li><li>需要used数组记录<code>path</code>里都放了哪些元素了</li></ul></li><li>不需要<code>startIndex</code>的原因：<code>[1, 2]</code>和<code>[2, 1]</code>是同一个组合，但却是不同的排列，因此排列问题不能像组合问题那样从当前元素的下一个元素开始取，而是要取<code>nums</code>数组中所有当前没有取过的元素。</li><li>需要<code>used</code>数组的原因：<code>used</code>数组记录了此时<code>path</code>里都有哪些元素使用了，一个排列里一个元素只能使用一次。</li><li>终止条件为<code>path.size() == nums.size()</code>，<code>nums</code>数组的大小限制了树的深度。</li><li>本题的时间复杂度为$O(n!)$，空间复杂度为$O(n)$。时间复杂度的原因是有$n$个元素的<code>nums</code>数组共有$n!$种排列。空间复杂度的原因是递归的深度（即树的深度）为$n$。</li></ol><h3 id="47-全排列-II-3"><a href="#47-全排列-II-3" class="headerlink" title="47.全排列 II"></a>47.全排列 II</h3><ol><li>本题相当于40.组合总和II（树层去重）和46.全排列的结合。</li><li>本题的去重有三种写法：<code>set</code>去重、数组去重、<code>used</code>数组去重。三种写法我都在初次尝试中给出了。</li><li>用<code>used</code>数组去重前，一定要记得对<code>nums</code>数组进行排序。另外两种去重写法则不需要对<code>nums</code>数组进行排序。</li><li>由于本题是在叶子节点处收集结果，因此需要终止条件。</li><li>本题的时间复杂度为$O(n!\times n)$，空间复杂度为$O(n)$。具体原因参见实现部分。</li><li>本题用树层去重和树枝去重都可以，具体原因参见实现部分。<strong>但树层去重的效率远高于树枝去重</strong>，因此采用一贯以来的<code>used</code>数组树层去重写法即可，不要纠结树枝去重的原理和合理性。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E</summary>
      
    
    
    
    <category term="算法（回溯算法）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="子集问题" scheme="http://example.com/tags/%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/"/>
    
    <category term="树层去重" scheme="http://example.com/tags/%E6%A0%91%E5%B1%82%E5%8E%BB%E9%87%8D/"/>
    
    <category term="排列问题" scheme="http://example.com/tags/%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode problems prepared for a TikTok interview</title>
    <link href="http://example.com/2024/05/10/LeetCode-problems-prepared-for-a-TikTok-interview/"/>
    <id>http://example.com/2024/05/10/LeetCode-problems-prepared-for-a-TikTok-interview/</id>
    <published>2024-05-10T00:49:53.000Z</published>
    <updated>2024-05-20T04:25:50.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><p>本题是整数二分的加强版。本题的要点为：</p><ol><li><p>写两个函数，分别寻找target的左边界和右边界。本题的区间定义为左闭右闭。</p></li><li><p>寻找左边界，说明target在[left, mid]之间，因此在[left, mid]中更新左边界。寻找右边界，说明target在[mid, right]之间，因此在[mid, right]中更新右边界。</p></li><li><p>寻找左边界，就要在<code>nums[mid] == target</code>的时候更新right，然后将right赋给左边界。寻找右边界，就要在<code>nums[mid] == target</code>的时候更新left，然后将left赋给右边界。</p></li><li><p>实际上的左右边界是<code>mid</code>，而非<code>right</code>和<code>left</code>，因此在主函数中需要将左边界+1，恢复为<code>mid</code>；将右边界-1，也恢复为<code>mid</code>。也可以直接让左右边界是<code>mid</code>，这样就不需要加1减1，参见我的第二种写法。</p></li><li><p>target的三种情况：</p><ul><li>target在数组范围的右边或者左边</li><li>target 在数组范围中，且数组中存在target</li><li>target 在数组范围中，且数组中不存在target<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左闭右闭写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 寻找左边界</span></span><br><span class="line">    <span class="comment">// 说明target在[left, mid]之间</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLeftBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="number">-2</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 在[left, mid]中更新左边界</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">                leftBorder = right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找右边界</span></span><br><span class="line">    <span class="comment">// 说明target在[mid, right]之间</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRightBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="number">-2</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 在[mid, right]中更新右边界</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">                rightBorder = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightBorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="built_in">findLeftBorder</span>(nums, target);</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="built_in">findRightBorder</span>(nums, target);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// target在数组范围的右边或者左边</span></span><br><span class="line">        <span class="keyword">if</span> (leftBorder == <span class="number">-2</span> || rightBorder == <span class="number">-2</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="comment">// target 在数组范围中，且数组中存在target</span></span><br><span class="line">        <span class="keyword">if</span> (rightBorder - leftBorder &gt; <span class="number">1</span>) <span class="keyword">return</span> &#123;leftBorder + <span class="number">1</span>, rightBorder - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// target 在数组范围中，且数组中不存在target</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>我写出了以下的变式代码。在这个代码里，通过<code>mid</code>来更新左右边界。这样若找到了左右边界，则直接返回左右边界即可，不需要做加1减1的操作。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左闭右闭写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 寻找左边界</span></span><br><span class="line">    <span class="comment">// 说明target在[left, mid]之间</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLeftBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="number">-2</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 在[left, mid]中更新左边界</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">                leftBorder = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找右边界</span></span><br><span class="line">    <span class="comment">// 说明target在[mid, right]之间</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRightBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="number">-2</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 在[mid, right]中更新右边界</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">                rightBorder = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightBorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="built_in">findLeftBorder</span>(nums, target);</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="built_in">findRightBorder</span>(nums, target);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// target在数组范围的右边或者左边</span></span><br><span class="line">        <span class="keyword">if</span> (leftBorder == <span class="number">-2</span> || rightBorder == <span class="number">-2</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="comment">// target 在数组范围中，且数组中存在target</span></span><br><span class="line">        <span class="keyword">if</span> (rightBorder - leftBorder &gt;= <span class="number">0</span>) <span class="keyword">return</span> &#123;leftBorder, rightBorder&#125;;</span><br><span class="line">        <span class="comment">// target 在数组范围中，且数组中不存在target</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="278-第一个坏版本"><a href="#278-第一个坏版本" class="headerlink" title="278.第一个坏版本"></a>278.第一个坏版本</h2><p>我独立写出了以下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isBadVersion</span>(mid) == <span class="number">0</span>) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在本题中，尽管是左闭右闭的写法，但循环的条件应该为<code>left &lt; right</code>，因为当<code>left = right</code>时，实际上就锁定了第一个坏版本，循环就应当结束。这种题目当出现超时，要着重检查是不是循环的条件不对。</p><p>和本题同样的题目：输入一个数组，比如<code>[0, 0, 0, 1, 1, 1, 1]</code>，找到第一个为1的数的下标，代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">firstBadVersion</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = arr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == <span class="number">1</span>) right = mid;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">firstBadVersion</span>(arr) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><p>本题直接采用（快慢）双指针解法即可。一遍过，但需要注意不要在<code>for</code>循环中重复定义指针<code>j</code>。本题的暴力做法甚至比双指针做法更复杂，也更容易写错。相向双指针做法暂时不用管。</p><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h2><p>暴力解法非常简单，也能通过测试。我先在纸上模拟了双指针的过程，然后独立写出了如下的双指针代码，时间和空间复杂度都是$O(n)$。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双指针经典题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = size; i &lt;= j; )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] * nums[i] &lt;= nums[j] * nums[j]) </span><br><span class="line">            &#123;</span><br><span class="line">                res[size] = nums[j] * nums[j];</span><br><span class="line">                j -- ;</span><br><span class="line">                size -- ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                res[size] = nums[i] * nums[i];</span><br><span class="line">                i ++ ;</span><br><span class="line">                size -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>不要追求把代码写得过度简洁，而导致可能的问题，宁可把代码写长一些，也要让代码清楚地表达算法思想。</p><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2><p>一时想不起来具体怎么写了，只记得遍历整个数组的同时，有数划入窗口，该数被累加到和中，有数划出窗口，则该数被从和中减去。看了我自己的笔记后，我独立写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = INT_MAX;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>; <span class="comment">// 滑动窗口的和</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">// 起始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// j为终止位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            s += nums[j]; <span class="comment">// 终止位置划入</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (s &gt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> sub = j - i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (sub &lt; len) len = sub;</span><br><span class="line">                s -= nums[i]; <span class="comment">// 起始位置从和中滑出</span></span><br><span class="line">                i ++ ; <span class="comment">// 起始位置从滑动窗口中滑出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len == INT_MAX) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>需要注意：</p><ul><li><p>i为起始位置，j为终止位置</p></li><li><p>循环中，终止位置先划入。若和大于等于目标值，则先更新最小长度，再将起始位置划出。</p></li><li><p>起始位置的值需要先从和中滑出，起始位置再从滑动窗口中滑出。顺序不可颠倒。</p></li><li><p>for循环中是while循环，而非if判断</p></li><li><p>数组中的每个元素至多被滑入一次再滑出一次，因此时间复杂度是$O(2n)$，即$O(n)$。</p></li></ul><h2 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h2><p>我记得本题是个模拟题。但实在记不得怎么做了，看以前的笔记。复习完后，我写出了本题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>, cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> loop = n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; n - offset; j ++ )</span><br><span class="line">                res[startx][j] = cnt ++ ;</span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; n - offset; i ++ )</span><br><span class="line">                res[i][j] = cnt ++ ;</span><br><span class="line">            <span class="keyword">for</span> (j = n - offset; j &gt; starty; j -- )</span><br><span class="line">                res[i][j] = cnt ++ ;</span><br><span class="line">            <span class="keyword">for</span> (i = n - offset; i &gt; startx; i -- )</span><br><span class="line">                res[i][j] = cnt ++ ;</span><br><span class="line">            offset ++ ;</span><br><span class="line">            startx ++ ;</span><br><span class="line">            starty ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) res[n / <span class="number">2</span>][n / <span class="number">2</span>] = cnt;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>需要注意：</p><ol><li><p><strong>画图理解（记住本图，就可以写出这道题的代码）</strong>：</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-01-26_06-26-17.png?raw=true" alt="Snipaste_2024-01-26_06-26-17.png"></p></li><li><p>顺时针转圈，转多少圈可以填满整个二维数组？从(0, 0)的位置开始转圈，终止的位置为中心(n/2, n/2)。每转一圈横纵坐标均加1，因此一共转了n/2圈。</p></li><li><p>切记遵守循环不变量原则，所有边都是左闭右开的。所以是<code>j &lt; n - offset</code>，且<code>offset</code>的初始值为1，因为右边界是开的。</p></li><li><p><code>startx</code>, <code>starty</code>, <code>offset</code>每转一圈都要加1。</p></li><li><p>定义二维数组的方式是将一位数组复制行数遍。</p></li><li><p>若n为奇数，则最后记得向二维数组的中心填入最后一个数。</p></li></ol><h2 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189.旋转数组"></a>189.旋转数组</h2><p>首先我写出了可以正常运行但会超时的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + <span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>不超时的代码我写不出来，看卡尔的讲解。</p><p>本题的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k = k % nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">begin</span>() + k);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题其实原理不难，类似于旋转字符串的题目，总结如下：</p><ol><li>首先反转整个数组，这样在不考虑顺序的情况下，就将两段数字放在了正确的位置上。</li><li>然后反转前k个数，将前k个数的顺序调整正确。</li><li>最后反转剩下的数，将剩下的数的顺序调整正确。</li><li>需要注意的是，若<code>k &gt; nums.size()</code>，则右移<code>k % nums.size()</code>即可，因为右移<code>nums.size()</code>次相当于没有改变原数组。</li><li>不要对nums.end()进行加减操作，nums.end()不指向一个特定的元素（不要下意识地以为其指向最后一个元素后面的紧邻的位置），对其进行加减操作会导致未定义的随机行为。对nums.begin()进行操作就没有这个问题。因此反转的第三步不要写成<code>reverse(nums.end() - k - 1, nums.end())</code>。</li></ol><h2 id="153-寻找旋转数组中的最小值"><a href="#153-寻找旋转数组中的最小值" class="headerlink" title="153.寻找旋转数组中的最小值"></a>153.寻找旋转数组中的最小值</h2><p>应该是先要将其恢复为有序的数组，然后返回有序数组的第一个元素即可。本题应该结合了二分法和旋转数组。我直接看题解吧。</p><p>虽然但是，本题用暴力做法也可以通过：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上述算法的时间复杂度是O(nlogn)。用二分法应该可以将时间复杂度优化为O(logn)。</p><p>本题的二分做法如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左闭右闭写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环的终止条件：left = right。此时必然已经找到了数组中的最小值</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 中间数字大于右边数字，比如[3,4,5,1,2]，则左侧是有序上升的，最小值在右侧</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 中间数字小于右边数字，比如[6,7,1,2,3,4,5]，则右侧是有序上升的，最小值在左侧</span></span><br><span class="line">            <span class="comment">// 以[6, 7, 1, 2, 3, 4]为例，mid = 2, right = 2，即恰好在[left, mid]中取到最小值1</span></span><br><span class="line">            <span class="comment">// 若right = mid - 1，则[left, right]会错过最小值</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[right]) right = mid;</span><br><span class="line">            <span class="comment">// 中间数字等于右边数字，则说明数组中只有一个元素，返回该元素即可</span></span><br><span class="line">            <span class="comment">// 也可以直接写作else right = mid;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题延续了二分法的思路和代码形式，但细节和二分法略有不同，需要注意复习。</p><p>本题的思路：</p><ul><li><p>本题是左闭右闭写法，区间为<code>[left, right]</code></p></li><li><p>数组中的最小值要么在数组的右侧，要么在数组的左侧</p></li><li>数组的最小值在数组右侧的情况：[3, 4, 5, 1, 2]。数组的最小值在数组左侧的情况：[6, 7, 1, 2, 3, 4, 5]</li><li>若数组的最小值在数组的右侧，由于<code>nums[mid] &gt; nums[right]</code>，因此<code>nums[mid]</code>必然不可能是数组的最小值，因此<code>left = mid + 1</code></li><li>对于剩下的情况，即<code>nums[mid] &lt;= nums[right]</code>，数组的最小值在数组的左侧。由于可能存在<code>nums[mid] = nums[right]</code>的情况，因此<code>nums[mid]</code>可能是最小值，因此有<code>right = mid</code></li><li>记住始终是<code>nums[mid]</code>和<code>nums[right]</code>比较。始终是中间和右边比！</li></ul><p><strong>本题的另一种思路（更推荐这种，因为这种思路可以推广到33）</strong>：</p><ul><li><code>nums[mid]</code>和<code>nums[right]</code>的关系可以分为大于，等于，小于三种情况</li><li><code>nums[mid] == nums[right]</code>时，中间的数字等于最右边的数字，说明数组中只有一个元素，此时返回<code>nums[left]</code>即可，这种情况不需要考虑</li><li><code>nums[mid] &gt; nums[right]</code>时，例如[3, 4, 5, 1, 2]。数组的最小值在数组的右侧，<code>nums[mid]</code>必定不为最小值，因此有<code>left = mid + 1</code></li><li><code>nums[mid] &lt; nums[right]</code>时，数组的最小值在数组的左侧。例如[6, 7, 1, 2, 3, 4, 5]，也有可能是[6, 7, 1, 2, 3, 4]，此时<code>mid = 2, right = 2</code>，即恰好在[left, mid]中取到最小值1。若<code>right = mid - 1</code>，则[left, right]会错过最小值，因此<code>right = mid</code></li></ul><h2 id="154-寻找旋转数组中的最小值II"><a href="#154-寻找旋转数组中的最小值II" class="headerlink" title="154.寻找旋转数组中的最小值II"></a>154.寻找旋转数组中的最小值II</h2><p>本题的思路：</p><ul><li>延续上题的思路，<code>nums[mid]</code>和<code>nums[right]</code>的关系可以分为大于，等于，小于三种情况</li><li><code>nums[mid] &gt; nums[right]</code>和<code>nums[mid] &lt; nums[right]</code>的情况同上</li><li>由于数组中可以有重复的元素，因此需要考虑<code>nums[mid] == mums[right]</code>的情况，例如[2,3,1,1,1]或者[4,1,2,3,3,3,3]。此时，重复值<code>nums[right]</code>可能是最小值，也可能最小值在重复值的左侧，因此right左移一位：<code>right -= 1</code></li></ul><p>本题的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// [5, 6, 7, 1, 2]</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// [7, 1, 2, 3, 4]</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[right]) right = mid;</span><br><span class="line">            <span class="keyword">else</span> right -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33.搜索旋转排序数组"></a>33.搜索旋转排序数组</h2><p>我对本题的初步思路：先找到最小的那个点，然后分别对两段单调递增的区间用二分法进行搜索。根据这个原理，我独立写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 二分查找有序数组中的数</span></span><br><span class="line">    <span class="comment">// 左闭右闭写法</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchTarget</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先找到最小的数字, 下标为left</span></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// nums[mid] nums[right], [4, 5, 6, 7, 0, 1, 2]</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> leftIndex = <span class="built_in">searchTarget</span>(nums, <span class="number">0</span>, left - <span class="number">1</span>, target);</span><br><span class="line">        <span class="type">int</span> rightIndex = <span class="built_in">searchTarget</span>(nums, left, nums.<span class="built_in">size</span>() - <span class="number">1</span>, target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftIndex == <span class="number">-1</span> &amp;&amp; rightIndex == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (leftIndex == <span class="number">-1</span>) <span class="keyword">return</span> rightIndex;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rightIndex == <span class="number">-1</span>) <span class="keyword">return</span> leftIndex;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>时间复杂度也是$O(logn)$。</p><p>更简单的写法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左闭右闭写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 本质是查找target，因此是小于等于。若是查找最小值，则是小于</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第一种情况，直接找到</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 由于第一种情况已经讨论过nums[mid] == target，因此第二三种情况不用再讨论</span></span><br><span class="line">            <span class="comment">// 第二种情况，数组最小值在右侧, [left, mid]为有序</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[right])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// target在[left, mid](有序)内</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// target在无序区间内</span></span><br><span class="line">                <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第三种情况，数组最小值在左侧，[mid, right]为有序</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// target在[mid, right]区间内</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// target在无序区间内</span></span><br><span class="line">                <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>分三种情况讨论：</p><ul><li>直接在mid处找到target</li><li>数组最小值在右侧, [left, mid]为有序<ul><li>target在[left, mid]有序区间内</li><li>target在剩余的无序区间内</li></ul></li><li>数组最小值在左侧，[mid, right]为有序<ul><li>target在[mid, right]有序区间内</li><li>target在剩余的无序区间内</li></ul></li></ul><h2 id="81-搜索旋转排序数组II"><a href="#81-搜索旋转排序数组II" class="headerlink" title="81.搜索旋转排序数组II"></a>81.搜索旋转排序数组II</h2><p>本题依然可以用老思路：找到最小值点，将区间划分为两个单调区间，然后分别在两个单调区间中进行搜索。本题实际上不可以这样做，因为本题中数组的元素可以重复，可能存在不止一个最小值点。</p><p>看了答案后，发现本题有两种写法，第一种：在循环内部跳过数组左侧和右侧的重复元素：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// 跳过数组左侧的重复元素</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">            <span class="comment">// 跳过数组右侧的重复元素</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断有序部分</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;  <span class="comment">// 左侧有序</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 右侧有序</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>第二种，在循环外部直接删去数组尾部与数组头部重复的元素：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 移除重复的末尾元素以减少干扰</span></span><br><span class="line">        <span class="comment">// 可以处理如下情况：[1, 0, 1, 1, 1], [1, 2, 2, 2, 2, 0, 1]</span></span><br><span class="line">        <span class="comment">// nums.front() == nums.back()时，可能数组右边有序，也可能左边有序</span></span><br><span class="line">        <span class="comment">// 也可写作nums[0] == nums[nums.size() - 1]</span></span><br><span class="line">        <span class="keyword">while</span> (nums.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; nums.<span class="built_in">front</span>() == nums.<span class="built_in">back</span>()) nums.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// [3, 4, 5, 1, 2]</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[right])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 有序区间[left, mid]</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 无序区间[mid, right]</span></span><br><span class="line">                <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 有序区间[mid, right]</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 无序区间[left, mid]</span></span><br><span class="line">                <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意：需要先移除重复的末尾元素以减少干扰，再给<code>left</code>和<code>right</code>赋值。</p><p>建议采用第二种写法，因为第二种写法相当于在33.搜索旋转排序数组的基础上仅仅添加了移除重复的末尾元素的代码。这道题相当与上一题区别在于这道题包含了重复元素，其实影响到的是，当左端点和右端点相等时，无法判断mid在左半边有序数组还是右半边有序数组，所以只需要一直pop直到左端点和右端点不相等就可以了。</p><h2 id="442-数组中重复的数据"><a href="#442-数组中重复的数据" class="headerlink" title="442. 数组中重复的数据"></a>442. 数组中重复的数据</h2><h2 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a>448. 找到所有数组中消失的数字</h2><p>只有当数字的范围和数组的大小相等，或者有一定偏移关系时，才可以用原地哈希。本题的数字范围1-n，本题的数组中有n个元素，数组下标的范围是0-n-1。这种原地哈希算法适用于和正整数有关，且数字范围和数组长度有关的题目里，映射之后能利用映射关系（下标和值一一对应）来找到解。</p><p>对于本题，本质就是将原数组的下标为<code>nums[i] - 1</code>处放上<code>nums[i]</code>，最终希望达到的效果是<code>nums[nums[i] - 1] == nums[i]</code>。本题的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDisappearedNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将nums[i]放到下标为nums[i] - 1的位置上</span></span><br><span class="line">        <span class="comment">// 由于原来下标为nums[i] - 1的位置上可能有数，因此需要将该数暂存到nums[i]上</span></span><br><span class="line">        <span class="comment">// 之后可以通过while循环将再将该数放到合适的位置上去</span></span><br><span class="line">        <span class="comment">// 可以举例子来模拟，即可以弄清楚这个过程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[nums[i] - <span class="number">1</span>] != nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> idx = nums[i] - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> tmp = nums[idx];</span><br><span class="line">                nums[idx] = nums[i];</span><br><span class="line">                nums[i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ ) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 若nums[i]上的数字不为i + 1，则说明该数字缺失，将其插入结果集中</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>)</span><br><span class="line">                res.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题的精简注释版本如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDisappearedNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 确保将nums[i]放到下标为nums[i] - 1的位置上</span></span><br><span class="line">            <span class="keyword">while</span> (nums[nums[i] - <span class="number">1</span>] != nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> idx = nums[i] - <span class="number">1</span>; <span class="comment">// 即将占用的元素的下标</span></span><br><span class="line">                <span class="type">int</span> tmp = nums[idx]; <span class="comment">// 暂存下标为idx处的元素，因为其即将被nums[i]占用</span></span><br><span class="line">                nums[idx] = nums[i]; <span class="comment">// 将nums[i]放到下标为nums[i] - 1的位置上</span></span><br><span class="line">                nums[i] = tmp; <span class="comment">// 将原来数组中下标为nums[i] - 1的数暂存到位置i</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) res.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>while循环中的顺序：先写：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> idx = nums[i] - <span class="number">1</span>;</span><br><span class="line">nums[idx] = nums[i];</span><br></pre></td></tr></table></figure></p><p>确保nums[i]被放在了下标为nums[i] - 1处。</p><p>再将原本下标为idx处的元素缓存下来，暂存到下标i处：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tmp = nums[idx];</span><br><span class="line">nums[i] = tmp;</span><br></pre></td></tr></table></figure></p><p>由此构成完整的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> idx = nums[i] - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> tmp = nums[idx];</span><br><span class="line">nums[idx] = nums[i];</span><br><span class="line">nums[i] = tmp;</span><br></pre></td></tr></table></figure></p><h2 id="442-数组中重复的数据-1"><a href="#442-数组中重复的数据-1" class="headerlink" title="442. 数组中重复的数据"></a>442. 数组中重复的数据</h2><p>本题依然可以用448的原地哈希法完成，唯一地不同在于，448是将<code>i + 1</code>插入<code>res</code>数组中，本题是将<code>nums[i]</code>插入<code>res</code>数组中，举一个实际的例子即可理解为什么是将<code>nums[i]</code>插入结果集中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[nums[i] - <span class="number">1</span>] != nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> idx = nums[i] - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> tmp = nums[idx];</span><br><span class="line">                nums[idx] = nums[i];</span><br><span class="line">                nums[i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) res.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>对原地哈希可进行总结：</p><ul><li><p>情景：数组的长度为<code>n</code>，数组中元素的范围为<code>[1, n]</code></p></li><li><p>若是找缺失的数字，则插入结果集的是索引下标+1；若是找出现了两遍的数字，则插入结果集的是元素的值<code>nums[i]</code></p></li><li><p>使用代码块：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (nums[nums[i] - <span class="number">1</span>] != nums[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> idx = nums[i] - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tmp = nums[idx];</span><br><span class="line">        nums[idx] = nums[i];</span><br><span class="line">        nums[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对数组进行原地哈希后，数组中出现过的数字<code>nums[i]</code>会被重新放置在下标为<code>nums[i] - 1</code>的位置上。范围为<code>[1, n]</code>但数组中没出现过的数字<code>nums[j]</code>，其本来应该放置在下标为<code>nums[j] - 1</code>处，但由于没有出现过，现在下标为<code>nums[j] - 1</code>处放置了原数组中的重复元素。这是因为循环的条件<code>nums[nums[i] - 1] != nums[i]</code>，当未填满的位置填入了重复元素后，while循环也会终止。例如，对<code>[4, 3, 2, 2, 3, 1]</code>进行原地哈希，结果为<code>[1, 2, 3, 4, 3, 2]</code>，原数组中出现过的1, 2, 3, 4被放置在下标为0, 1, 2, 3的位置上，原数组中没有出现过5, 6，因此下标为4，5处放置了原数组中重复的元素2, 3。</p></li><li><p>原地哈希法的时间复杂度都为O(n)，空间复杂度都为O(1)</p></li><li><p>为什么是 O(n) 时间复杂度？</p><p>每个元素在整个过程中最多被处理两次（一次是放置在正确位置，一次是在最终遍历中检查），因此总体时间复杂度是 O(2n)==O(n)。</p></li></ul><h2 id="41-缺失的第一个正数"><a href="#41-缺失的第一个正数" class="headerlink" title="41. 缺失的第一个正数"></a>41. 缺失的第一个正数</h2><p>本题的思路和448、442相同，只不过while循环多了限制条件，同时返回值时需要考虑一种特殊情况。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 为避免nums[i] - 1超出索引的范围，需要对nums[i]的大小进行限制</span></span><br><span class="line">            <span class="comment">// 0 &lt;= nums[i] - 1 &lt;= n - 1，因此1 &lt;= nums[i] &lt;= n</span></span><br><span class="line">            <span class="comment">// 不需要对此范围之外的数进行操作，也无法用原地哈希法操作它们，因为它们会超出索引范围</span></span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt;= <span class="number">1</span> &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 这四行代码可以简写为swap(nums[nums[i] - 1], nums[i]);</span></span><br><span class="line">                <span class="type">int</span> idx = nums[i] - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> tmp = nums[idx];</span><br><span class="line">                nums[idx] = nums[i];</span><br><span class="line">                nums[i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) </span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 特殊情况, nums = [1], 上面的循环不会返回结果，此时返回n + 1即可</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题中，数的个数为n个，但数的范围不在<code>[1, n]</code>中。需要返回缺失的第一个正整数。虽然乍一看不完全符合上题总结的原地哈希法的使用条件，但加上限制条件的原地哈希法依然可以被应用于解决本题。</p><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2><p>本题不能这样写：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ListNode* cur = dummyHead; cur != <span class="literal">NULL</span>; cur = cur-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;next != <span class="literal">NULL</span> &amp;&amp; cur-&gt;next-&gt;val == val)</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样写会导致删除节点后，<code>cur</code> 指针向后移动到了 <code>cur-&gt;next-&gt;next</code>，从而可能跳过了紧接着的需要删除的节点。比如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; 2 -&gt; 2 -&gt; 3, target = 2</span><br></pre></td></tr></table></figure></p><p>上述写法会导致第三个节点2不能被删除。</p><p>本题应当用while循环写，对一个节点，如果是目标节点，则将其删除，否则，向后移动一个节点，不能同时既删除节点又后移一位。本题正确的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果既删又后移，则会漏掉节点</span></span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;next-&gt;val == val) cur-&gt;next = cur-&gt;next-&gt;next; <span class="comment">// 要么删</span></span><br><span class="line">            <span class="keyword">else</span> cur = cur-&gt;next; <span class="comment">// 要么后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题的完整主函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">remove</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">    ListNode* cur = dummyHead;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;next-&gt;val == val) cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// head = [1,2,6,3]</span></span><br><span class="line">    ListNode* node1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    ListNode* node2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    ListNode* node3 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">6</span>);</span><br><span class="line">    ListNode* node4 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    node1-&gt;next = node2;</span><br><span class="line">    node2-&gt;next = node3;</span><br><span class="line">    node3-&gt;next = node4;</span><br><span class="line"></span><br><span class="line">    ListNode* head = <span class="built_in">remove</span>(node1, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (ListNode* cur = head; cur != <span class="literal">NULL</span>; cur = cur-&gt;next) cout &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造链表时，也可以采用函数写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">appendNode</span><span class="params">(ListNode*&amp; head, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 头为空，则将新节点作为头节点</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">    <span class="comment">// 头不为空，则遍历到链表最后一个节点，将新节点添加到最后一个节点之后</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>) cur = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">remove</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">    ListNode* cur = dummyHead;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;next-&gt;val == val) cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// head = [1,2,6,3]</span></span><br><span class="line">    ListNode* node = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">appendNode</span>(node, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">appendNode</span>(node, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">appendNode</span>(node, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">appendNode</span>(node, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    ListNode* head = <span class="built_in">remove</span>(node, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (ListNode* cur = head; cur != <span class="literal">NULL</span>; cur = cur-&gt;next) cout &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在定义链表时，特别要注意下面用来赋值的这句话：<code>ListNode(int x): val(x), next(NULL) &#123;&#125;</code>。</p><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h2><p>本题的细节很多，需要特别注意。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get函数的复杂写法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; _size - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    LinkedList* cur = _dummyHead;</span><br><span class="line">    index ++ ;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        index -- ;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题的完整代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkedList</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        LinkedList* next;</span><br><span class="line">        <span class="built_in">LinkedList</span>(<span class="type">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        _dummyHead = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(<span class="number">0</span>);</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; _size - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        LinkedList* cur = _dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (index -- ) cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedList* head = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(val);</span><br><span class="line">        head-&gt;next = _dummyHead-&gt;next;</span><br><span class="line">        _dummyHead-&gt;next = head;</span><br><span class="line">        _size ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedList* tail = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(val);</span><br><span class="line">        LinkedList* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>) cur = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = tail;</span><br><span class="line">        _size ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; _size) <span class="keyword">return</span>;</span><br><span class="line">        LinkedList* newNode = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(val);</span><br><span class="line">        LinkedList* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index -- ) cur = cur-&gt;next;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        _size ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; _size - <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        LinkedList* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index -- ) cur = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        _size -- ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LinkedList* _dummyHead;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意事项：</p><ol><li><p>带下划线的变量表示类中的变量，而非局部变量</p></li><li><p>记得在private中定义类中的变量</p></li><li><p>注意插入节点时先更新后面的边，再更新前面的边</p></li><li><p>别忘记_size ++ / _size —</p></li><li><p>注意对参数index进行判断</p></li><li><p><code>while (index -- ) cur = cur-&gt;next</code>的意思是，首先判断<code>index</code>是否大于0，是，则<code>index = index - 1</code>，然后执行<code>cur = cur-&gt;next</code></p></li></ol><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><p>我记得有递归写法，迭代写法，先尝试实现迭代写法，其本质是双指针。记住下面的图，即可写出本题的双指针法的代码：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/leetcode206.png?raw=true" alt="leetcode206.png"></p><p>注意：pre从NULL开始，cur在NULL结束。</p><p>一个经典的错误：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* tmp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样写的结果是导致未将列表的最后一个节点（即反转后的头节点）的 <code>next</code> 指针正确设置。</p><p>本题的递归写法其实更加好写，但其空间复杂度为O(n)，高于双指针写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode* last = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><p>首先尝试用双指针做法解决本题。直接看答案，记住本题的方法。其实不需要双指针，本题是一道单纯的模拟题，但要搞清楚循环终止条件。看过博客后，我写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 终止条件：分别对应有偶数个节点和有奇数个节点</span></span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 存1</span></span><br><span class="line">            ListNode* tmp = cur-&gt;next;</span><br><span class="line">            <span class="comment">// 存3</span></span><br><span class="line">            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">// d-&gt;2</span></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">// 2-&gt;1</span></span><br><span class="line">            cur-&gt;next-&gt;next = tmp;</span><br><span class="line">            <span class="comment">// 1-&gt;3</span></span><br><span class="line">            tmp-&gt;next = tmp1;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 后移两位</span></span><br><span class="line">            cur = cur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h2><p>本题的笨办法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 计算节点数目</span></span><br><span class="line">        <span class="keyword">while</span> (cur)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            num ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 倒数第n个节点是正数第num - n个节点</span></span><br><span class="line">        cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; n) <span class="comment">// 不可以写成(num - n) -- </span></span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            num -- ;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>看博客，复习巧妙解法。本题的巧妙解法是快慢双指针。<strong>快指针先移动n位，然后快慢指针同时移动，直到快指针移动到链表的最后一个节点。此时，慢指针就指向了需要删除的节点</strong>。据此，我写出了本题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        ListNode* fast = dummyHead;</span><br><span class="line">        ListNode* slow = dummyHead;</span><br><span class="line">        <span class="comment">// &amp;&amp; fast可加可不加，因为本题有限制n&lt;=链表长度，若无此限制，则必须加，否则会出现空指针异常</span></span><br><span class="line">        <span class="keyword">while</span> (n -- &amp;&amp; fast) fast = fast-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next) </span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>也可以让快指针先移动n + 1步，然后快慢指针同时移动，直到快指针移动到链表的NULL节点。</p><h2 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160.相交链表"></a>160.相交链表</h2><p>本题拿到我没什么思路，直接看以前的博客。本题的思路：首先计算两个链表的长度，将较长的链表作为链表a，较短的链表作为链表b。然后a链表从sizea - sizeb处开始, b链表从0处开始遍历，直到找到二者的交汇点。本质上体现的是一种<strong>末尾对齐</strong>的思想。示意图和代码如下所示：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4_2.png" alt="面试题02.07.链表相交_2"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* cura = headA, *curb = headB;</span><br><span class="line">        <span class="type">int</span> sizea = <span class="number">0</span>, sizeb = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算a的长度</span></span><br><span class="line">        <span class="keyword">while</span> (cura)</span><br><span class="line">        &#123;</span><br><span class="line">            cura = cura-&gt;next;</span><br><span class="line">            sizea ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算b的长度</span></span><br><span class="line">        <span class="keyword">while</span> (curb)</span><br><span class="line">        &#123;</span><br><span class="line">            curb = curb-&gt;next;</span><br><span class="line">            sizeb ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让a为较长的链表, b为较短的链表</span></span><br><span class="line">        <span class="keyword">if</span> (sizea &lt; sizeb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(sizea, sizeb);</span><br><span class="line">            <span class="built_in">swap</span>(headA, headB);</span><br><span class="line">            <span class="built_in">swap</span>(cura, curb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a链表从sizea - sizeb处开始, b链表从0处开始</span></span><br><span class="line">        cura = headA, curb = headB;</span><br><span class="line">        <span class="type">int</span> delta = sizea - sizeb;</span><br><span class="line">        <span class="keyword">while</span> (delta -- ) cura = cura-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cura == curb) <span class="keyword">return</span> cura;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                cura = cura-&gt;next;</span><br><span class="line">                curb = curb-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n + m)，空间复杂度O(1)。</p><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h2><p>我记得本题是用快慢指针解决的，快指针一次走两格，慢指针一次走一格，二者必然会在节点处相遇。我还记得公式怎么推导，但具体的思路记不清楚了，看博客。看完博客后，我写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head, * slow = head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// fast != NULL保证fast-&gt;next不报空指针异常</span></span><br><span class="line">        <span class="comment">// fast-&gt;next != NULL保证fast-&gt;next-&gt;next不报空指针异常</span></span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fast == slow)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* node1 = head, * node2 = fast;</span><br><span class="line">                <span class="keyword">while</span> (node1 != node2)</span><br><span class="line">                &#123;</span><br><span class="line">                    node1 = node1-&gt;next;</span><br><span class="line">                    node2 = node2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> node1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题的思路：快慢指针必然会在环中的某处相交，且慢指针在进入环的第一圈中就会和快指针相交。记下交点，让一个指针从起点开始走，另一个指针从交点开始走，二者相交的位置就是环的入口。详细的数学推导和细节见博客。</p><p>时间复杂度O(n)，空间复杂度O(1)。</p><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><p>本题简单，用数组做哈希，用数组统计一个字符串中各个字母出现的次数，然后遍历另一个字符串，在数组中做减减操作，最后判断数组中的所有元素是否都为0。我独立写出了本题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() != t.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">hash</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp1 = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            hash[tmp1] ++ ;</span><br><span class="line">            <span class="type">int</span> tmp2 = t[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            hash[tmp2] -- ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>需要注意，数组的长度为26，而非<code>s.size()</code>，因为s和t中只含有26个英文字母。可以不用<code>vector</code>，用<code>int</code>类型的数组即可。</p><p>本题更简洁的版本的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() != t.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> hash[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            hash[s[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line">            hash[t[i] - <span class="string">&#x27;a&#x27;</span>] -- ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (hash[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p>由于本题数据范围的限制，可以用数组做哈希，也可以用<code>unordered_set</code>做哈希。我首先写出了数组做哈希的写法（数组索引的范围与元素取值的范围相同），数组做哈希非常快：</p><h3 id="数组哈希，数组去重"><a href="#数组哈希，数组去重" class="headerlink" title="数组哈希，数组去重"></a>数组哈希，数组去重</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash1[<span class="number">1010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> hash2[<span class="number">1010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash1[nums1[i]] ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash2[nums2[i]] ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1010</span>; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash1[i] &amp;&amp; hash2[i]) res.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>尝试用<code>unordered_set</code>做本题。我不记得怎么用<code>unordered_set</code>做了，也忘记了<code>unordered_set</code>的基本做法，复习博客。</p><h3 id="数组哈希，set去重"><a href="#数组哈希，set去重" class="headerlink" title="数组哈希，set去重"></a>数组哈希，set去重</h3><p>可以将数组和set结合，这样只需要一个数组即可完成本题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; res; <span class="comment">// 用于结果集去重</span></span><br><span class="line">        <span class="type">int</span> hash[<span class="number">1010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash[nums1[i]] ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (hash[nums2[i]]) res.<span class="built_in">insert</span>(nums2[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的set只是起到了去重的功能，没有起到哈希的功能，哈希的任务还是由数组承担了。注意如何将set转换为vector输出，直接<code>vector&lt;int&gt; (res.begin(), res.end())</code>。</p><h3 id="set哈希，set去重"><a href="#set哈希，set去重" class="headerlink" title="set哈希，set去重"></a>set哈希，set去重</h3><p>也可以完全用set做本题，set既用来做哈希，又用来去重，代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全用set做本题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(nums1.begin(), nums1.end())</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (s1.<span class="built_in">find</span>(nums2[i]) != s1.<span class="built_in">end</span>()) res.<span class="built_in">insert</span>(nums2[i]);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h2><p>我记得本题有个巧妙的做法。本题使用的数据结构应该是set。我直接看博客复习本题的写法。我错误的根本原因还是对本题的算法思路理解不清晰。在明确了思路后，我写下了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 用于存储各位数字的平方和</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> digit = n % <span class="number">10</span>;</span><br><span class="line">                sum += digit * digit;</span><br><span class="line">                n = n / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">find</span>(sum) != s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            n = sum;</span><br><span class="line">            s.<span class="built_in">insert</span>(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题的思路其实很简单，<strong>关键在于对平方和的计算和分类讨论（分为三类）</strong>。<strong>开一个死循环，计算n的各位数字的平方和。若平方和为1，则是快乐数。若平方和在set中出现过，则说明进入了死循环，不是快乐数。否则，将平方和加入到set中，将sum赋给n，进入下一重循环</strong>。</p><p>时间复杂度和空间复杂度都是O(logn)，详情参见博客。</p><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p>本题要用map解决。用map的key存储索引，map的value存储nums中的值。首先将数组中的值依次存入map中，然后再在map中搜索<code>target - nums[i]</code>，若找到，则返回一对索引。本题思路我是清楚的，但由于忘了map的一些写法，因此复习博客。</p><p>实际上，我对本题的理解还是不够深刻。应该是用map的key存储数组中的值，map的value存储数组中的元素的下标，因为我们的目的是快速查找值是否出现过，被快速查找的对象应该被作为key。</p><h3 id="先查再插"><a href="#先查再插" class="headerlink" title="先查再插"></a>先查再插</h3><p>看完博客后，我写出了以下的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">find</span>(t) != m.<span class="built_in">end</span>()) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = m.<span class="built_in">find</span>(t);</span><br><span class="line">                <span class="keyword">return</span> &#123;i, it-&gt;second&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            m.<span class="built_in">insert</span>(&#123;nums[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本题的思路为：<strong>先查后插。先查现有的map中有无<code>target - nums[i]</code>，有，则将其索引和i一起加入结果集。无，则将遍历到的元素继续插入map中。这样天然的可以防止同一个元素被取出两次</strong>。</p><p>记住map的一些用法：</p><ul><li><code>m.insert(&#123;nums[i], i&#125;)</code></li><li><code>m.find(key) != m.end()</code></li><li><code>auto it = m.find(t); int value = it-&gt;second;</code></li></ul><h3 id="插完再查"><a href="#插完再查" class="headerlink" title="插完再查"></a>插完再查</h3><p>本题更复杂版本的代码，由于没有先查后插，导致要对找到的索引进行判断，其不能等于当前遍历到的索引，否则会导致同一个数字被使用了两次：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            m.<span class="built_in">insert</span>(&#123;nums[i], i&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = target - nums[i];</span><br><span class="line">            <span class="keyword">auto</span> it = m.<span class="built_in">find</span>(t);</span><br><span class="line">            <span class="keyword">if</span> (it != m.<span class="built_in">end</span>() &amp;&amp; it-&gt;second != i) <span class="keyword">return</span> &#123;i, it-&gt;second&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="压缩字符串（面试真题）"><a href="#压缩字符串（面试真题）" class="headerlink" title="压缩字符串（面试真题）"></a>压缩字符串（面试真题）</h2><p>将<code>aaaabb</code>压缩为<code>a4b2</code>，将<code>abcde</code>保持原样不动。我独立写出了以下的代码，可以通过所有的测试样例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">compress</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    string res;</span><br><span class="line">    <span class="type">char</span> tmp = s[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> size = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        res += tmp;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] == s[i - <span class="number">1</span>]) </span><br><span class="line">        &#123;</span><br><span class="line">            i ++ ;</span><br><span class="line">            size ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">1</span>) res += <span class="built_in">to_string</span>(size); <span class="comment">// 也可以写成res += &#x27;0&#x27; + size;</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; s.<span class="built_in">size</span>()) tmp = s[i];</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理最后一个字符</span></span><br><span class="line">    <span class="keyword">if</span> (s[s.<span class="built_in">size</span>() - <span class="number">1</span>] != s[s.<span class="built_in">size</span>() - <span class="number">2</span>]) res += s[s.<span class="built_in">size</span>() - <span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将aaabb转换为a3b2输出</span></span><br><span class="line">    <span class="comment">// 将abcde原样输出</span></span><br><span class="line">    string s = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    string res = <span class="built_in">compress</span>(s);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实没有必要在for循环中嵌套while循环，直接用一个for循环就可以搞定。以下的写法为推荐写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// aaabb-&gt;a3b2</span></span><br><span class="line"><span class="function">string <span class="title">compress</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span> || s.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    string res;</span><br><span class="line">    <span class="type">char</span> tmp = s[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> size = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 出现相同字母</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[i - <span class="number">1</span>]) size ++ ;</span><br><span class="line">        <span class="comment">// 出现不同字母</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将上一个字符和其出现次数（&gt;1）插入res中</span></span><br><span class="line">            res += tmp;</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">1</span>) res += <span class="built_in">to_string</span>(size);</span><br><span class="line">            <span class="comment">// 恢复现场</span></span><br><span class="line">            tmp = s[i];</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理字符串的最后一位</span></span><br><span class="line">    res += tmp;</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">1</span>) res += <span class="built_in">to_string</span>(size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s = <span class="string">&quot;aaaanbv&quot;</span>;</span><br><span class="line">    string res = <span class="built_in">compress</span>(s);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>本题的关键在于分两种情况讨论：出现相同的字母/出现不同的字母，最后记得处理字符串的最后一位</strong></p><p>通过本题，记住常用操作——将数字转换为字符：<code>to_string(size)</code></p><p>可以写出上述操作的逆过程的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isdigit</span><span class="params">(<span class="type">char</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">decompress</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// s的第一个元素必为字母，从第二个元素开始可能为数字</span></span><br><span class="line">    <span class="comment">// 一对对处理，先处理字母，再处理数字（可能有，也可能没有）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理字母</span></span><br><span class="line">        <span class="type">char</span> tmp = s[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理数字，计算count</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i + <span class="number">1</span> &lt; s.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])) </span><br><span class="line">        &#123;</span><br><span class="line">            count = count * <span class="number">10</span> + s[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            i ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字母加入结果集</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) res += tmp;</span><br><span class="line">        <span class="comment">// 若有数字，则将字母重复数字遍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">while</span> (count -- ) res += tmp; <span class="comment">// 也可调用函数res.append(count, tmp);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s = <span class="string">&quot;a56b12&quot;</span>;</span><br><span class="line">    string res = <span class="built_in">decompress</span>(s);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>本题的关键在于字母和数字成对出现（当然数字可能没有），成对地处理字母和数字，将它们成对地放入res中。</strong></p><h2 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h2><p>本题用哈希做的时间复杂度应该为O(n^2)。先枚举nums1和nums2中所有元素之和的组合，然后再在nums3和nums4中查找所有元素之和为<code>-nums1[i] -  nums2[j]</code>的情况。由于涉及到索引，所以要用map，map的key存数值，map的value存索引。value似乎要存一组索引，比如(i, j)，我忘记怎么写了，看下博客。</p><p><strong>实际上，应该是用map的key存储和，map的value存储出现这个和的次数</strong>。据此，我写出了以下的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums2.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">                m[nums1[i] + nums2[j]] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums3.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums4.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m.<span class="built_in">find</span>(-nums3[i] - nums4[j]) != m.<span class="built_in">end</span>()) </span><br><span class="line">                    count += m.<span class="built_in">find</span>(-nums3[i] - nums4[j])-&gt;second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更简洁的写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num1: nums1)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num2: nums2)</span><br><span class="line">                m[num1 + num2] ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num3: nums3)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num4: nums4)</span><br><span class="line">                <span class="keyword">if</span> (m.<span class="built_in">find</span>(-num3 - num4) != m.<span class="built_in">end</span>())</span><br><span class="line">                    count += m[-num3 - num4];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意：</p><ul><li>用map的key存储和，map的value存储出现这个和的次数</li><li>map的key不可重复，map的value可以重复。本题中的map起到一个将相同的和归拢，并用value统计其出现次数的作用</li><li>cpp中的map中的value是支持++操作的，且value可以通过key直接索引到，就像普通的数组那样</li><li>时间和空间复杂度均为$O(n^2)$，空间复杂度为$O(n^2)$是两数组的数字各不相同，产生了$n^2$种组合。</li></ul><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><p>本题用数组做哈希就可以，因为对象就是26个小写英文字母。据此，我写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; magazine.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            cnt[magazine[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ransomNote.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            cnt[ransomNote[i] - <span class="string">&#x27;a&#x27;</span>] -- ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: cnt)</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>终极优化版本：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Each letter in magazine can only be used once in ransomNote</span></span><br><span class="line">        <span class="keyword">if</span> (ransomNote.<span class="built_in">size</span>() &gt; magazine.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> m: magazine)</span><br><span class="line">            cnt[m - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> r: ransomNote)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[r - <span class="string">&#x27;a&#x27;</span>] -- ;</span><br><span class="line">            <span class="keyword">if</span> (cnt[r - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;34-在排序数组中查找元素的第一个和最后一个位置&quot;&gt;&lt;a href=&quot;#34-在排序数组中查找元素的第一个和最后一个位置&quot; class=&quot;headerlink&quot; title=&quot;34. 在排序数组中查找元素的第一个和最后一个位置&quot;&gt;&lt;/a&gt;34. 在排序数组中查找元</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="Tiktok" scheme="http://example.com/tags/Tiktok/"/>
    
    <category term="复习" scheme="http://example.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
    <category term="补充" scheme="http://example.com/tags/%E8%A1%A5%E5%85%85/"/>
    
  </entry>
  
  <entry>
    <title>Day 27 Leetcode 93, 78, 90</title>
    <link href="http://example.com/2024/05/06/Day-27-Leetcode-93-78-90/"/>
    <id>http://example.com/2024/05/06/Day-27-Leetcode-93-78-90/</id>
    <published>2024-05-06T03:26:30.000Z</published>
    <updated>2024-05-26T06:24:37.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html">93.复原IP地址</a><br><a href="https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html">78.子集</a><br><a href="https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html">90.子集II</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="93-复原IP地址"><a href="#93-复原IP地址" class="headerlink" title="93.复原IP地址"></a>93.复原IP地址</h3><ol><li><p>cpp中的string是有pop_back方法的，用于弹出字符串中的最后一个元素。</p></li><li><p>字符串中在i的后面插入一个逗点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">insert</span>(s.<span class="built_in">begin</span>() + i + <span class="number">1</span> , <span class="string">&#x27;.&#x27;</span>);  </span><br></pre></td></tr></table></figure></li><li><p>删除特定位置处的逗点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>() + i + <span class="number">1</span>);       </span><br></pre></td></tr></table></figure></li></ol><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="93-复原IP地址-1"><a href="#93-复原IP地址-1" class="headerlink" title="93.复原IP地址"></a>93.复原IP地址</h3><p>我尝试按照131.分割回文串的思路做本题，也写出了相应的代码，但运行结果和答案相差很大，而且代码非常复杂。我来看看卡尔的解法，看看如何写出正确而简单地处理这种字符串类型的回溯题的代码。</p><h3 id="78-子集"><a href="#78-子集" class="headerlink" title="78.子集"></a>78.子集</h3><p>据卡尔说，子集问题，就是收集树形结构中，每一个节点的结果。 整体代码其实和回溯模板都是差不多的。 对于本题的树形结构，我有一个想法：以1, 2, 3为例，首先选中1前面的空位，则要收集空和123。然后选中1，则要收集1和23。然后选中2，则要收集2和13。然后选中3，则要收集3和12。共有8个子集。但本题的代码我写不出来，直接看卡尔的视频讲解。</p><h3 id="90-子集II"><a href="#90-子集II" class="headerlink" title="90.子集II"></a>90.子集II</h3><p>本题是40.组合总和II再加上78.子集。利用40题的去重办法（树层去重，用<code>used</code>数组，即<code>if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == 0)</code>），利用78题的子集问题的解法（主要是在所有节点而不仅仅是叶子节点上收集答案）。据此，我独立写出了本题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= nums.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 树层去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>, used);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 一定记得要对nums排序</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="93-复原IP地址-2"><a href="#93-复原IP地址-2" class="headerlink" title="93.复原IP地址"></a>93.复原IP地址</h3><p>合法的IP地址：</p><ul><li>每个整数位于 0 到 255 之间组成</li><li>数字前不能有0，即不能有先导0</li><li>不能出现非0-9的字符</li></ul><p>因此本题不仅需要对字符串进行切割，还要对子串进行合法性的判断。本题在回溯算法的切割问题中是一道较有难度的题。做了131.分割回文串后，再来做本题，会易于理解一些。使用回溯算法暴力枚举分割的每一种情况。画树形结构图。</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/20201123203735933.png?raw=true" alt="20201123203735933.png"></p><p>画出了上述树形图后，写代码还会有疑惑：</p><ul><li><p>如何模拟切割线</p></li><li><p>怎么固定切割线，再在剩余的字符串中进行切割</p></li><li><p>切割出的子串如何表达</p></li></ul><p>接下来写具体的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// startIndex表示下一层递归切割的位置，即切割线</span></span><br><span class="line"><span class="comment">// 一个IP需要有三个逗点进行分割，pointSum用于统计逗点的数量, pointSum决定了树的深度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string&amp; s, <span class="type">int</span> startIndex, <span class="type">int</span> pointSum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 每次加逗点，都是对其前面的子串做合法性判断</span></span><br><span class="line">    <span class="comment">// 此时还需要专门对最后一个子串做合法性判断，最后一个子串合法了，才能将整个IP地址加入结果集中</span></span><br><span class="line">    <span class="comment">// isvalid用于判断一个子串是否合法：数字前不能有0，数字在0-255之间，子串中不能有非法字符</span></span><br><span class="line">    <span class="keyword">if</span> (pointSum == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isvalid</span>(s, startIndex, s.<span class="built_in">size</span>() - <span class="number">1</span>)) <span class="comment">// 左闭右闭</span></span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(s); <span class="comment">// s会在后面被修改，具体来说是被切割并加上逗点</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 切割后，对产生的第一个子串的合法性进行判断。子串的区间：[startindex, i]</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isvalid</span>(s, startIndex, i))</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 进入下一层递归前，需要在子串后面加上逗点</span></span><br><span class="line">            <span class="comment">// 将.插入到s.begin() + i的后面，故传入的参数是s.begin() + i + 1</span></span><br><span class="line">            s.<span class="built_in">insert</span>(s.<span class="built_in">begin</span>() + i + <span class="number">1</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            pointSum += <span class="number">1</span>; <span class="comment">// 逗点数量+1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="comment">// 由于给字符串s额外加了一个逗点，因此是i + 2（本来是i + 1）</span></span><br><span class="line">            <span class="built_in">backtracking</span>(s, i + <span class="number">2</span>, pointSum);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>() + i + <span class="number">1</span>); <span class="comment">// 删除s中插入的逗点</span></span><br><span class="line">            pointSum -= <span class="number">1</span>;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码的精妙之处在于，就是在原来的字符串<code>s</code>的基础上进行修改，修改就是在合适的位置上添加逗点。本题的关键在于如何模拟切割的过程。切割的过程本质上和组合问题的取数的过程是一样的。另外还需要对子串进行合法性的判断，子串是<code>[startIndex, i]</code>。子串合法后再加上逗点。</p><p>根据上述核心代码，我独立写出了解决本题的完整的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接在s的基础上添加逗号，得到可能的IP地址</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断区间[start, end]的合法性</span></span><br><span class="line">    <span class="comment">// 三个要求：1. 没有非数字的字符</span></span><br><span class="line">    <span class="comment">// 2. 在0-255之间</span></span><br><span class="line">    <span class="comment">// 3. 没有先导0</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isvalid</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        string tmp = s.<span class="built_in">substr</span>(start, end - start + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先导0</span></span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; tmp[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> d = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = tmp.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 非数字的字符</span></span><br><span class="line">            <span class="keyword">if</span> (tmp[i] &lt; <span class="string">&#x27;0&#x27;</span> || tmp[i] &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            sum += (tmp[i] - <span class="string">&#x27;0&#x27;</span>) * d;</span><br><span class="line">            d = d * <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">255</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// startIndex为分割线，dotSum为逗点数目</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string&amp; s, <span class="type">int</span> startIndex, <span class="type">int</span> dotSum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (dotSum == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 对第四段(s的最后一段)做合法性判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isvalid</span>(s, startIndex, s.<span class="built_in">size</span>() - <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="comment">// 区间[startIndex, i]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 对区间合法性进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isvalid</span>(s, startIndex, i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 合法，则插入逗点</span></span><br><span class="line">                s.<span class="built_in">insert</span>(s.<span class="built_in">begin</span>() + i + <span class="number">1</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                dotSum ++ ;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 递归，本区间终止于i, 故下一个区间开始于i + 2</span></span><br><span class="line">                <span class="built_in">backtracking</span>(s, i + <span class="number">2</span>, dotSum);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>() + i + <span class="number">1</span>);</span><br><span class="line">                dotSum -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">restoreIpAddresses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>isvalid</code>函数可以写的更简洁更自然：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isvalid</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先导0</span></span><br><span class="line">    <span class="keyword">if</span> (s[start] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= end; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 非数字字符</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] &lt; <span class="string">&#x27;0&#x27;</span> || s[i] &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 在0-255之间</span></span><br><span class="line">        num = num * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">255</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: $O(3^4)$，IP地址最多包含4个数字，每个数字最多有3种可能的分割方式（1位，2位，3位）；<strong>则搜索树的最大深度为4，每个节点最多有3个子节点</strong>（对应每个数字可能是1位，2位，3位的情况）。</li><li>空间复杂度: $O(n)$，原因如下：<ul><li><strong>递归栈</strong>：递归的深度固定，最多为4，因为IP地址由四部分组成。但这并不直接决定空间复杂度，因为递归深度很小。</li><li><strong>存储当前解</strong>：在递归过程中，需要存储当前正在构建的IP地址，这需要额外的空间。此外，每次递归调用时，都可能创建字符串的子串来表示IP地址的某一部分。字符串的最大长度为输入字符串的长度n，因此需要额外的空间来存储这些子串。</li><li><strong>输出解的集合</strong>：输出的解的数量并不直接影响空间复杂度的理论计算，但实际上会使用额外空间来存储所有可能的IP地址。然而，这些空间通常不计入空间复杂度计算中，因为它不依赖于递归过程中的临时存储需求。</li></ul></li></ul><h3 id="78-子集-1"><a href="#78-子集-1" class="headerlink" title="78.子集"></a>78.子集</h3><p>之前讲的组合问题、分割问题，我们都是在树形结构的叶子节点上收获结果，因此在终止条件处收获结果。可以画出如下的树形结构：</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/78.%E5%AD%90%E9%9B%86.png" alt="78.子集"></p><p>观察如上树形结构，发现我们想收获的结果其实在每一个节点中。因此不是在终止条件中收获结果，而是每进入一层递归就将单个结果放入结果集中。现在开始对着树形结果写代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维数组存放单个结果</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"><span class="comment">// 二维数组作为结果集</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// startIndex：下一层递归从哪里开始取数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 每进入一层递归，都要将当前的path放入结果集中</span></span><br><span class="line">    <span class="comment">// 因为要将叶子节点的集合放入结果集中，然后再结束，因此先有本逻辑，再有终止条件</span></span><br><span class="line">    res.<span class="built_in">push_back</span>(path); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 终止条件：走到叶子节点，叶子节点的剩余集合都为空</span></span><br><span class="line">    <span class="comment">// 本终止条件可以不写，因为单层搜索逻辑中的for循环已经对startIndex的大小进行了限制</span></span><br><span class="line">    <span class="keyword">if</span> (startIndex &gt;= nums.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 每进入一层递归，都要收获当前节点的结果，放入单个结果数组中</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="comment">// 进入下一层递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不写终止条件的写法如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsets</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="90-子集II-1"><a href="#90-子集II-1" class="headerlink" title="90.子集II"></a>90.子集II</h3><p>与78的区别：给的集合中允许有重复的元素，因此需要对重复子集去重。本题的关键在于去重，本题是子集+组合总和II（树层去重）的结合，并没有新的知识点。</p><p>本题的树形结构。<code>used</code>数组用于记录某个元素是否出现过。因为去重要让大小相邻的元素挨在一起，因此需要先对数组进行排序。本题的去重是树层去重（树层上相邻的元素如果相等，则不能重复取，否则会得到重复的子集），树枝不需要去重。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124195411977.png" alt="90.子集II"></p><p>现在开始写代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; path; <span class="comment">// 单个结果</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res; <span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件不需要写，在for循环中实际上已经限制了startIndex的大小</span></span><br><span class="line">    res.<span class="built_in">push_back</span>(path); <span class="comment">// 收获结果，需要在每个节点都收获结果</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 树层去重, used[i - 1] == 0意味着第i - 1个元素是第i个元素的回溯</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] = <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        used[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>, used);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        used[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回溯中的去重逻辑都这么写。本题去重也可以用startIndex和i进行比较来实现，但这种去重写法并不通用，遇到排列问题时依然要用used数组的写法进行去重。去重的写法掌握<code>used</code>数组写法即可。</p><p>本题的时间和空间复杂度和78相同。时间复杂度: $O(n\times2^n)$，空间复杂度: $O(n)$。</p><p>本题也可以用哈希法去重，但时间复杂度更高，虽然也能够通过所有测试样例且不超时，代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// set去重</span></span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">find</span>(nums[i]) != s.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            s.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// set去重依然需要排序</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>因此，本题的去重写法有三种：</p><ul><li><code>used</code>数组去重</li><li><code>startIndex</code>去重</li><li><code>set</code>去重</li></ul><p>掌握第一种即可。第一种是思路最清晰也最通用的。</p><p>本题像78一样，也可以不写终止条件，因为<code>startIndex</code>的大小在for循环中已经得到了限制。精简版本的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex, vector&lt;<span class="type">int</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>, used);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="93-复原IP地址-3"><a href="#93-复原IP地址-3" class="headerlink" title="93.复原IP地址"></a>93.复原IP地址</h3><ol><li>本题是131.分割回文串的加强版。因为和131同样是用回溯法求解的分割问题，所以基本原理是相同的，比如<code>startIndex</code>用于作为分割线，分割的区间是<code>[startIndex, i]</code>。</li><li>本题的终止条件和131有显著地不同。131的终止条件是<code>startIndex</code>移动到字符串的末尾，而本题的终止条件是添加了3个逗点，且最后一段区间是合法的。3个逗点的终止条件也限制了树的深度。</li><li>一般处理字符串的问题都比较复杂。本题对字符串处理的精妙之处在于直接在原本的字符串<code>s</code>上进行修改，添加逗点，作为分隔符从而得到合法的IP地址。本题还用到了两个和字符串有关的STL，分别是<code>insert</code>和<code>erase</code>函数。</li><li>本题对区间合法性的判断较为复杂，共有3个要求：<ul><li>段位以0为开头的数字不合法</li><li>段位里有非正整数字符不合法</li><li>段位如果大于255了不合法</li><li>段位若大于255，则立即判断为不合法，<code>return false</code>。若完成for循环后再对<code>num</code>进行判断，可能出现整数型变量溢出</li></ul></li><li>本题的时间复杂度：$O(3^4)$，空间复杂度：$O(n)$</li><li>本题的细节比较多，比较容易写错，属于回溯法解决分割问题中的难题，需要不断复习。</li></ol><h3 id="78-子集-2"><a href="#78-子集-2" class="headerlink" title="78.子集"></a>78.子集</h3><ol><li>子集是收集树形结构中树的所有节点的结果。而组合问题、分割问题是收集树形结构中叶子节点的结果。</li><li>子集也是一种组合问题，因为它的集合是无序的，子集{1,2}和子集{2,1}是一样的。那么既然是无序，取过的元素不会重复取，写回溯算法的时候，for就要从startIndex开始。</li><li>先收集结果集，再写终止条件的原因：当递归到叶子节点时，要先将叶子节点的结果放入结果集中，再终止，因此先写收集结果集的逻辑，再写终止条件。否则叶子节点的结果无法被放入结果集中。</li><li>本题也可以不写终止条件，因为单层递归逻辑的for循环中实际上限制了<code>startIndex</code>的大小，因此最后<code>return</code>即可。但初学者还是建议写终止条件，和标准的回溯模板保持一致。</li><li>本题的时间复杂度: $O(n\times2^n)$，空间复杂度: $O(n)$。时间和空间复杂度的分析同<a href="https://yfchenkeepgoing.github.io/2024/05/01/Day-24-Theory-of-Backtracking-Algorithms-Leetcode-77/">77.组合</a>。</li></ol><h3 id="90-子集II-2"><a href="#90-子集II-2" class="headerlink" title="90.子集II"></a>90.子集II</h3><ol><li><p>本题是40.组合总和II与78.子集这两题的结合。</p></li><li><p>40的精华在于去重（树层去重），78的精华在于在每个节点处都收集结果（而不是像组合、分割问题那样在叶子节点，即终止条件处收集结果），而是在递归函数的开始处（进入递归相当于进入一个节点）收集结果。本题结合了两题的精华。</p></li><li><p>树层去重掌握<code>used</code>数组写法即可，具体代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li><li>树层去重前，需要对<code>nums</code>数组进行排序。</li><li>本题的时间和空间复杂度和上一题（78）相同。</li><li>去重共有三种写法，掌握思路最清晰也最通用的<code>used</code>数组写法即可。</li><li>本题像78一样，也可以不写终止条件，因为<code>startIndex</code>的大小在for循环中已经得到了限制。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0</summary>
      
    
    
    
    <category term="算法（回溯算法）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="切割问题" scheme="http://example.com/tags/%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/"/>
    
    <category term="子集问题" scheme="http://example.com/tags/%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/"/>
    
    <category term="树层去重" scheme="http://example.com/tags/%E6%A0%91%E5%B1%82%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>Day 26 Leetcode 39, 40, 131</title>
    <link href="http://example.com/2024/05/03/Day-26-Leetcode-39-40-131/"/>
    <id>http://example.com/2024/05/03/Day-26-Leetcode-39-40-131/</id>
    <published>2024-05-03T04:14:31.000Z</published>
    <updated>2024-05-06T03:27:32.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html">39.组合总和</a><br><a href="https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html">40.组合总和II</a><br><a href="https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html">131.分割回文串</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40.组合总和II"></a>40.组合总和II</h3><p>创建一个和a数组大小相同的b数组，将其中的元素全部置为0。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a.size(), <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><h3 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131.分割回文串"></a>131.分割回文串</h3><p><code>substr(i, j)</code> 会从索引 <code>i</code> 开始，取长度为 <code>j</code> 的子字符串。</p><p><code>void backtracking(const string&amp; s, int startIndex)</code>中使用<code>const</code>的原因：</p><ol><li><strong>防止修改</strong>：<code>const</code> 关键字确保 <code>s</code> 字符串在 <code>backtracking</code> 函数中不会被修改。这是一种安全措施，可以防止函数意外地更改输入数据，从而保持数据的完整性。在处理函数参数时，尤其是在不应该或不需要修改输入的情况下，使用 <code>const</code> 可以提供这种保护。</li><li><strong>接口设计</strong>：在函数原型中使用 <code>const</code> 声明参数可以<strong>向函数的用户清楚地表明这个参数是用来输入数据的，不应该被函数改变</strong>。这有助于提高代码的可读性和可维护性，使得其他开发者更容易理解每个函数的作用和行为。</li></ol><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39.组合总和"></a>39.组合总和</h3><p>本题是集合里元素可以用无数次，那么和组合问题的差别，其实仅在于<code>startIndex</code>上的控制。本题若是想不重不漏，则下一层遍历的起始位置应该与上一层取出的数相同。而对于组合问题，下一层遍历的起始位置应该是上一层取出的数的下一个（因为组合问题中的元素不能重复使用）。据此，我写出了以下的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> s, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (s == target)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; candidates.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            s += candidates[i];</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(candidates, target, s, i);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            s -= candidates[i];</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="40-组合总和II-1"><a href="#40-组合总和II-1" class="headerlink" title="40.组合总和II"></a>40.组合总和II</h3><p>本题我能顺畅地写出不加去重的版本，如下所示。但对去重没有思路。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> s, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt; target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s == target) </span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; candidates.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            s += candidates[i];</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(candidates, target, s, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            s -= candidates[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>对以下测试样例会出现报错：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">candidates =</span><br><span class="line">[10,1,2,7,6,1,5]</span><br><span class="line">target =</span><br><span class="line">8</span><br><span class="line">Output</span><br><span class="line">[[1,2,5],[1,7],[1,6,1],[2,6],[2,1,5],[7,1]]</span><br><span class="line">Expected</span><br><span class="line">[[1,1,6],[1,2,5],[1,7],[2,6]]</span><br></pre></td></tr></table></figure></p><p>很明显，上述代码是需要去重的。</p><h3 id="131-分割回文串-1"><a href="#131-分割回文串-1" class="headerlink" title="131.分割回文串"></a>131.分割回文串</h3><p>拿到本题，我没有思路，因为没有做过分割问题，直接看卡尔的讲解。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="39-组合总和-1"><a href="#39-组合总和-1" class="headerlink" title="39.组合总和"></a>39.组合总和</h3><p>本题与组合问题的区别：集合中的元素可以重复选取，组合中元素的数量不加限定。集合中都是正整数（若有0，则会进入死循环），且集合中没有重复的元素（这意味着不用做去重的操作）。</p><p>本题通过和来限制树的深度，而组合问题通过组合中元素的数量来限制树的深度。本题的树形结构如下所示：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-05-03_08-36-04.png?raw=true" alt="Snipaste_2024-05-03_08-36-04.png"></p><p>由于集合中的元素可以重复使用，因此下一层的集合中应该包括本层选取的元素。现在开始写本题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用sum表示组合的和，也可以不用sum，让target不断做减法，直到target == 0</span></span><br><span class="line"><span class="comment">// startIndex用于设置下一层递归的起点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidate, <span class="type">int</span> target, <span class="type">int</span> sum, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum == target)</span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索的逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; candidate.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(candidate[i]);</span><br><span class="line">        sum += candidate[i];</span><br><span class="line">        <span class="comment">// 递归，注意下一层的startIndex是从i开始，因为集合中的元素可以重复选取</span></span><br><span class="line">        <span class="built_in">backtracking</span>(candidate, target, sum, i);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        sum -= candidate[i];</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码和回溯算法的模板是类似的。本题依然可以做剪枝的操作。具体来说，是对for循环进行剪枝。对<code>candidate</code>数组进行排序后，若某个分支的和大于target，那么就没必要对其后面的分支进行搜索了。加入剪枝操作的完整代码如下所示（注意添加了注释的部分，就是实现剪枝的具体代码）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> s, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == target)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剪枝操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; candidates.<span class="built_in">size</span>() &amp;&amp; s + candidates[i] &lt;= target; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            s += candidates[i];</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(candidates, target, s, i);</span><br><span class="line">            s -= candidates[i];</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line">        <span class="built_in">backtracking</span>(candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>剪枝操作总结：<strong>对总集合排序之后，如果下一层的sum（就是本层的 sum + candidates[i]，相当于把下一层组合可能的sum从小到大扫了过去）已经大于target，就可以结束本轮for循环的遍历</strong>。</p><ul><li><p>时间复杂度: $O(n \times 2^n)$，注意这只是复杂度的上界，因为剪枝的存在，真实的时间复杂度远小于此。本题的时间复杂度分析同77. 组合。</p></li><li><p>空间复杂度: $O(target)$</p></li></ul><p><strong>为何是$O(target)$:</strong></p><ol><li><strong>递归栈深度：</strong> 空间复杂度首先取决于递归调用的最大深度，因为这直接影响了调用栈的大小。在组合总和问题中，你可以多次选择同一个数字，直到其和超过目标值 <code>target</code> 或恰好等于 <code>target</code>。最糟糕的情况发生在选择了最小元素直到达到 <code>target</code> 时，这种情况下，递归的最大深度大约是 <code>target / min(candidates)</code>。如果最小的候选数很小，理论上递归的深度可以接近 <code>target</code>。</li><li><strong>路径存储：</strong> 在递归过程中，我们还需要存储当前的组合路径（即当前选取的数字集合）。在最坏的情况下，即当所有选取的数字加起来等于 <code>target</code> 时，路径的长度也可以接近于 <code>target / min(candidates)</code>。尽管路径的具体长度依赖于候选数字的大小，但在分析空间复杂度时，我们考虑最坏情况，即多次选取最小值，使得路径长度和递归深度都接近于 <code>target</code>。</li></ol><h3 id="40-组合总和II-2"><a href="#40-组合总和II-2" class="headerlink" title="40.组合总和II"></a>40.组合总和II</h3><p>本题差别：本题的集合中有重复的元素（之前的所有组合问题的集合中都没重复元素），<strong>不能有重复的组合</strong>。这说明我们要去重。另外，集合中的元素在组合中只能使用一次，这需要用一个变量进行控制。</p><p>一种朴素的想法：用之前的方法搜索组合，搜索出若干组合，其中肯定有重复的。用map或者set进行去重，输出去重后的所有组合。本方法实现起来较麻烦，且特别容易超时。</p><p>接下来介绍在搜索的过程中直接去重的方法：使用过的元素不重复使用。为了讲清楚本题的去重过程，卡尔自创了两个词汇：<strong>树层去重，树枝去重</strong>。去重要考虑到这两个维度。接下来画树形图，从两个维度看如何去重。去重前还需要对集合进行排序。去重需要一个数组<code>used</code>来告诉我们哪些元素使用过，哪些元素没用过。用过的元素的下标在<code>used</code>中对应的值为1，没用过的元素的下标在<code>used</code>中对应的值为0。<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/20230310000918.png?raw=true" alt="20230310000918.png"></p><p>上述树除去<code>used</code>数组外的基本部分，还是下一层第一个取的数是上一层取的数往后挪一位（即<code>backtracking(candidates, target, s, i + 1)</code>）。这样的目的是避免重复。对于树枝（树往深度方向走），是可以重复取值的，因为取的是一个集合中不同位置的数值相同的元素。对于树层（同一层树往横向走），不可以重复取值，必然会与之前的某个组合重复。对集合排序的目的就是将值相邻的元素放在一起，若同一层的两个分支的值相同，那么靠左边的分支会包含靠右边的分支的所有情况。<strong>因此去重的关键在于树层去重</strong>。具体的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本代码的重点在于树层去重的过程</span></span><br><span class="line"><span class="comment">// used数组用于标记某个元素是否使用过，用过1，没用过0</span></span><br><span class="line"><span class="comment">// 调用本函数前需要对集合做排序，目的是让值相同的元素在位置上相邻，方便做树层去重</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> targetSum, <span class="type">int</span> sum, <span class="type">int</span> startIndex, vector&lt;<span class="type">int</span>&gt; used)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (sum &gt; targetSum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum == targetSum) </span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">    <span class="comment">// for循环是在同一层遍历各个节点，因此接下来就要写树层去重的逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i ++ ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 树层去重, i &gt; 0的目的是让i - 1 &gt;= 0，也可以写作i &gt; startIndex</span></span><br><span class="line">        <span class="comment">// used[i - 1] == 0对应于上面树的情况，就是第1个1没用，直接用了第2个1，此时重复读取，需要树层去重</span></span><br><span class="line">        <span class="comment">// 若nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == 1，则说明是树枝的状态，由于不需要树枝去重，所以此时不需要去重</span></span><br><span class="line">        <span class="comment">// 后续在回溯算法中遇到去重问题并使用used数组时，基本都是这种写法</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; startIndex &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 收集元素</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        used[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums, targetSum, sum, i + <span class="number">1</span>, used);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        sum -= nums[i];</span><br><span class="line">        used[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用<code>used</code>数组进行去重，也可以用<code>startIndex</code>进行去重，这里不再深入讲解。用<code>startIndex</code>去重比较抽象，因此理解用<code>used</code>数组去重即可，更易于理解且通用。本题的关键在于理解去重的思路。</p><p>本题的完整代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> s, <span class="type">int</span> startIndex, vector&lt;<span class="type">int</span>&gt; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == target) </span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; candidates.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 树层去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            s += candidates[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(candidates, target, s, i + <span class="number">1</span>, used);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">            s -= candidates[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// used数组用于标记candidates数组中的元素是否使用过，因此used数组大小应该与candidates数组大小保持相同</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">used</span><span class="params">(candidates.size(), <span class="number">0</span>)</span></span>; </span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>()); <span class="comment">// 别忘记排序</span></span><br><span class="line">        <span class="built_in">backtracking</span>(candidates, target, <span class="number">0</span>, <span class="number">0</span>, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>时间复杂度: $O(n \times 2^n)$。同77.组合和39.组合总和。<br>空间复杂度：$O(n)$。原因：树的最大深度为n（同<code>candidates</code>数组的长度）。</p><h3 id="131-分割回文串-2"><a href="#131-分割回文串-2" class="headerlink" title="131.分割回文串"></a>131.分割回文串</h3><p>aab。有两种分割方案：aa|b和a|a|b。本题要求我们返回所有的分割方案。如何使用回溯算法解决这个问题？</p><p>分割问题和组合问题非常相似。例如abcdef，对组合问题，如果选择了a，则在bcdef中选择下一个字母；如果选择了b，则在cdef中选择下一个字母。同理，对于分割问题，如果分割了a，则接下来分割bcdef。再分割b，则接下来分割cdef。接下来画分割问题的树形结构。</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.jpg?raw=true" alt="131.分割回文串.jpg"></p><p>切割线到了字符串的末尾，则切割完毕。结果都在叶子节点。画树形结构较为简单，具体的代码实现中有几个难点，现在开始写具体的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; path;</span><br><span class="line">vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传入的变量类型是const string，再加上引用</span></span><br><span class="line"><span class="comment">// startIndex控制下一次切割的位置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 切割线到字符串的末尾，则终止</span></span><br><span class="line">    <span class="comment">// 切割线用startIndex表示</span></span><br><span class="line">    <span class="keyword">if</span> (startIndex &gt;= s.<span class="built_in">size</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将判断是否是回文的逻辑放入单层搜索的逻辑中</span></span><br><span class="line">        <span class="comment">// 因此终止条件中的path都是符合回文条件的</span></span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索的逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如何用代码表示切割出的子串</span></span><br><span class="line">        <span class="comment">// 切割的子串：[startIndex, i]，左闭右闭的区间</span></span><br><span class="line">        <span class="comment">// 用于判断是否回文的函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPalindrome</span>(s, startIndex, i)) <span class="comment">// 传入字符串，子串的起始位置，子串的终止位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(子串); <span class="comment">// 是回文，则将子串放入path中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(s, i + <span class="number">1</span>); <span class="comment">// 下一层切割点从上一层切割点的下个位置开始，否则会重复</span></span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>isPalindrome</code>函数用双指针算法可以轻松实现。注意本题的两个细节：</p><ul><li><p><code>startIndex</code>是切割线</p></li><li><p>如何表示子串的范围：<code>[startIndex, i]</code></p></li></ul><p>完整的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; path;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断[start, end]是否是回文子串</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start, j = end; i &lt;= j; i ++ , j -- )</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.<span class="built_in">size</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 是回文子串，则将其加入path中</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isPalindrome</span>(s, startIndex, i))</span><br><span class="line">                path.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(startIndex, i - startIndex + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(s, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li><p>时间复杂度: $O(n \times 2^n)$，时间复杂度同77.组合、39.组合总和、40.组合总和II。</p></li><li><p>空间复杂度: $O(n^2)$，原因解释如下：</p><ol><li><strong>递归栈的空间</strong>：最深的递归发生在当字符串每个字符都被分割时，因此递归深度最大为$n$（其中$n$是字符串的长度）。每一层递归需要保存当前索引和路径，这些额外的空间可以认为是常数级别的。</li><li><strong>路径存储空间</strong> (<code>path</code> 和 <code>res</code>):<ul><li><code>path</code> 变量在最坏情况下（每个字符都独立成一个回文串时）会存储$n$个元素。</li><li><code>res</code> 变量存储的是所有可能的分割方案。在极端情况下，如输入字符串完全由相同字符组成（例如 “aaaa”），<strong>分割方案的数量和其中每个方案的长度都可能接近$n$</strong>。但通常来说，我们只计算这个变量直接占用的空间，即指针或引用的空间，这通常也是$O(n^2)$，因为每个回文分割的保存都可能需要一个长度为 的$n$字符串的复制。</li></ul></li><li><strong>辅助空间</strong>：<ul><li>检查回文所用的额外空间是常量级的，不随输入大小变化。</li></ul></li></ol><p>将以上所有考虑结合，整个算法的空间复杂度主要由存储所有分割方案的数组 <code>res</code> 决定。由于每个分割方案可能包含多个字符串，而每个字符串又可能需要$O(n)$的空间，因此在最坏情况下，这部分的空间复杂度为$O(n⋅k)$，其中 $k$是分割方案的数量，这在极端情况下可以达到$O(n^2)$。</p></li></ul><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="39-组合总和-2"><a href="#39-组合总和-2" class="headerlink" title="39.组合总和"></a>39.组合总和</h3><ol><li>本题通过<code>target</code>来限制树的深度，而77. 组合通过组合中元素的个数来限制树的深度。</li><li>本题是集合里元素可以用无数次，那么和组合问题的差别，其实仅在于<code>startIndex</code>上的控制。本题若是想不重不漏，则下一层遍历的起始位置应该与上一层取出的数相同。而对于组合问题，下一层遍历的起始位置应该是上一层取出的数的下一个（因为组合问题中的元素不能重复使用）。</li><li>本题的时间复杂度：$O(n \times 2^n)$，空间复杂度：$O(target)$。</li><li>本题可以进行剪枝操作。具体来说，是对for循环进行剪枝。对<code>candidate</code>数组进行排序后，若某个分支的和大于target，那么就没必要对其后面的分支进行搜索了。体现在代码上，就是对总集合排序之后，如果下一层的sum（就是本层的sum + candidates[i]）已经大于target，就可以结束本轮for循环的遍历。<strong>本题的剪枝不好想，要多加注意</strong>。</li></ol><h3 id="40-组合总和II-3"><a href="#40-组合总和II-3" class="headerlink" title="40.组合总和II"></a>40.组合总和II</h3><ol><li><p>本题的难点：集合有重复元素，但组合不能重复。</p></li><li><p>本题需要对组合去重，但不能在搜索完整棵树后用哈希法去重，容易超时。需要在搜索的过程中去重，这需要用到<code>used</code>数组。其中用过的元素标记为1，没用过的元素标记为0。</p></li><li><p>去重：只需要树层去重（树的同一层若两元素值相同，则右侧的值所在的路径必然被包含在左侧的值所在的路径中），不需要树枝去重（集合中的元素值可以相同，每个元素均可以使用一次，因此不需要对树枝去重）。</p></li><li><p>本题不可忽视的几个细节：</p><ul><li><p>集合需要进行排序，这是为了将值相同的元素放在集合中相邻的位置，便于树层去重</p></li><li><p><code>used</code>数组的大小需要与<code>candidates</code>数组保持相同，因为其是用来标记<code>candidates</code>数组中元素的使用情况的</p></li><li><p>注意树层去重的代码的写法，建议结合实际例子（实现中的图片）进行理解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树层去重</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><ul><li><code>candidates[i] == candidates[i - 1] &amp;&amp; used[i - 1] == 0</code>说明同一树层上相邻的两个元素相同，此时需要进行树层去重</li><li><code>used[i - 1] == 1</code>，说明同一树枝上的<code>candidates[i - 1]</code>被使用过（同一树枝从上往下遍历，未进行回溯，因此<code>candidates[i - 1]</code>始终被标记为被使用过，即<code>used[i - 1] = 1</code>）</li><li><code>used[i - 1] == 0</code>，说明同一树层上的<code>candidates[i - 1]</code>被使用过（同一树层从左往右经历过回溯的过程：先对<code>candidates[i - 1]</code>所在的树枝从上往下遍历，然后回溯，再对<code>candidates[i]</code>所在的树枝从上往下遍历。在回溯的过程中，<code>candidates[i - 1]</code>被重新标记为未被使用过，即<code>used[i - 1] = 0</code>）</li></ul></li></ul></li><li><p>本题的去重代码不好写，同时细节较多需要注意。因此本题容易写错，需要时常复习。</p></li><li><p>后续在回溯算法中遇到去重问题并使用<code>used</code>数组时，基本都是这种写法：<code>if (i &gt; 0 &amp;&amp; candidates[i] == candidates[i - 1] &amp;&amp; used[i - 1] == 0) continue;</code>。</p></li><li><p>本题也可以用<code>startIndex</code>进行去重，但比较难理解，因此不要求掌握。</p></li><li><p>本题可以像39.组合总和一样进行剪枝操作，只需要在for循环中对i加上限制条件：<code>s + candidates[i] &lt;= target</code>即可。</p></li></ol><h3 id="131-分割回文串-3"><a href="#131-分割回文串-3" class="headerlink" title="131.分割回文串"></a>131.分割回文串</h3><ol><li><p>首先，切割问题其实本质和组合问题是相同的。</p><p>组合问题：选取一个a之后，在bcdef中再去选取第二个，选取b之后在cdef中再选取第三个…..。接着选取一个b后，再从cdef中再去选取第二个，以此类推。</p><p>切割问题：切割一个a之后，在bcdef中再去切割第二段，切割b之后在cdef中再切割第三段…..。接着从b那里切下去，在cded中再去切割第二段，以此类推。</p><p>可以观察本题的树形结构图，能够更加直观地理解切割问题和组合问题的相似。</p></li><li><p>什么是切割线？</p><p>递归参数需要传入<code>startIndex</code>，表示下一轮递归遍历的起始位置，这个<code>startIndex</code>就是切割线。</p></li><li><p>终止条件：切割线<code>startIndex</code>移动到了字符串的末尾，即<code>startIndex &gt;= s.size()</code></p></li><li><p>如何截取子串？<code>[startIndex, i]</code>之间的字符串就是子串。用<code>substr</code>函数截取即可。需要判断子串是否是回文串，是则放入<code>path</code>中，不是则<code>continue</code>。</p></li><li><p>使用最简单的双指针算法即可写出判断字符串是否是回文串的函数。</p></li><li><p>本题的空间复杂度$O(n^2)$。是极端情况下的空间复杂度，原因参见本题的实现部分。</p></li><li><p>从主函数传入的参数，在定义其他函数时若需要这个参数，则需要将其设置为<code>const</code>类型。目的是防止其他函数对这个参数的修改，同时向函数的用户清楚地表明这个参数是用来输入数据的。不加<code>const</code>不影响代码的正常运行，但加了<code>const</code>后代码更加规范。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E</summary>
      
    
    
    
    <category term="算法（回溯算法）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="组合问题" scheme="http://example.com/tags/%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/"/>
    
    <category term="剪枝操作" scheme="http://example.com/tags/%E5%89%AA%E6%9E%9D%E6%93%8D%E4%BD%9C/"/>
    
    <category term="分割问题" scheme="http://example.com/tags/%E5%88%86%E5%89%B2%E9%97%AE%E9%A2%98/"/>
    
    <category term="去重" scheme="http://example.com/tags/%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>Day 25 Leetcode 216, 17</title>
    <link href="http://example.com/2024/05/02/Day-25-Leetcode-216-17/"/>
    <id>http://example.com/2024/05/02/Day-25-Leetcode-216-17/</id>
    <published>2024-05-02T01:58:19.000Z</published>
    <updated>2024-05-03T03:54:37.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html">216.组合总和III</a><br><a href="https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html">17.电话号码的字母组合</a></p><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="216-组合总和III"><a href="#216-组合总和III" class="headerlink" title="216.组合总和III"></a>216.组合总和III</h3><p>针对本题，我沿用上题77. 组合的代码，只是在终止条件中添加了条件：<code>sum(path) == n</code>，并在单层搜索逻辑中将终止条件改为<code>i = 9</code>，即可解决本题。据此，我独立写出了本题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(vector&lt;<span class="type">int</span>&gt; path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; path.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            s += path[i];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k &amp;&amp; <span class="built_in">sum</span>(path) == n)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= <span class="number">9</span>; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(k, n, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题应该也是可以进行剪枝优化的。首先的要求当然还是k个数，因此i最大只能取到<code>9 - k + path.size() + 1</code>，即<code>10 - k + path.size()</code>。但这样会导致TLE（超时），原因尚不清楚。直接看卡尔的讲解。</p><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h3><p>本题应该还是属于组合问题的范畴。先尝试画出本题的树形结构。相当于每个数字对应三个字母，第一个数字对应的三个字母和第二个数组对应的三个字母间进行组合。若有n个数字，则有3n个字母，放入一个<code>string a</code>中，第一个字母从<code>a[0]-a[2]</code>中取，第二个字母从<code>a[3]-a[5]</code>中取，以此类推。相当于依然是一个组合问题，只不过每一层递归for循环的开始和结束是不固定的，需要用上述规则进行更新。据此，我尝试独立写出本题的代码框架：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    string path;</span><br><span class="line">    string all;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将digits按照数字和字母间的对应关系转换为all字符串</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transfer</span><span class="params">(string digits)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: digits)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;2&#x27;</span>) all += <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;3&#x27;</span>) all += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;4&#x27;</span>) all += <span class="string">&quot;ghi&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;5&#x27;</span>) all += <span class="string">&quot;jkl&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;6&#x27;</span>) all += <span class="string">&quot;mno&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;7&#x27;</span>) all += <span class="string">&quot;pqrs&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;8&#x27;</span>) all += <span class="string">&quot;tuv&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> all += <span class="string">&quot;wxyz&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string digits, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == digits.<span class="built_in">size</span>()) res.<span class="built_in">push_back</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= endIndex; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path += all.<span class="built_in">substr</span>(startIndex, endIndex);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(digits, startIndex, endIndex);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path -= all.<span class="built_in">substr</span>(startIndex, endIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>遇到的难点：<code>startIndex</code>和<code>endIndex</code>不好确定，因为部分数字不止对应三个字母。直接看卡尔的讲解。果然涉及字符串的题目都不好做啊。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="216-组合总和III-1"><a href="#216-组合总和III-1" class="headerlink" title="216.组合总和III"></a>216.组合总和III</h3><p>[1, 9]。和为n，个数为k的所有组合。本题和上题77. 组合的区别：限制和为n，集合是固定的（1-9），因此相当于在77. 组合的基础上加了一个和的限制。组合不强调元素间的顺序，排列强调元素间的顺序。暴力做法，当k=2时，两层for循环遍历1-9，找到两个相加等于n的数。暴力的想法代码没法写，所有要用回溯算法。回溯算法也是暴力的方式，只不过回溯算法通过递归的方式帮助我们控制for循环的嵌套层数，递归n层即相当于模拟了n层嵌套的for循环。</p><p>本题的树形结构如下所示：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-05-02_03-55-06.png?raw=true" alt="Snipaste_2024-05-02_03-55-06.png"></p><p>树的深度为k，树的宽度是当前层的集合中的元素的个数。现在来写具体的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum为当前路径已有的和, 将其与targetSum(即n)做一个比较，相等即符合题目的要求</span></span><br><span class="line"><span class="comment">// 本题的startIndex用途同77. 组合中的startIndex，初始值为1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> targetSum, <span class="type">int</span> k, <span class="type">int</span> sum, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k)</span><br><span class="line">        <span class="keyword">if</span> (targetSum == sum)</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索的逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= <span class="number">9</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        sum += i;</span><br><span class="line">        path.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="built_in">backtracking</span>(targetSum, k, sum, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        sum -= i;</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIndex, <span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k &amp;&amp; sum == n)</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= <span class="number">9</span>; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            sum += i;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(k, n, i + <span class="number">1</span>, sum);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            sum -= i;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(k, n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来对上述代码进行剪枝优化。第一个剪枝在于满足targetSum的要求。剪枝代码放在终止条件之前：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sum &gt; targetSum)</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>还有一个剪枝（满足集合中元素个数的要求），和77.组合中的剪枝是相同的。当前组合中有<code>path.size()</code>个元素，还需要<code>k - path.size()</code>个元素，因此i的最大起始位置为<code>9 - (k - path.size()) + 1</code>。因此：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= <span class="number">9</span> - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>; i ++ )</span><br></pre></td></tr></table></figure></p><p>加上完整的剪枝优化后的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIndex, <span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 剪枝操作1</span></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; n) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k &amp;&amp; sum == n)</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= <span class="number">9</span> - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>; i ++ ) <span class="comment">// 剪枝操作2</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            sum += i;</span><br><span class="line">            <span class="comment">// if (sum &gt; n) return;也可以放在此处</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(k, n, i + <span class="number">1</span>, sum);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            sum -= i;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(k, n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我发现，若仅仅进行剪枝操作2，但不进行剪枝操作1，程序就会报错：TLE。</p><p>我还发现，尽管<code>if (sum &gt; n) return;</code>放在<code>sum += i</code>之后，程序可以通过测评。但正统的写法应当为在剪枝前，先把回溯给做了，否则可能会漏掉满足要求的组合（程序没有进行回溯，就试图去寻找新的满足要求的组合了）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当然这个剪枝也可以放在调用递归之前，只不过要记得把回溯操作给做了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= <span class="number">9</span> - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>; i++) &#123; </span><br><span class="line">    <span class="comment">// 处理节点</span></span><br><span class="line">    sum += i; </span><br><span class="line">    path.<span class="built_in">push_back</span>(i); </span><br><span class="line">    <span class="keyword">if</span> (sum &gt; targetSum) &#123; <span class="comment">// 剪枝操作</span></span><br><span class="line">        sum -= i; <span class="comment">// 剪枝之前先把回溯做了</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>(); <span class="comment">// 剪枝之前先把回溯做了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="built_in">backtracking</span>(targetSum, k, sum, i + <span class="number">1</span>); </span><br><span class="line">    <span class="comment">// 回溯</span></span><br><span class="line">    sum -= i; </span><br><span class="line">    path.<span class="built_in">pop_back</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题的时间和空间复杂度同77.组合的时空复杂度。</p><h3 id="17-电话号码的字母组合-1"><a href="#17-电话号码的字母组合-1" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h3><p>电话拨号盘，每个数字代表一个字符串。首先需要做映射。将输入的字符串（一串数字）映射为对应的字符串。可以用map或者二维数组做映射，这里使用二维数组。数组中的每个元素是字符串。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string letterMap[<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">&quot; &quot;</span>, <span class="comment">// 0</span></span><br><span class="line">    <span class="string">&quot; &quot;</span>, <span class="comment">// 1</span></span><br><span class="line">    abc, <span class="comment">// 2</span></span><br><span class="line">    def, <span class="comment">// 3</span></span><br><span class="line">    ghi, <span class="comment">// 4</span></span><br><span class="line">    jkl, <span class="comment">// 5</span></span><br><span class="line">    mno, <span class="comment">// 6</span></span><br><span class="line">    pqrs, <span class="comment">// 7</span></span><br><span class="line">    tuv, <span class="comment">// 8</span></span><br><span class="line">    wxyz, <span class="comment">// 9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样拿到<code>digits</code>中的数字，将其作为下标放入字符串，即可得到数字对应的字符串（举例：<code>letterMap[2] = &quot;abc&quot;</code>）。</p><p>暴力做法：输入两个数字，则要进行两重for循环。输入n个数字，则要进行n重for循环。此时想到用回溯算法进行暴力求解。回溯算法可通过递归的方式实现对for循环的嵌套。以输入2，3为例，尝试画出本题的树形结构：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-05-02_22-19-15.png?raw=true" alt="Snipaste_2024-05-02_22-19-15.png"></p><p>结果就在树形结构的叶子节点中。树的深度是输入数字的个数，树的宽度由每一个数字对应的字符串的长度控制。现在尝试写本题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">string s; <span class="comment">// 用于存储单个结果</span></span><br><span class="line">vector&lt;string&gt; res; <span class="comment">// 收获结果集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index用于标识传入的字符串digits在当前递归中遍历到哪一个字符（实际上是数字）了</span></span><br><span class="line"><span class="comment">// startIndex一般用于一个集合中求组合，避免得到重复的组合</span></span><br><span class="line"><span class="comment">// 本题是在多个集合中各取一个元素出来做组合，因此不需要startIndex来帮助控制集合中之前遍历过哪些元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string digits, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// index指向digits的最后一位的下一位，才终止。若index指向digits的最后一位，其后应该还有处理最后一位的逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (index == digits.<span class="built_in">size</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(s); <span class="comment">// 收获结果</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">    <span class="comment">// 取出digits中的数字</span></span><br><span class="line">    <span class="type">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 字符转换为数字</span></span><br><span class="line">    <span class="comment">// 找出digit对应的字符串</span></span><br><span class="line">    string letter = letterMap[digit];</span><br><span class="line">    <span class="comment">// 遍历digit对应的字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; letter.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        s.<span class="built_in">push_back</span>(letter[i]);</span><br><span class="line">        <span class="comment">// 下一层递归，index后移一位</span></span><br><span class="line">        <span class="built_in">backtracking</span>(digits, index + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        s.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题看似复杂，但画图理解后逻辑清晰，代码也不长。</p><p>可以将代码写得更简洁，递归函数传入三个参数：<code>void backtracking(string digits, int index, string s)</code>，然后单层搜索逻辑的三行代码写成一行：<code>backtracking(digits, index + 1, s + letter[i]);</code>。<code>s</code>的值本身并没有改变，这就是将回溯的过程隐藏在参数中了。</p><p>本题完整可运行的程序如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string s; <span class="comment">// 存储单个组合</span></span><br><span class="line">    vector&lt;string&gt; res; <span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储数字和字符串之间的映射关系</span></span><br><span class="line">    vector&lt;string&gt; letterMap = &#123;</span><br><span class="line">        <span class="string">&quot; &quot;</span>, <span class="comment">// 0 </span></span><br><span class="line">        <span class="string">&quot; &quot;</span>, <span class="comment">// 1</span></span><br><span class="line">        <span class="string">&quot;abc&quot;</span>, <span class="comment">// 2</span></span><br><span class="line">        <span class="string">&quot;def&quot;</span>, <span class="comment">// 3</span></span><br><span class="line">        <span class="string">&quot;ghi&quot;</span>, <span class="comment">// 4</span></span><br><span class="line">        <span class="string">&quot;jkl&quot;</span>, <span class="comment">// 5</span></span><br><span class="line">        <span class="string">&quot;mno&quot;</span>, <span class="comment">// 6</span></span><br><span class="line">        <span class="string">&quot;pqrs&quot;</span>, <span class="comment">// 7</span></span><br><span class="line">        <span class="string">&quot;tuv&quot;</span>, <span class="comment">// 8</span></span><br><span class="line">        <span class="string">&quot;wxyz&quot;</span> <span class="comment">// 9</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index用于标记当前层遍历到了digits中的哪个位置</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string digits, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (index == digits.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 这个return不能去掉，否则程序会报错</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="type">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 取出当前层的数字</span></span><br><span class="line">        string letter = letterMap[digit]; <span class="comment">// 取出当前层需要遍历的字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; letter.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            s.<span class="built_in">push_back</span>(letter[i]);</span><br><span class="line">            <span class="comment">// 向下一层递归</span></span><br><span class="line">            <span class="built_in">backtracking</span>(digits, index + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            s.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 这个return可要可不要，但为了和回溯法模板保持一致，因此还是加上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">empty</span>()) <span class="keyword">return</span> res; <span class="comment">// 必须加上这句话，特判digits为空的情况</span></span><br><span class="line">        <span class="built_in">backtracking</span>(digits, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>简化后的写法（隐藏回溯逻辑）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string s;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; all = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;def&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ghi&quot;</span>,</span><br><span class="line">        <span class="string">&quot;jkl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mno&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pqrs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tuv&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string digits, <span class="type">int</span> index, string s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == digits.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="type">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        string letter = all[digit];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; letter.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="built_in">backtracking</span>(digits, index + <span class="number">1</span>, s + letter[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">empty</span>()) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">backtracking</span>(digits, <span class="number">0</span>, s);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>时间复杂度分析</strong></p><p>对于每个按键，电话按键可能对应不同数量的字母：</p><ul><li>按键 2, 3, 4, 5, 6, 8 每个都对应 3 个字母。</li><li>按键 7 和 9 对应 4 个字母。</li></ul><p>如果输入的字符串中有 <code>m</code> 个按键对应 4 个字母，<code>n</code> 个按键对应 3 个字母，那么所有可能的组合数量是 <code>4^m * 3^n</code>。因为这是回溯算法的常见分析模式，每一步选择会进入下一层递归，直到达到输入字符串的长度。在每一层递归中，根据当前按键可能的字母数量，我们有不同的选择分支。</p><p>因此，整个算法需要考虑的总路径数或调用次数是 <code>O(4^m * 3^n)</code>。</p><p><strong>空间复杂度分析</strong></p><p>空间复杂度主要由两部分构成：</p><ol><li><p><strong>递归调用栈</strong>：最大深度为输入字符串的长度，即 <code>m + n</code>。然而，这通常认为是 O(m+n)，不是主要的空间消耗部分。</p></li><li><p><strong>输出存储空间</strong>：存储所有可能组合的空间，这是算法的主要空间消耗。每个组合都是一个新的字符串，因此需要的总空间是与生成的组合数量相同，即 <code>O(4^m * 3^n)</code>。</p></li></ol><p>如果空间复杂度中不计入输出存储空间，则空间复杂度是O(m+n)。若计入，则是O(4^m * 3^n)。</p><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="216-组合总和III-2"><a href="#216-组合总和III-2" class="headerlink" title="216.组合总和III"></a>216.组合总和III</h3><ol><li>本题的思路和77.组合的完全相同，只不过加了限制条件：组合中所有元素之和为n。</li><li>本题有两种写法。第一种是我在初次尝试中的写法，最大限度地沿用了77.组合的代码，只不过另外实现了一个sum函数来统计path数组中所有元素之和，并在终止条件中与n进行比较。这种写法存在一个巨大的缺陷，就是无法进行剪枝。因为只有实现了剪枝操作1：<code>if (sum &gt; n) return;</code>后，才能实现剪枝操作2：<code>for (int i = startIndex; i &lt;= 9 - (k - path.size()) + 1; i ++ )</code>，而写法1的递归函数的参数中没有<code>sum</code>，因此剪枝操作1必然无法实现，这导致剪枝操作2也无法实现（强行添加剪枝操作2，程序直接报错TLE（超时））。</li><li>本题的第二种写法更为正统，递归函数传入的参数中包含了<code>sum</code>，即当前path数组中元素之和。需要特别注意的是，处理节点的过程和回溯过程是一一对应的，<code>sum</code>在处理有加，在回溯就要有减。</li><li>基于本题的第二种写法，可以对代码进行两种剪枝操作。剪枝操作1：<code>if (sum &gt; n) return;</code>。该操作可以放在终止条件之前，也可以放在单层搜索逻辑中处理节点时对<code>sum</code>的计算之后（具体细节详见实现部分，建议不要纠结这里的细节）。剪枝操作2：<code>for (int i = startIndex; i &lt;= 9 - (k - path.size()) + 1; i ++ )</code>。这和77.组合中的剪枝操作完全相同。</li><li>只有实现了剪枝操作1后，才能实现剪枝操作2。若单独实现剪枝操作2，会导致程序超时（TLE）。</li></ol><h3 id="17-电话号码的字母组合-2"><a href="#17-电话号码的字母组合-2" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h3><ol><li><p>本题的<strong>两大创新之处</strong>：<code>index</code>和<code>letterMap</code>。前者用于表示遍历<code>digits</code>遍历到了哪一位，后者用于表示数字和字符串之间的映射关系。</p></li><li><p>画出树形结构对于解决回溯法问题的帮助：确定树形结构的宽度，可以确定单层搜索逻辑中的for循环怎么写；确定树形结构的深度，可以确定单层搜索逻辑中的递归部分怎么写。</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-05-02_22-19-15.png?raw=true" alt="Snipaste_2024-05-02_22-19-15.png"></p><p>在本题中，树的当前层中的各个节点是<code>letters</code>中的各个元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> digit = digits[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">string letters = letterMap[digit];</span><br></pre></td></tr></table></figure><p>树的深度是<code>digits.size()</code>，可通过<code>index + 1</code>不断向树的下一层递归。</p></li><li><p>如果输入的字符串中有 <code>m</code> 个按键对应 4 个字母，<code>n</code> 个按键对应 3 个字母，则本题的时间复杂度和空间复杂度都是$O(4^m \times 3^n)$。</p></li><li><p>本题看题意较为麻烦，但如果能画出树形结构，同时学会使用<code>vector&lt;string&gt;</code>来存储数字和字符串之间的映射关系，然后通过<code>index</code>来取出特定数字对应的字符串，就可以写出简明而清晰的代码。</p></li><li><p>写本题代码时，最好参照回溯法的模板代码，不要省略return，否则可能导致报错。另外，在主函数中要特判<code>digits</code>为空的情况。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E</summary>
      
    
    
    
    <category term="算法（回溯算法）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="组合问题" scheme="http://example.com/tags/%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/"/>
    
    <category term="剪枝操作" scheme="http://example.com/tags/%E5%89%AA%E6%9E%9D%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Day 24 Theory of Backtracking Algorithms, Leetcode 77</title>
    <link href="http://example.com/2024/05/01/Day-24-Theory-of-Backtracking-Algorithms-Leetcode-77/"/>
    <id>http://example.com/2024/05/01/Day-24-Theory-of-Backtracking-Algorithms-Leetcode-77/</id>
    <published>2024-05-01T02:03:05.000Z</published>
    <updated>2024-05-02T02:04:32.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">理论基础</a><br><a href="https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html">77. 组合</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><h4 id="什么是回溯法"><a href="#什么是回溯法" class="headerlink" title="什么是回溯法"></a>什么是回溯法</h4><p>回溯算法比较抽象，因此较难。</p><p><strong>回溯和递归是相辅相成的，有递归就会有回溯</strong>。回溯的逻辑一般隐藏在递归函数的下面。二叉树在递归的过程中会有回溯的操作，只不过有的题目显式地用到了回溯，有的题目没有显式地用回溯。<strong>回溯函数一般指递归函数</strong>，因为没有一个函数可以完全用来回溯。</p><p>回溯法的效率：<strong>回溯法是纯暴力的搜索</strong>，并不是一个高效的算法。如果想让回溯法高效一些，可以加一些剪枝的操作。部分题能够用暴搜做出来就不错了，用层层嵌套的for循环都根本搜不出来，要依靠回溯法才能把所有结果搜出来。</p><h4 id="使用原因以及解决的问题"><a href="#使用原因以及解决的问题" class="headerlink" title="使用原因以及解决的问题"></a>使用原因以及解决的问题</h4><p>回溯法能解决的问题：</p><ul><li>组合问题。比如给定集合1234，找出长度为2的组合。</li><li>排列问题。<strong>排列强调元素的顺序，而组合不强调元素的顺序</strong>。比如集合12，求其组合，只有12一种组合；但若求其排列，有12/21两种排列。</li><li>子集问题。比如给定集合1234，问该集合有多少子集。</li><li>切割问题。比如给一个字符串，问有几种切割方式。或者加一些特定的条件，比如给一个字符串，如何切割才能保证它的子串都是回文子串，问有几种切割方式。</li><li>棋盘问题。比如N皇后、解数独。</li></ul><h4 id="如何理解回溯法"><a href="#如何理解回溯法" class="headerlink" title="如何理解回溯法"></a>如何理解回溯法</h4><p>回溯法特别抽象。想要清晰地了解回溯法，<strong>最好将其抽象为一个图形结构</strong>。<strong>所有的回溯法都可以抽象为一个树形结构，确切的说是N叉树</strong>。原因：回溯就是递归的过程，递归有终止。<strong>N叉树的宽度是在回溯法中处理的集合的大小</strong>，一般用for循环遍历。<strong>树的深度是递归的深度</strong>，因为递归必有终止，递归会层层向上返回。后序讲解具体问题时，都会将<strong>具体问题抽象为对应的树形结构</strong>，方便大家理解。</p><h4 id="回溯模板"><a href="#回溯模板" class="headerlink" title="回溯模板"></a>回溯模板</h4><p>一般来说，回溯法的递归函数都是没有返回值的，即void。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// backtracking为习惯的起名</span></span><br><span class="line"><span class="comment">// 回溯法的参数一般较多，一开始时一般无法确定所有参数，写具体逻辑时遇到想用的参数，再添加参数即可</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件。到终止条件时，一般来说就可以收集结果了</span></span><br><span class="line">    <span class="comment">// 除去子集问题和部分棋盘问题，我们一般在叶子节点收集结果</span></span><br><span class="line">    <span class="comment">// 对于子集问题，则需要在每个节点处收集结果</span></span><br><span class="line">    <span class="keyword">if</span> (终止条件)</span><br><span class="line">    &#123;</span><br><span class="line">        (叶子节点处)收集结果 <span class="comment">// 例如将子集12从数组中放入结果集中</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索的逻辑</span></span><br><span class="line">    <span class="comment">// for循环用于遍历本层集合中的每个元素，对应一个节点的所有子节点</span></span><br><span class="line">    <span class="keyword">for</span> (集合元素)</span><br><span class="line">    &#123;</span><br><span class="line">        处理节点 <span class="comment">// 例如将子集12放进数组中</span></span><br><span class="line">        递归函数 <span class="comment">// 树形结构往深处走</span></span><br><span class="line">        回溯操作 <span class="comment">// 撤销对节点的处理，例如从子集12中弹出2，再加入3，才能得到新的子集13。同理，还需要撤销3加入4，得到14的组合。没有回溯操作，就会一直加入新的元素，就不会求出所有的组合情况。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每道回溯法的题目都有各自的特点，但最终的代码都离不开上述模板的风格。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>后序会用本期视频讲解的理论知识求解具体问题，就可以加深对本期视频讲解的理论知识的理解。</p><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a>77. 组合</h3><p>根据回溯模板，我写下了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res; <span class="comment">// 结果集</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tmp; <span class="comment">// 暂时存储数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> ()</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            tmp.<span class="built_in">push_back</span>(i);</span><br><span class="line">            k -- ;</span><br><span class="line">            <span class="comment">// 递归函数</span></span><br><span class="line">            <span class="built_in">backtracking</span>(n, k);</span><br><span class="line">            <span class="comment">// 回溯操作</span></span><br><span class="line">            k ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>尽管和最终版本的代码已经非常接近，但是我不知道怎么写终止条件，也无法确定传入的参数是否齐全。先来看卡尔的讲解。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="77-组合-1"><a href="#77-组合-1" class="headerlink" title="77. 组合"></a>77. 组合</h3><p>组合中的元素是无序的。给定集合1234，找出所有大小为2的组合。有12，13，14；23，24；34。暴力做法：两层for循环。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++ )</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j ++ )</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p><p>两层for循环即可求解k=2下的所有组合。三层for循环即可求解k=3下的所有组合。若k很大，则要嵌套很多层for循环。因此直接用for循环是无法解决本题的，就需要用到回溯算法。</p><p>回溯算法也是一个纯暴力的方式，模拟的也是嵌套for循环的过程。回溯算法是利用递归来控制有多少层for循环。递归里的每一层都是一个for循环。<strong>嵌套n层for循环即相当于递归n层</strong>。</p><p>所有的回溯法都可以抽象为一个树形结构。以本题为例，画回溯算法搜索的过程。</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-05-01_19-07-25.png?raw=true" alt="Snipaste_2024-05-01_19-07-25.png"></p><p>上述树形结构的叶子节点就是要求的所有组合。第一次取数是从集合中依次取，第二次取数是取第一次取的数的后面一个数，这样才能保证不重不漏。通过传入参数<code>startIndex</code>来实现这点，即控制每次搜索的起始位置。</p><p>二叉树的题目有递归三部曲，回溯算法也有回溯三部曲（回溯函数即递归函数，二者不作区分）：</p><ul><li>递归函数的参数和返回值，返回值一般为void</li><li>确定递归的终止条件</li><li>单层搜索（递归）的逻辑</li></ul><p>根据回溯三部曲对着上述图示写组合问题的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个组合存放在一个一维数组中，名为path</span></span><br><span class="line"><span class="comment">// 还需要一个二维数组res，将所有集合放在一起，作为结果集返回</span></span><br><span class="line"><span class="comment">// 上述两个数组可以作为加引用的参数，也可以作为全局变量。但参数不宜过多，会影响代码的可读性，因此将它们放入全局变量中</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// n是集合中数的个数，k是组合的大小</span></span><br><span class="line"><span class="comment">// startIndex的作用：本层递归结束后，下一层递归如何知道从哪个数开始取，就要用到startIndex</span></span><br><span class="line"><span class="comment">// startIndex是本层递归搜索的起始位置，初始时为1，即从1开始搜索</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件，到叶子节点时，收集结果并返回</span></span><br><span class="line">    <span class="comment">// path的大小为k，说明找到了大小为k的组合，将之放入结果集并返回</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k)</span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path); <span class="comment">// 收集结果</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层搜索的逻辑</span></span><br><span class="line">    <span class="comment">// 每层都是一个for循环，起始点从startIndex开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = startIndex, i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理节点</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="comment">// 递归过程, i + 1才能让下一层递归从下一个节点开始搜索</span></span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 回溯过程。不可以一直往里加，得到一个结果后需要弹出旧的元素</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>时间复杂度：$O(n \times 2^n)$<br>空间复杂度：$O(n)$<br>原因：</p><ul><li><p>对时间复杂度</p><ul><li><p><strong>解空间的大小</strong></p><p>对于组合问题，如生成一个集合的所有子集，解空间包含了该集合的所有可能子集。对于包含$n$个元素的集合，其子集总数是$2^n$。这是因为每个元素在每个子集中都有出现或不出现两种可能，因此，子集的总数是$2^n$。</p></li><li><p><strong>每个解的生成时间</strong></p><p>虽然生成每个子集看起来很快，但是实际上，为了构建每个子集，可能需要遍历所有元素来决定每个元素是否包含在当前子集中，这需要$O(n)$的时间。因此，对于所有子集，生成时间是每个子集的生成时间与子集总数的乘积，即$O(n \times 2^n)$。</p></li></ul></li><li><p>对空间复杂度<br> 在讨论空间复杂度时，我们通常关注的是算法在执行过程中需要额外分配的空间量。<strong>对于回溯算法来说，主要的空间消耗源于两部分：递归调用的栈空间和用于存储当前解的路径</strong>（在此例中为 path）。以下是详细分析：</p><ul><li><p>递归栈空间<br>在回溯算法中，递归的深度决定了栈空间的使用量。在这个特定的问题中（从 n 中选择 k 个数的组合），递归的最大深度是 k，因为每一层递归对应于选择一个元素，直到选择了 k 个元素。因此，递归栈的空间复杂度是 O(k)。</p></li><li><p>存储当前解的路径空间<br>path 变量用于存储当前的部分解，即已选择的元素集合。因为一次最多选择 k 个元素，所以 path 的最大长度也是 k。因此，存储 path 所需的空间也是 O(k)。</p></li><li><p>结果集 result<br>虽然result用来存储所有可能的组合，其大小可以达到组合数$C(n, k)$，<strong>但在分析空间复杂度时，我们通常不把输出空间计算在内，因为这部分空间是用来存储算法的最终结果，而非算法执行过程中的临时数据</strong>。如果包括result的空间，空间复杂度确实是$O(C(n, k))$，但这不是额外的空间，而是算法结果的必要空间。</p></li></ul></li></ul><p>本题的完整代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res; <span class="comment">// 结果集</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path; <span class="comment">// 存放一个集合</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path); <span class="comment">// 收集结果</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层搜索逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理节点</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 递归函数，下一层搜索从i + 1开始</span></span><br><span class="line">            <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯操作</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本题的代码并不复杂，基本是按照回溯法的模板来的。本题还可以做剪枝。回溯法是一个纯暴力的算法，想优化就要做剪枝。<strong>接着详细讲如何做剪枝，以及回溯算法常见的剪枝套路</strong>。</p><h3 id="组合问题的剪枝操作"><a href="#组合问题的剪枝操作" class="headerlink" title="组合问题的剪枝操作"></a>组合问题的剪枝操作</h3><p>回溯算法是一种纯暴力的算法，优化就是做剪枝，但也改变不了其暴力算法的本质。如何做剪枝操作？</p><p>以n=4, k = 4为例。</p><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-05-01_21-14-10.png?raw=true" alt="Snipaste_2024-05-01_21-14-10.png"></p><p>对取2，取3和取4的分支，可以做剪枝。若不做剪枝，回溯算法会搜索整个树形结构，因此剪枝的效果非常明显。剪枝的代码该怎么写？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剪枝操作在单层搜索逻辑中</span></span><br><span class="line"><span class="comment">// for循环的逻辑在当前层的节点上，i对应于节点的每一个孩子，即for循环遍历了当前节点的所有孩子</span></span><br><span class="line"><span class="comment">// 要对节点的子孩子进行剪枝，因此对for循环的范围里进行优化即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    path.<span class="built_in">push_back</span>(i); <span class="comment">// 处理节点</span></span><br><span class="line">    <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>); <span class="comment">// 沿着当前分支继续往下搜索</span></span><br><span class="line">    path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的具体问题是：如何缩小i的范围？<br>总共要选取k个元素，当前选取了<code>path.size()</code>个元素，还剩下<code>k - path.size()</code>个元素有待选取。因此i至多从<code>n - (k - path.size()) + 1</code>开始。加1的原因是起始位置包括了<code>startIndex</code>。也可以举具体的例子。以<code>n=4, k=3, path.size()=0</code>为例，i至多从2开始枚举（这意味着i可以从1开始枚举，也可以从2开始枚举，但若从3开始枚举，则必然搜索不到大小为3的组合）。因此对上述代码修改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= n - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>; i ++ )</span><br></pre></td></tr></table></figure><p>这样可以确保在搜索的范围中可以找到大小为k的组合。剪枝的操作改动本处即可，代码其他地方不需要做改动。</p><p>上述剪枝操作在回溯算法的剪枝操作中特别常见。<strong>大部分回溯算法的剪枝操作都是在i的范围里做文章，即缩小i的范围</strong>。</p><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="77-组合-2"><a href="#77-组合-2" class="headerlink" title="77. 组合"></a>77. 组合</h3><ol><li>本题的一个直接的想法是用k层for循环暴力解决，然而由于k的大小不确定，有待输入，因此需要用回溯法。回溯算法也是一个纯暴力的方式，模拟的也是嵌套for循环的过程。回溯算法是利用递归来控制有多少层for循环。递归里的每一层都是一个for循环。<strong>嵌套n层for循环即相当于递归n层</strong>。</li><li>所有回溯法的题目都可以抽象为一个树形结构，本题的树形结构参加实现部分。</li><li>基于本题的树形示意图，以及回溯法的模板代码，就可以写出本题的具体代码。需要特别注意的是，本题的递归函数需要传入三个参数，除去n和k外，还需要传入<code>startIndex</code>。这是因为每层递归的起始点都需要在上一层递归起始点的基础上加1，因此需要一个参数来标明当前这层递归的起始点。</li><li>本题可以进行剪枝优化。</li></ol><h3 id="组合问题的剪枝操作-1"><a href="#组合问题的剪枝操作-1" class="headerlink" title="组合问题的剪枝操作"></a>组合问题的剪枝操作</h3><ol><li><p>可以剪枝的地方就在递归中每一层的for循环所选择的起始位置。<strong>如果for循环选择的起始位置之后的元素个数已经不足我们需要的元素个数了，那么就没有必要搜索了</strong>。</p></li><li><p>注意代码中i，就是for循环里选择的起始位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= n; i++) </span><br></pre></td></tr></table></figure></li><li><p>接下来看一下优化过程如下（可以画<strong>线段图</strong>理解）：</p><ul><li>已经选择的元素个数：<code>path.size()</code>;</li><li>还需要的元素个数为: <code>k - path.size()</code>;</li><li>在集合n中至多要从该起始位置: <code>n - (k - path.size()) + 1</code>，开始遍历。若i超过了这个最大的起始位置，则组合中凑不齐k个元素</li></ul><p>为什么有个+1呢，因为包括起始位置，我们要是一个左闭的集合。</p><p>举个例子，<code>n = 4，k = 3</code>， 目前已经选取的元素为0（path.size为0），n - (k - 0) + 1 即 4 - ( 3 - 0) + 1 = 2。从2开始搜索都是合理的，可以是组合[2, 3, 4]。</p></li><li><p>上述剪枝操作在回溯算法的剪枝操作中特别常见。<strong>大部分回溯算法的剪枝操作都是在i的范围里做文章，即缩小i的范围</strong>。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%</summary>
      
    
    
    
    <category term="算法（回溯算法）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="理论基础" scheme="http://example.com/tags/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="组合问题" scheme="http://example.com/tags/%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/"/>
    
    <category term="剪枝操作" scheme="http://example.com/tags/%E5%89%AA%E6%9E%9D%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Day 23 Leetcode 669 108 538 summary</title>
    <link href="http://example.com/2024/04/24/Day-23-Leetcode-669-108-538-summary/"/>
    <id>http://example.com/2024/04/24/Day-23-Leetcode-669-108-538-summary/</id>
    <published>2024-04-24T08:09:27.000Z</published>
    <updated>2024-04-26T09:26:03.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html">669. 修剪二叉搜索树</a><br><a href="https://programmercarl.com/0108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html">108.将有序数组转换为二叉搜索树</a><br><a href="https://programmercarl.com/0538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.html">538.把二叉搜索树转换为累加树 </a><br><a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%80%BB%E7%BB%93%E7%AF%87.html">总结篇 </a></p><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a>669. 修剪二叉搜索树</h3><p>本题据说比增加和删除节点更难，我拿到后没有思路，直接看卡尔的讲解。</p><h3 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h3><p>虽然这是道简单题，但我也没想出来怎么做。</p><h3 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h3><p>本题的基本思路是：累加树中的新节点（除叶子节点外）是其本身加上其右子树的所有节点之和。叶子节点如果是他父节点的左孩子，则值为他的父节点的新值减去原本父节点的值。叶子节点若是他父节点的右孩子，则值为他的父节点的新值加上叶子节点原本的旧值。要计算右子树的值，应当用双指针算法加上中序遍历。</p><p>本题还有另一种思路，更加简单粗暴。直接将二叉搜索树转换为一个递增的数组。然后某个节点的新值就是从其本身到数组末尾的所有元素之和。根据上述原理，我写下了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将二叉搜索树通过中序遍历转换为有序的数组</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;left); <span class="comment">// 左</span></span><br><span class="line">        nums.<span class="built_in">push_back</span>(root-&gt;val); <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;right); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新节点的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sum</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; root-&gt;val)</span><br><span class="line">                root-&gt;val += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过层次遍历，遍历每个节点，依次更新所有节点的值</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traversal</span>(root);</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">sum</span>(node);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>虽然从原理上来说，上述做法应该是没有问题的，但因为并发修改之类的问题，上述代码的实际运行结果和预期就是不同。我搞不清楚为什么，暂且记录下来。直接看卡尔的讲解。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="669-修剪二叉搜索树-1"><a href="#669-修剪二叉搜索树-1" class="headerlink" title="669. 修剪二叉搜索树"></a>669. 修剪二叉搜索树</h3><p>给二叉搜索树，给定范围，在范围内修剪二叉搜索树，使得二叉搜索树中所有节点的数值都在范围内。本题不仅要删除不止一个节点，还要改变树的结构。</p><p>450.删除二叉搜索树中的节点的原理：通过递归，从当前层往上一层返回值，上一层的左/右孩子来接住返回值，达到删除节点的效果。</p><p>常见的误区：常见的错误代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回修剪后二叉树的根节点</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">traversal</span><span class="params">(TreeNode* root, <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 修剪二叉搜索树</span></span><br><span class="line">    <span class="comment">// 当前遍历的节点不在[low, high]的范围内</span></span><br><span class="line">    <span class="comment">// 这样写很明显是错误的，若根节点的两个子节点都返回NULL，那么二叉树就只剩下根节点了，其他节点全部被删除</span></span><br><span class="line">    <span class="comment">// 实际上根节点的两棵子树中都可能有范围内的节点</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &lt; low || root-&gt;val &gt; high) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    root-&gt;left = <span class="built_in">traversal</span>(root-&gt;left, low, high);</span><br><span class="line">    root-&gt;right = <span class="built_in">traversal</span>(root-&gt;right, low, high);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正确的思路</strong>为：若发现某个节点小于范围的左边界，那么该节点的右子树中可能有范围内的节点，因为该节点中右子树的值都要大于该节点的值。因此尽管要删除这个节点，但还需要继续在其右子树中遍历，来挑出其中符合条件的节点。现在来写正确的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回修剪后二叉树的根节点</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">traversal</span><span class="params">(TreeNode* root, <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 本题的终止条件和删除二叉搜索树中的节点的终止条件类似，分类讨论，先发现要删除的节点然后完成删除操作</span></span><br><span class="line">    <span class="comment">// 终止条件1</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 终止条件2</span></span><br><span class="line">    <span class="comment">// root节点的值小于左边界，但其右子树中可能有符合要求的节点，故应该继续向右遍历</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &lt; low)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// root节点的右子树在修剪后的根节点</span></span><br><span class="line">        TreeNode* right = <span class="built_in">traversal</span>(root-&gt;right, low, high);</span><br><span class="line">        <span class="keyword">return</span> right; <span class="comment">// 向上返回该根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 终止条件3</span></span><br><span class="line">    <span class="comment">// root节点的值大于右边界，但其左子树中可能有符合要求的节点，故应该继续向左遍历</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &gt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// root节点的左子树在修剪后的根节点</span></span><br><span class="line">        TreeNode* left = <span class="built_in">traversal</span>(root-&gt;left, low, high);</span><br><span class="line">        <span class="keyword">return</span> left; <span class="comment">// 向上返回该根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑，分别修剪根节点的左右子树，然后将修剪后的左右子树接上去</span></span><br><span class="line">    root-&gt;left = <span class="built_in">traversal</span>(root-&gt;left, low, high);</span><br><span class="line">    root-&gt;right = <span class="built_in">traversal</span>(root-&gt;right, low, high);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root; <span class="comment">// root在终止条件中处理了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题的代码其实不复杂，特别是相比于450.删除二叉搜索树中的节点。那题的终止条件需要分5种情况讨论，本题的终止条件只需要分3种情况讨论。本题也有迭代写法。本题掌握递归法即可。本题代码量不多，但很考察大家对二叉树移除节点和二叉搜索树特性的理解。</p><p>我独立写下了精简注释版本的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件1</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止条件2，root节点的值小于左边界</span></span><br><span class="line">        <span class="comment">// 此时root节点的右子树中依然可能有符合要求的节点在，因此还需对右子树进行修剪</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; low)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* right = <span class="built_in">trimBST</span>(root-&gt;right, low, high);</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止条件3，root节点的值大于右边界</span></span><br><span class="line">        <span class="comment">// 此时root节点的左子树中依然可能有符合要求的节点在，因此还需对左子树进行修剪</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* left = <span class="built_in">trimBST</span>(root-&gt;left, low, high);</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="comment">// 用来接住3个终止条件的返回值</span></span><br><span class="line">        root-&gt;left = <span class="built_in">trimBST</span>(root-&gt;left, low, high);</span><br><span class="line">        root-&gt;right = <span class="built_in">trimBST</span>(root-&gt;right, low, high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题的迭代法代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保root在[low, high]的区间内</span></span><br><span class="line">        <span class="comment">// 以下写法可以避免死循环</span></span><br><span class="line">        <span class="keyword">while</span> (root &amp;&amp; (root-&gt;val &lt; low || root-&gt;val &gt; high))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &lt; low) root = root-&gt;right;</span><br><span class="line">            <span class="keyword">else</span> root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保cur的左子树中没有小于low的节点</span></span><br><span class="line">        <span class="keyword">while</span> (cur)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (cur-&gt;left &amp;&amp; cur-&gt;left-&gt;val &lt; low)</span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;left = cur-&gt;left-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur = root; <span class="comment">// 恢复cur</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接着检查cur的右子树中没有大于high的节点</span></span><br><span class="line">        <span class="keyword">while</span> (cur)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (cur-&gt;right &amp;&amp; cur-&gt;right-&gt;val &gt; high)</span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;right = cur-&gt;right-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>迭代法原理不复杂，但代码非常容易写错，因此不推荐迭代写法。</p><h3 id="108-将有序数组转换为二叉搜索树-1"><a href="#108-将有序数组转换为二叉搜索树-1" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h3><p>要构造的二叉搜索树是平衡二叉树。做这个要求的原因是任何有序数组都能够轻易构造成链式的二叉搜索树。</p><p><strong>构造二叉树的一般思路</strong>：在数组中选取一个中间节点，将数组分为左区间和右区间。递归遍历左区间，构成左子树。递归遍历右区间，构成右子树。</p><p>解题思路：root节点选取为数组中间位置的节点。因为只有这样选才可以保证左右区间中节点的数量相同，构造的二叉树才是平衡二叉树。再根据二叉搜索树的性质：中节点的值大于左子节点，小于右子节点来构造二叉搜索树。构造出的二叉搜索树的结构不唯一。对于数组中有偶数个元素的情况，root节点可以选取为中间偏左那个节点，也可以选取为中间偏右那个节点。代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意引用&amp;。如果每层递归不用引用，就需要在内存空间中重复复制数组，导致程序的性能很差</span></span><br><span class="line"><span class="comment">// 使用引用后，递归遍历时都在同一个内存地址里操作数组</span></span><br><span class="line"><span class="comment">// 区间左右边界的定义很重要，此处对区间的定义是左闭右闭</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件：非法区间</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>; <span class="comment">// 数组下标相加不可能爆内存</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造二叉树的根节点</span></span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[mid]); </span><br><span class="line">    <span class="comment">// 利用左区间构造左子树</span></span><br><span class="line">    root-&gt;left = <span class="built_in">traversal</span>(nums, left, mid - <span class="number">1</span>); <span class="comment">// 因为是左闭右闭的区间，所以right = mid - 1</span></span><br><span class="line">    <span class="comment">// 同理，利用右区间构造右子树</span></span><br><span class="line">    root-&gt;right = <span class="built_in">traversal</span>(nums, mid + <span class="number">1</span>, right); <span class="comment">// 因为是左闭右闭的区间，所以left = mid + 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 区间定义左闭右闭，因此right = nums.size() - 1</span></span><br><span class="line">    TreeNode* root = <span class="built_in">traversal</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本代码并不复杂。本题也可用迭代法实现，但较为复杂。本题优先掌握递归法即可。</p><p>本题的精简版本代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 区间左闭右闭</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造root节点</span></span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[mid]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造左子树</span></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 构造右子树</span></span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(nums, mid + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        TreeNode* root = <span class="built_in">traversal</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="538-把二叉搜索树转换为累加树-1"><a href="#538-把二叉搜索树转换为累加树-1" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h3><p>换个思路：给一个有序的数组，将其变成一个累加数组。<strong>倒序遍历</strong>即可，将前一个节点加到本节点中。倒序遍历有序数组，<strong>本质就是按照右中左的顺序遍历二叉搜索树</strong>。将前一个节点的值加到本节点中，就需要用到<strong>双指针</strong>。pre指针指向前一个节点，cur指针指向当前节点。现在开始写递归法的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> pre = <span class="number">0</span>; <span class="comment">// 记录前一个节点的数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于要遍历整个二叉树，在遍历的过程中去更新节点数值即可，因此不需要返回值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑：右中左</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right); <span class="comment">// 右</span></span><br><span class="line">    cur-&gt;val += pre; <span class="comment">// 中</span></span><br><span class="line">    pre = cur-&gt;val; <span class="comment">// 移动pre</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left); <span class="comment">// 左</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在对二叉搜索树的遍历不够熟悉的情况下，可以将二叉搜索树想象成一个有序的数组。</p><p>将pre定义为指针也是可行的，代码会略微复杂，因为要判断指针是否为空：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;right);</span><br><span class="line">        <span class="comment">// 中</span></span><br><span class="line">        <span class="keyword">if</span> (pre) cur-&gt;val += pre-&gt;val;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traversal</span>(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题用迭代法也可以做，而且是迭代法的模板题，但我用迭代法写本题总是容易写错。因此还是推荐递归法。</p><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="669-修剪二叉搜索树-2"><a href="#669-修剪二叉搜索树-2" class="headerlink" title="669. 修剪二叉搜索树"></a>669. 修剪二叉搜索树</h3><ol><li>本题乍一看非常简单，结果就是掉进常见误区中，即发现一个节点不在区间内，就直接返回NULL。这样的问题在于以该节点为根节点的子树中可能有满足条件的节点。如果直接返回NULL，相当于把可能满足条件的节点一并删除了。</li><li><p>从常见误区中爬出来，又会觉得本题非常难，因为似乎要调整二叉树的结构。其实本题不需要像450.删除二叉搜索树中的节点那样分五种情况讨论来调整二叉树的结构。本题只需要在终止条件中分出三种情况讨论：</p><ul><li>root节点为空，则返回空</li><li>root节点小于区间左边界，则root节点的右子树中可能存在符合要求的节点。此时调用递归函数对root节点的右子树进行修剪，将修剪后右子树的头节点向上返回。</li><li>root节点大于区间右边界，则root节点的左子树中可能存在符合要求的节点。此时调用递归函数对root节点的左子树进行修剪，将修剪后左子树的头节点向上返回。</li></ul><p>最后在单层递归逻辑中，分别让root节点的左右指针接住修剪后的左右子树即可。终止条件负责返回，单层递归逻辑负责接收。</p></li><li>本题的基本原理和450.删除二叉搜索树中的节点相同，都是通过递归函数的返回值来移除节点，然后在单层递归逻辑中接住上一层递归的返回值。</li><li>本题的迭代法思路简单（终止条件-&gt;确保root在[low, high]的区间内-&gt;确保cur的左子树中没有小于low的节点-&gt;接着检查cur的右子树中没有大于high的节点），但代码非常容易写错（while循环中套着while，循环条件写得不对容易出现死循环），因此不推荐。还是建议老老实实地用递归法完成本题。</li></ol><h3 id="108-将有序数组转换为二叉搜索树-2"><a href="#108-将有序数组转换为二叉搜索树-2" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h3><ol><li>构造二叉树的一般思路：取数组最中间的元素作为二叉树的root节点。利用数组的左区间构造root节点的左子树，利用数组的右区间构造root节点的右子树。</li><li>在数组中元素个数为偶数时，数组最中间的元素有两个。此时，选取这两个元素中的任意一个作为root节点都可以。这样会构造出两棵不同的二叉搜索树，因此本题的结果不唯一。</li><li>本题递归函数的传入参数为数组和左右下标。在构造二叉树的时候尽量不要重新定义左右区间数组，而是用下标来操作原数组。</li><li><p><code>int mid = (left + right) / 2</code>最好写成<code>int mid = left + (right - left) / 2</code>。原因是两个整数相加可能会超出整数的最大范围。本题虽然采取第一种写法没事，但要有清醒的意识，避免出事。</p></li><li><p>注意循环不变量原则：区间要么一直保持为左闭右闭，要么一直保持为左闭右开。这关乎到终止条件的具体写法、递归时传入的区间下标以及主函数中调用递归函数时传入的下标。</p></li><li>本题的递归写法思路非常简单：先写终止条件，再取数组最中间的元素作为二叉树的root节点，再利用数组的左区间构造root节点的左子树，最后利用数组的右区间构造root节点的右子树，最后返回root节点即可。</li><li>本题的迭代写法代码比较复杂，不要求掌握。还是优先掌握递归写法。</li></ol><h3 id="538-把二叉搜索树转换为累加树-2"><a href="#538-把二叉搜索树转换为累加树-2" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h3><ol><li>先想如何把有序（递增）数组变为累加数组：<strong>倒序遍历数组，然后用双指针算法即可</strong>，即当前元素的新值等于当前元素的旧值加上前一个元素的值。根据这个思路解决本题。二叉搜索树通过中序遍历可以转换为有序数组，倒序遍历数组即相当于<strong>反中序遍历二叉搜索树</strong>。对树中节点值的累加也是通过<strong>双指针</strong>实现的。</li><li>本题的<strong>递归函数不需要返回值</strong>，原因：由于要遍历整个二叉树，在遍历的过程中去更新节点数值即可，因此不需要返回值。</li><li>本题的pre指针可以是整数类型的变量，也可以是指针类型的变量。若采用整数类型的变量，可以避免对指针是否为空的判断（整数的初始值为0），因此采用整数类型的变量作为pre更加方便。</li><li>本题是迭代的模板题，但我用迭代法写本题总是容易写错。因此还是推荐递归法。</li></ol><h3 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h3><ol><li><p>解决二叉树类题目的基本方法是递归法。一般使用了<strong>递归三部曲</strong>来分析题目，看到二叉树，看到递归，都应该想：返回值、参数是什么？终止条件是什么？单层逻辑是什么？</p></li><li><p>大多数题也都有迭代解法，但是一般代码更长也更容易写错，可以用于提升自己。</p></li></ol><p>二叉树类的题目可以分为以下几类：</p><h4 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h4><p>深度优先遍历<br>   二叉树：前中后序递归法：递归三部曲初次亮相<br>   二叉树：前中后序迭代法（一）：通过栈模拟递归<br>   二叉树：前中后序迭代法（二）统一风格</p><p>广度优先遍历<br>   二叉树的层序遍历：通过队列模拟</p><h4 id="求二叉树的属性"><a href="#求二叉树的属性" class="headerlink" title="求二叉树的属性"></a>求二叉树的属性</h4><p>二叉树：是否对称<br>递归：后序，比较的是根节点的左子树与右子树是不是相互翻转</p><p>二叉树：求最大深度<br>递归：后序，求根节点最大高度就是最大深度，通过递归函数的返回值做计算树的高度<br>迭代：层序遍历</p><p>二叉树：求最小深度<br>递归：后序，求根节点最小高度就是最小深度，注意最小深度的定义<br>迭代：层序遍历</p><p>二叉树：求有多少个节点<br>递归：后序，通过递归函数的返回值计算节点数量<br>迭代：层序遍历</p><p>二叉树：是否平衡<br>递归：后序，注意后序求高度和前序求深度，递归过程判断高度差</p><p>二叉树：找所有路径<br>递归：前序，方便让父节点指向子节点，涉及回溯处理根节点到叶子的所有路径</p><p>二叉树：递归中如何隐藏着回溯<br>详解二叉树：找所有路径中递归如何隐藏着回溯</p><p>二叉树：求左叶子之和<br>递归：后序，必须三层约束条件，才能判断是否是左叶子。</p><p>二叉树：求左下角的值<br>递归：顺序无所谓，优先左孩子搜索，同时找深度最大的叶子节点。<br>迭代：层序遍历找最后一行最左边</p><p>二叉树：求路径总和<br>递归：顺序无所谓，递归函数返回值为bool类型是为了搜索一条边，没有返回值是搜索整棵树。</p><h4 id="二叉树的修改与构造"><a href="#二叉树的修改与构造" class="headerlink" title="二叉树的修改与构造"></a>二叉树的修改与构造</h4><p>翻转二叉树<br>递归：前序，交换左右孩子</p><p>构造二叉树<br>递归：前序，重点在于找分割点，分左右区间构造</p><p>构造最大的二叉树<br>递归：前序，分割点为数组最大值，分左右区间构造</p><p>合并两个二叉树<br>递归：前序，同时操作两个树的节点，注意合并的规则</p><h4 id="求二叉搜索树的属性"><a href="#求二叉搜索树的属性" class="headerlink" title="求二叉搜索树的属性"></a>求二叉搜索树的属性</h4><p>二叉搜索树中的搜索<br>递归：二叉搜索树的递归是有方向的<br>迭代：因为有方向，所以迭代法很简单</p><p>是不是二叉搜索树<br>递归：中序，相当于变成了判断一个序列是不是递增的</p><p>求二叉搜索树的最小绝对差<br>递归：中序，双指针操作</p><p>求二叉搜索树的众数<br>递归：中序，清空结果集的技巧，遍历一遍便可求众数集合</p><p>二叉搜索树转成累加树<br>递归：中序，双指针操作累加</p><h4 id="二叉树公共祖先问题"><a href="#二叉树公共祖先问题" class="headerlink" title="二叉树公共祖先问题"></a>二叉树公共祖先问题</h4><p>二叉树的公共祖先问题<br>递归：后序，回溯，找到左子树出现目标值，右子树节点目标值的节点。</p><p>二叉搜索树的公共祖先问题<br>递归：顺序无所谓，如果节点的数值在目标区间就是最近公共祖先</p><h4 id="二叉搜索树的修改与构造"><a href="#二叉搜索树的修改与构造" class="headerlink" title="二叉搜索树的修改与构造"></a>二叉搜索树的修改与构造</h4><p>二叉搜索树中的插入操作<br>递归：顺序无所谓，通过递归函数返回值添加节点</p><p>二叉搜索树中的删除操作<br>递归：前序，想清楚删除非叶子节点的情况</p><p>修剪二叉搜索树<br>递归：前序，通过递归函数返回值删除节点</p><p>构造二叉搜索树<br>递归：前序，数组中间节点分割</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E</summary>
      
    
    
    
    <category term="算法（二叉树）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="双指针算法" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    
    <category term="递归解法" scheme="http://example.com/tags/%E9%80%92%E5%BD%92%E8%A7%A3%E6%B3%95/"/>
    
    <category term="二叉搜索树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="迭代解法" scheme="http://example.com/tags/%E8%BF%AD%E4%BB%A3%E8%A7%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Day 22 Leetcode 235 701 450</title>
    <link href="http://example.com/2024/04/23/Day-22-Leetcode-235-701-450/"/>
    <id>http://example.com/2024/04/23/Day-22-Leetcode-235-701-450/</id>
    <published>2024-04-23T03:30:05.000Z</published>
    <updated>2024-04-24T08:22:15.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0235.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html">235. 二叉搜索树的最近公共祖先</a><br><a href="https://programmercarl.com/0701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.html">701.二叉搜索树中的插入操作</a><br><a href="https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html">450.删除二叉搜索树中的节点</a></p><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a>235. 二叉搜索树的最近公共祖先</h3><p>拿到本题，我发现这道题和236. 二叉树的最近公共祖先基本相同，只不过二叉树的条件被增强为二叉搜索树。我首先尝试用236题的思路和代码解决本题。据此，我独立写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件1</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 终止条件2</span></span><br><span class="line">        <span class="keyword">if</span> (root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序遍历</span></span><br><span class="line">        TreeNode* left = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode* right = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &amp;&amp; right) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (left) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">if</span> (right) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后尝试利用二叉搜索树的特性来进行优化。我想到的优化是：用双指针后序遍历二叉搜索树，若pre和cur分别指向两个目标节点，那么cur就是两节点的最近公共祖先。直接看卡尔的讲解吧。</p><h3 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h3><p>本题应该充分利用二叉搜索树的性质就可以求解。若插入节点的值大于当前节点，则向当前节点的右子树插。若插入节点的值小于当前节点，则向当前节点的左子树插。我选择的策略是尽量往叶子节点那一层插入。根据这个思路，我写下了如下的代码（迭代写法，实际上就是枚举将val节点插入二叉搜索树的各种可能）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// root为空，则直接返回由val创建的节点</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 后序移动cur指针，不要直接移动root</span></span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cur无左子节点的情况，则条件合适就将val节点作为cur的左子节点</span></span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span> &amp;&amp; val &lt; cur-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* insert = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">                cur-&gt;left = insert;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// cur无右子节点的情况，则条件合适就将val节点作为cur的右子节点</span></span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;right == <span class="literal">NULL</span> &amp;&amp; val &gt; cur-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* insert = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">                cur-&gt;right = insert;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 否则继续走到叶子节点位置，在叶子节点之下插入val节点</span></span><br><span class="line">            <span class="keyword">if</span> (val &gt; cur-&gt;val) cur = cur-&gt;right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; cur-&gt;val) cur = cur-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span> &amp;&amp; cur-&gt;right == <span class="literal">NULL</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* insert = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">                <span class="keyword">if</span> (val &gt; cur-&gt;val) cur-&gt;right = insert;</span><br><span class="line">                <span class="keyword">else</span> cur-&gt;left = insert;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 必须随便返回一个东西，虽然必然不会执行这行代码，但不返回一个东西本程序就会报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意，<strong>上述写法一定要区分cur指针和root节点</strong>。在写出了迭代写法后，应该也可以根据相同的原理写出递归写法。递归的写法其实非常简单，我尝试了一段时间后写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 要插入的节点的值小于root节点的值，则将其插入root节点的左子树</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; val)  root-&gt;left = <span class="built_in">insertIntoBST</span>(root-&gt;left, val);</span><br><span class="line">        <span class="comment">// 要插入的节点的值大于root节点的值，则将其插入root节点的右子树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &lt; val) root-&gt;right = <span class="built_in">insertIntoBST</span>(root-&gt;right, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450.删除二叉搜索树中的节点"></a>450.删除二叉搜索树中的节点</h3><p>本题的难点在于删除二叉搜索树中的节点后，要调整二叉树的结构，甚至要改变root节点。我想到的办法就是中序遍历时使用双指针。当cur指针找到要删去的节点时，cur指针再向后移动一位，然后直接用cur指针指向pre指针，就完成了对要删去节点的删除。根据这个算法思路，我尝试写代码，但写不出来，直接看卡尔的讲解。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="235-二叉搜索树的最近公共祖先-1"><a href="#235-二叉搜索树的最近公共祖先-1" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a>235. 二叉搜索树的最近公共祖先</h3><p>基于236. 二叉树的最近公共祖先，要好好利用二叉搜索树的特性。<strong>思路</strong>：从上往下遍历二叉树，若当前遍历的节点的值大于p和q的值，则p和q的最近公共祖先一定在当前节点的左子树中，此时从当前遍历的节点开始向左遍历。若当前遍历的节点的值小于p和q的值，则p和q的最近公共祖先一定在当前节点的右子树中，此时从当前遍历的节点开始向右遍历。若当前遍历的节点的值在p和q之间，则当前节点就是p和q的公共节点。</p><p>现在的问题是，当前节点是否是p和q的最近公共祖先？其实是的。因为p和q分别在当前节点的左右子树中，如果从当前节点开始继续向下遍历，那么不是错过p就是错过q。接下来开始写递归法的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">traversal</span><span class="params">(TreeNode* cur, TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑</span></span><br><span class="line">    <span class="comment">// 本题不用涉及前中后序，因为二叉搜索树本身是有序的，只要有左和右即可，中在哪里都可以</span></span><br><span class="line">    <span class="comment">// 若当前遍历的节点的值大于p和q的值，则p和q的最近公共祖先一定在当前节点的左子树中，此时从当前遍历的节点开始向左遍历</span></span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;val &gt; p-&gt;val &amp;&amp; cur-&gt;val &gt; q-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode* left = <span class="built_in">traversal</span>(cur-&gt;left, p, q);</span><br><span class="line">      <span class="comment">// 在向左遍历的过程中找到了p和q的最近公共祖先，则返回之</span></span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">NULL</span>) <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若当前遍历的节点的值小于p和q的值，则p和q的最近公共祖先一定在当前节点的右子树中，此时从当前遍历的节点开始向右遍历</span></span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;val &lt; p-&gt;val &amp;&amp; cur-&gt;val &lt; q-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode* right = <span class="built_in">traversal</span>(cur-&gt;right, p, q);</span><br><span class="line">        <span class="comment">// 在向右遍历的过程中找到了p和q的最近公共祖先，则返回之</span></span><br><span class="line">        <span class="keyword">if</span> (right != <span class="literal">NULL</span>) <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 剩下的情况：当前节点的值在p和q之间，则当前节点就是p和q的最近公共祖先</span></span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题迭代法的代码也比较简单，原因是二叉搜索树确定了搜索的方向。迭代法代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">traversal</span><span class="params">(TreeNode* cur, TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;val &gt; p-&gt;val &amp;&amp; cur-&gt;val &gt; q-&gt;val) cur = cur-&gt;left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;val &lt; p-&gt;val &amp;&amp; cur-&gt;val &lt; q-&gt;val) cur = cur-&gt;right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 一定不要忘记这句话，否则函数会因为没有返回值报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于二叉搜索树的题目，迭代法似乎比递归法还更简单。</p><h3 id="701-二叉搜索树中的插入操作-1"><a href="#701-二叉搜索树中的插入操作-1" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h3><p>插入新节点的方式有多种，得到的二叉搜索树不唯一。<strong>必然可以在二叉搜索树的叶子节点处插入新的节点</strong>。若在二叉搜索树的其他位置处插入节点，则改变了二叉搜索树的结构，将本题做复杂了。递归法代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">insert</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 卡尔的理解：遍历到空节点（叶子节点的左子节点或右子节点）时，将val节点作为叶子节点的左子节点或者右子节点</span></span><br><span class="line">    <span class="comment">// 此时将val节点向上返回给叶子节点</span></span><br><span class="line">    <span class="comment">// 卡尔的理解方式比较复杂，不如直接理解为传入一个空的树，返回根据val创建的新节点即可</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 卡尔的理解：在val节点作为叶子节点的左子节点时，当前节点的左指针指向val节点</span></span><br><span class="line">    <span class="comment">// 在val节点作为叶子节点的右子节点时，当前节点的右指针指向val节点</span></span><br><span class="line">    <span class="keyword">if</span> (val &lt; root-&gt;val) root-&gt;left = <span class="built_in">insert</span>(root-&gt;left, val);</span><br><span class="line">    <span class="keyword">if</span> (val &gt; root-&gt;val) root-&gt;right = <span class="built_in">insert</span>(root-&gt;right, val);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>卡尔相当于是从叶子节点开始，自下往上讲解递归法的原理。我的理解方式是从root节点开始，自上而下的理解递归的思路。我的理解方式要简单一些，有利于快速写出本题的递归版本的代码</strong>。本题也可以用迭代法，由于是二叉搜索树明确了搜索的方向，所以迭代法的代码也会比较简单。</p><p>看了代码随想录的讲解后，我独立写出了正统的迭代法的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用cur节点作为当前遍历到的节点，用parent节点作为cur节点的父节点</span></span><br><span class="line">        <span class="comment">// 因为最后是在叶子节点下插入新节点，因此cur节点必定会遍历到空节点，此时需要利用parent节点来指向新节点</span></span><br><span class="line">        TreeNode* parent = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// cur == NULL时终止循环</span></span><br><span class="line">        <span class="keyword">while</span> (cur)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// parent节点随着cur节点移动，但始终落后一步，因此parent节点是当前节点的上一个节点（父节点）</span></span><br><span class="line">            parent = cur; </span><br><span class="line">            <span class="comment">// 根据二叉搜素树的有序性移动cur节点</span></span><br><span class="line">            <span class="keyword">if</span> (val &lt; cur-&gt;val) cur = cur-&gt;left;</span><br><span class="line">            <span class="keyword">else</span> cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最终在二叉搜索树的叶子节点下插入新节点，这就需要用到parent节点，因为cur节点已经为空</span></span><br><span class="line">        <span class="keyword">if</span> (val &lt; parent-&gt;val) parent-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">else</span> parent-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>正统的迭代法采取的是<strong>双指针</strong>的思路，需要两个节点，一个是cur节点，其是遍历二叉搜索树时的当前节点。另一个是parent节点，其是当前节点的上一个节点（父节点）。</p><h3 id="450-删除二叉搜索树中的节点-1"><a href="#450-删除二叉搜索树中的节点-1" class="headerlink" title="450.删除二叉搜索树中的节点"></a>450.删除二叉搜索树中的节点</h3><p>删除节点后，要保证二叉树依然是二叉搜索树。<strong>本题比较难，因为要修改二叉树的结构</strong>。删除节点后的二叉树结构不唯一，只要符合二叉搜索树的定义即可。下面开始分析可能的情况。</p><ul><li>没找到要删除的节点</li><li>要删除的节点是叶子节点，左为空，右也为空（此时删除节点较为简单，因为不需要改变二叉树的结构）</li><li>要删除的节点左不为空，右为空。则让该节点的父节点直接指向该节点的左子节点</li><li>要删除的节点左为空，右不空。则让该节点的父节点直接指向该节点的右子节点</li><li>要删除的节点左不空，右不空。本情况最复杂，因为要大幅调整二叉搜索树的结构。拿以下二叉树为例：<br><img src="D:/OneDrive%20-%20stu.xjtu.edu.cn/%E5%9B%BE%E7%89%87/tstmp_20240424064451.gif" alt="tstmp_20240424064451"></li></ul><p>例如删去节点7。<strong>让7的右子树继位</strong>，那么7的左子树应该放在右子树的哪里。<strong>7的左子树应该放在右子树中的左下角（右子树中的最小值）</strong>。让7的左子树继位也可以，原理相同。</p><p>接下来开始写代码（代码不多但不好理解）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不写cpp中需要释放内存的逻辑，只写核心代码</span></span><br><span class="line"><span class="comment">// 返回新二叉树的根节点</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">delete</span><span class="params">(TreeNode* root, <span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 不需要遍历整个二叉树，找到要删除的点就是终止条件</span></span><br><span class="line">    <span class="comment">// 找到要删除的点后就要删除该点，因此删除该点的操作在终止条件中</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 没找到要删除的节点/传入的二叉树为空</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找到了要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val == key)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 要删除的节点是叶子节点，左为空，右也为空</span></span><br><span class="line">        <span class="comment">// return NULL的意思是该节点的父节点指向NULL</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 要删除的节点左不为空，右为空</span></span><br><span class="line">        <span class="comment">// 将要删除的节点的左孩子直接向上返回即可</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) <span class="keyword">return</span> root-&gt;left;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 要删除的节点左为空，右不空</span></span><br><span class="line">        <span class="comment">// 将要删除的节点的右孩子直接向上返回即可</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right) <span class="keyword">return</span> root-&gt;right;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 要删除的节点左不空，右不空</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* cur = root-&gt;right; <span class="comment">// 要删除节点的右子树</span></span><br><span class="line">            <span class="keyword">while</span> (cur-&gt;left) cur = cur-&gt;left; <span class="comment">// 让cur指向右子树的左下角</span></span><br><span class="line">            cur-&gt;left = root-&gt;left; <span class="comment">// 将要删除节点的左子树嫁接到右子树的左下角</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 移除要删除的节点，此时要删除的节点左为空右不为空，因为直接向上返回其右孩子即可</span></span><br><span class="line">            <span class="keyword">return</span> root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归</span></span><br><span class="line">    <span class="comment">// 二叉搜素树确定了搜索的方向</span></span><br><span class="line">    <span class="comment">// root的左子树在删去节点后，左子树的新根节点嫁接到root-&gt;left上</span></span><br><span class="line">    <span class="keyword">if</span> (key &lt; root-&gt;val) root-&gt;left = <span class="built_in">delete</span>(root-&gt;left, key); </span><br><span class="line">    <span class="comment">// root的右子树在删去节点后，右子树的新根节点嫁接到root-&gt;left上</span></span><br><span class="line">    <span class="keyword">if</span> (key &gt; root-&gt;val) root-&gt;right = <span class="built_in">delete</span>(root-&gt;right, key);</span><br><span class="line">    <span class="keyword">return</span> root; <span class="comment">// 看似没有处理root，但实际上已经在终止条件中处理了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码不算复杂，但是很难想。注意：删除节点的操作是通过返回值来进行的，然后让本层递归的上一层去接住本层递归的返回值。本题也可以用迭代法实现。本题的进阶版本：在一般的二叉树中删除节点，更难。吃透本题即可。</p><p>本题精简的注释版本如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">deleteNode</span><span class="params">(TreeNode* root, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件，分为五种情况</span></span><br><span class="line">        <span class="comment">// 情况1：找不到要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 情况2，要删除的节点左右都为空</span></span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">// 情况3，要删除的节点左为空右不空</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right) <span class="keyword">return</span> root-&gt;right;</span><br><span class="line">            <span class="comment">// 情况4，要删除的节点左不空右为空</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) <span class="keyword">return</span> root-&gt;left;</span><br><span class="line">            <span class="comment">// 情况5，要删除的节点左不空右不空</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* cur = root-&gt;right;</span><br><span class="line">                <span class="keyword">while</span> (cur-&gt;left) cur = cur-&gt;left;</span><br><span class="line">                cur-&gt;left = root-&gt;left;</span><br><span class="line">                <span class="keyword">return</span> root-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; key) root-&gt;left = <span class="built_in">deleteNode</span>(root-&gt;left, key);</span><br><span class="line">        <span class="keyword">else</span> root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="235-二叉搜索树的最近公共祖先-2"><a href="#235-二叉搜索树的最近公共祖先-2" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a>235. 二叉搜索树的最近公共祖先</h3><ol><li>本题和236的区别在于，本题的条件得到了强化，不仅是二叉树，而且是二叉搜索树。</li><li>由于二叉搜索树的方向性，本题不需要回溯，自上往下查找目标区间即可。</li><li>本题的核心思路：从上往下遍历二叉树，若当前节点的值大于p和q节点的值，则p和q的最近公共祖先在当前节点的左子树中，从当前节点开始向左遍历。若当前节点的值小于p和q节点的值，则p和q的最近公共祖先在当前节点的右子树中，从当前节点开始向右遍历。若当前节点的值在<code>[p-&gt;val, q-&gt;val]</code>的范围内，则当前节点就是p和q的最近公共祖先。注意区间是左闭右闭，因为存在p为q的父节点的情况。</li><li>为什么当前节点的值在<code>[p-&gt;val, q-&gt;val]</code>的范围内，就可以确定当前节点就是p和q的最近公共祖先，而不仅仅是一个普通的公共祖先？这个原因在于：当前节点的值&gt;<code>p-&gt;val</code>，则说明p在当前节点的左子树中；当前节点的值&lt;<code>q-&gt;val</code>，则说明q在当前节点的左子树中。因此若从当前节点开始向下移动到下一个节点处，那么不是错过p就是错过q。因此当前节点就是p和q的最近公共祖先。</li><li>因为二叉搜索树的有序性，本题的迭代写法也非常简单，甚至比递归解法更简单。</li></ol><h3 id="701-二叉搜索树中的插入操作-2"><a href="#701-二叉搜索树中的插入操作-2" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h3><ol><li>本题可以采用递归法和迭代法。但递归法的代码较为简单，因此推荐使用递归法。迭代法的代码略微复杂，但采用的双指针思路也非常清晰，因此也可以掌握迭代法。</li><li>插入新节点的方式有多种，得到的二叉搜索树不唯一。但必然可以在二叉搜索树的叶子节点处插入新的节点。因此不用改变二叉搜索树的结构，就可以实现插入操作。这是本题简单易解的根本所在。</li><li><p>本题递归法的思路：</p><ul><li>递归函数的返回值：返回插入新节点后二叉搜索树的根节点。也可以返回空，但那样写比较麻烦。</li><li>终止条件：root节点为空时，说明输入的二叉树为空，因此直接返回val节点即可。</li><li>单层递归逻辑：若<code>val &gt; root-&gt;val</code>，说明val节点应该被插入在root节点的右子树中，因此有<code>root-&gt;right = insert(root-&gt;right, val)</code>（<code>insert(root-&gt;right, val)</code>返回了root的右子树在插入新节点后的头节点，用root的右节点指向该头节点即可）。若<code>val &lt; root-&gt;val</code>，说明val节点应该被插入在root节点的左子树中，因此有<code>root-&gt;left = insert(root-&gt;left, val)</code>。最终返回root即可。</li></ul></li><li><p>卡尔相当于是从叶子节点开始，自下往上讲解递归法的原理。我的理解方式是从root节点开始，自上而下的理解递归的思路。我的理解方式要简单一些，有利于快速写出本题的递归版本的代码。</p></li><li><p>本题的迭代写法思路也非常清晰。迭代法采取的是<strong>双指针</strong>的思路，需要两个节点，一个是cur节点，其是遍历二叉搜索树时的当前节点。另一个是parent节点，其是当前节点的上一个节点（父节点）。我在初次尝试中实现的迭代法代码复杂且由于要考虑多种情况，非常容易写错。因此建议如果要写迭代法，就采用基于双指针思路的迭代法。</p></li></ol><h3 id="450-删除二叉搜索树中的节点-2"><a href="#450-删除二叉搜索树中的节点-2" class="headerlink" title="450.删除二叉搜索树中的节点"></a>450.删除二叉搜索树中的节点</h3><ol><li><p>本题相比于在二叉搜索树中插入节点，复杂得多，原因是删除二叉搜索树中的节点且保持该二叉树仍为二叉搜索树，会改变二叉搜索树原本的结构。</p></li><li><p>本题的第一个难点在于分析出删除一个节点的五种情况。</p><ul><li><p>找不到要删除的节点</p></li><li><p>要删除的节点的左右子节点均为空</p></li><li><p>要删除的节点的左空右不空</p></li><li><p>要删除的节点的左不空右空</p></li><li><p>要删除的节点的左右均不空</p></li></ul><p>由于在终止条件中要找到需要删除的节点，因此删除节点的操作也在终止条件中完成。</p></li><li><p>本题的第二个难点在于实现第五种情况的代码。我直接附上相应的代码并进行解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TreeNode* cur = root-&gt;right;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;left) cur = cur-&gt;left;</span><br><span class="line">cur-&gt;left = root-&gt;left;</span><br><span class="line"><span class="keyword">return</span> root-&gt;right;</span><br></pre></td></tr></table></figure><p>先找到要删除的节点root，然后让cur指针指向root的右子节点。接着用cur遍历root的右子树，直到cur指向右子树的左下角。将root的左子树嫁接到右子树的左下角，最后返回root的右子节点。以root的右子节点为根节点的二叉树就是一棵二叉搜索树。可以举例子画图理解上述构造二叉搜索树的操作。</p></li><li><p>本题的基本原理在于：删除节点的操作是通过返回值进行的，然后让本层递归的上一层去接住本层递归的返回值。</p></li><li>删除一般的二叉树中的节点要采用另外的算法，因此不要求掌握。</li><li>本题也有迭代写法，需要用到双指针算法，代码也更加复杂，因此不要求掌握。</li><li>按理来说，cpp中需要显式地释放被删除节点占用的内存。但不释放也不会对代码的正常运行造成影响。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0235.%E4%BA%8C%E5%8F%89%E6%90%9C%E</summary>
      
    
    
    
    <category term="算法（二叉树）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="双指针算法" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    
    <category term="递归解法" scheme="http://example.com/tags/%E9%80%92%E5%BD%92%E8%A7%A3%E6%B3%95/"/>
    
    <category term="二叉搜索树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="迭代解法" scheme="http://example.com/tags/%E8%BF%AD%E4%BB%A3%E8%A7%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Day 20 Leetcode 530 501 236</title>
    <link href="http://example.com/2024/04/21/Day-20-Leetcode-530-501-236/"/>
    <id>http://example.com/2024/04/21/Day-20-Leetcode-530-501-236/</id>
    <published>2024-04-21T08:49:51.000Z</published>
    <updated>2024-04-23T03:31:34.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html">530.二叉搜索树的最小绝对差</a><br><a href="https://programmercarl.com/0501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.html">501.二叉搜索树中的众数</a><br><a href="https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html">236. 二叉树的最近公共祖先</a></p><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h3><p>本题虽然是个easy题，但我想不出来怎么做。唯一的思路是双指针，至于怎么递归，按照怎样的顺序，我想不出来。</p><h3 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h3><p>本题显然又要充分利用二叉搜索树的特性：中序遍历二叉搜索树，得到的数组是递增的，统计数组中出现频次最高的元素即可。本题我目前发现了两个需要注意的点：</p><ol><li>出现频次最高的元素可能不止一个，因此需要返回一个数组。</li><li>本二叉搜索树的性质为：左子树中的所有节点<strong>小于等于</strong>根节点，右子树中的所有节点<strong>大于等于</strong>根节点。</li></ol><p>本题似乎也应该采用双指针的做法。若<code>pre-&gt;val</code>和<code>cur-&gt;val</code>相等，则<code>cnt</code>数组（用于统计元素值出现的次数）中<code>pre-&gt;val</code>的值加1。但这里有两个问题：</p><ul><li>节点的值可能为负数，因此不能将节点的值直接映射为数组的下标</li><li>若出现次数最多的元素不止一个，该如何返回数组</li></ul><p>上述两个问题都不好解决，我直接看卡尔的讲解吧。</p><h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h3><p>本题比较难，我拿到后没有什么想法，猜测可能要用到回溯。直接看卡尔的讲解。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="530-二叉搜索树的最小绝对差-1"><a href="#530-二叉搜索树的最小绝对差-1" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h3><p>目标：求任意两节点间的最小绝对差。由于是二叉搜索树，用中序遍历会成为一个有序的序列，据此思路尝试解出此题。我独立写出了本题的第一种解法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">        vec.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">inorder</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> min = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>() - <span class="number">1</span>; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; vec[i + <span class="number">1</span>] - vec[i]) min = vec[i + <span class="number">1</span>] - vec[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>和98.验证二叉搜索树相同，本题应该也可以用<code>maxvalue</code>法和双指针法。这两种方法本质上都是不用额外的数组，直接在中序遍历时计算两个相邻节点的差值，然后选取最小的差值。现在我来尝试这两种解法。这两种解法我还是想不出来，看卡尔的讲解。</p><p>接下来讲解如何在中序遍历时利用两个指针直接得出最小绝对差，而不用把二叉树转变为数组。难点：中序遍历二叉树时前后指针如何移动（控制）。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> res = INT_MAX;</span><br><span class="line"></span><br><span class="line">TreeNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回二叉树的某一特性或者二叉树节点的某个数值，才需要返回值。本题的情况不需要返回值</span></span><br><span class="line"><span class="comment">// 确切来说，一找到就需要立刻去返回的才需要返回值。需要遍历整棵二叉树且用全局变量来记录返回结果的，函数就不需要返回值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑：中序遍历</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left); <span class="comment">// 左</span></span><br><span class="line">    <span class="comment">// 中</span></span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) res = <span class="built_in">min</span>(res, cur-&gt;val - pre-&gt;val);</span><br><span class="line">    pre = cur;</span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right); <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>移动pre和cur的核心在于：cur由中序遍历来移动，pre由赋值移动。cur是当前节点，pre是当前节点的上一个节点。</p><p>根据上述核心代码，我写下了本题的完整代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = INT_MAX;</span><br><span class="line">    TreeNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;left);</span><br><span class="line">        <span class="comment">// 中</span></span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; cur-&gt;val - pre-&gt;val &lt; res)</span><br><span class="line">            res = cur-&gt;val - pre-&gt;val;</span><br><span class="line">        <span class="comment">// 也可写作</span></span><br><span class="line">        <span class="comment">// if (pre != NULL) res = min(res, cur-&gt;val - pre-&gt;val);</span></span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="comment">// 右</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traversal</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题也可以用迭代法，但不推荐。</p><h3 id="501-二叉搜索树中的众数-1"><a href="#501-二叉搜索树中的众数-1" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h3><p>二叉搜索树中可能有重复的元素。众数可能不止一个，因此输出众数的集合。暴力做法：对一棵普通的二叉树，遍历二叉树，用map统计每个元素出现的频次，然后将map转换为vector，对vector进行排序，然后在数组中求众数。</p><p>如何利用二叉搜索树的特性去求众数的集合？遍历顺序：中序遍历。中序遍历得到的数组中的所有元素是单调递增的。<strong>求众数的具体方法：先遍历一遍二叉树，记录下所有元素出现的最高频率。再遍历一遍二叉树，将出现频率为最高频率的元素放入结果集中。</strong>其实可以不遍历两遍二叉树，遍历一遍二叉树即可，需要用到一些代码技巧。</p><p>双指针算法的思路：用count来统计当前元素出现的次数。当<code>pre-&gt;val == cur-&gt;val</code>时，当前元素出现的次数加1。当<code>pre-&gt;val != cur-&gt;val</code>，则count归一。初始时，pre指向NULL，count指向左叶子节点，count也为一。当<code>count == maxcount</code>时，将当前元素放入结果集中。</p><p>这里有个问题：如果不事先遍历一遍二叉树，怎么知道<code>maxcount</code>一定是真正的最高频率？后面的具体代码实现中会处理这个问题。现在开始写具体的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">TreeNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 当前元素出现的频率</span></span><br><span class="line"><span class="type">int</span> maxcount = <span class="number">0</span>; <span class="comment">// 整个二叉树中（已经遍历过的节点）的元素出现的最高频率</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res; <span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历整个二叉树，结果放入全局变量中，因此递归函数不需要返回值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层的递归逻辑</span></span><br><span class="line">    <span class="comment">// 左</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left);</span><br><span class="line">    <span class="comment">// 中：处理逻辑</span></span><br><span class="line">    <span class="comment">// 统计count</span></span><br><span class="line">    <span class="keyword">if</span> (pre == <span class="literal">NULL</span>) count = <span class="number">1</span>; <span class="comment">// 双指针的初始位置：pre为NULL，cur指向左叶子节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pre-&gt;val == cur-&gt;val) count += <span class="number">1</span>; <span class="comment">// 当前元素出现的次数+1</span></span><br><span class="line">    <span class="keyword">else</span> count = <span class="number">1</span>; <span class="comment">// 双指针指向的节点的值不相等，则count又回到1</span></span><br><span class="line">    pre = cur; <span class="comment">// pre跟随cur移动</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若当前节点的出现次数等于整个二叉树中元素出现的最大次数，则将其放入结果集中</span></span><br><span class="line">    <span class="keyword">if</span> (count == maxcount) res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此时存在问题：maxcount不是真正的maxcount，因此需要代码去更新res数组</span></span><br><span class="line">    <span class="comment">// 实时更新res数组，就不需要遍历两遍二叉树了</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; maxcount) </span><br><span class="line">    &#123;</span><br><span class="line">        maxcount = count; <span class="comment">// 更新maxcount</span></span><br><span class="line">        <span class="comment">// maxcount都被更新了，原先的结果集中的结果全废了，清空res</span></span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        res.<span class="built_in">push_back</span>(cur-&gt;val); <span class="comment">// 将当前节点的数值放入结果集中</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 右</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我也写出了遍历两次二叉树的代码，如下所示。需要特别注意的是，<code>getmaxcount</code>后需要重置pre和count。遍历两次二叉树的代码显得很冗余，因为基本相同的逻辑写了两遍。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxcount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一次遍历二叉树，得到maxcount</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getmaxcount</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">getmaxcount</span>(cur-&gt;left);</span><br><span class="line">        <span class="comment">// 中节点</span></span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="literal">NULL</span>) count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pre-&gt;val == cur-&gt;val) count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> count = <span class="number">1</span>;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; maxcount) maxcount = count;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">getmaxcount</span>(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二次遍历二叉树，得到结果集</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;left);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中节点</span></span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="literal">NULL</span>) count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pre-&gt;val == cur-&gt;val) count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> count = <span class="number">1</span>;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="keyword">if</span> (count == maxcount) res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">getmaxcount</span>(root);</span><br><span class="line">        pre = <span class="literal">NULL</span>; <span class="comment">// getmaxcount后重置pre</span></span><br><span class="line">        count = <span class="number">0</span>; <span class="comment">// getmaxcount后重置count</span></span><br><span class="line">        <span class="built_in">traversal</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题也可以采用迭代法，基本上是迭代的模板加上递归法对中节点的处理逻辑。但本题推荐掌握递归法即可。</p><h3 id="236-二叉树的最近公共祖先-1"><a href="#236-二叉树的最近公共祖先-1" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h3><p>找两个节点p和q的最近公共祖先。条件：二叉树中所有节点的值都是不同的，二叉树中一定存在p和q。根节点是任何两个节点的公共祖先，所以求公共祖先没有意义，求最近公共祖先才有意义。简单的想法：找到节点p和节点q后，从下往上去遍历，直到找到公共的节点。但对二叉树，一般大家熟悉的是从根节点开始从上往下去遍历，实际上也无法从下往上去遍历，但处理顺序可以是从下往上的。<strong>回溯的过程就可以让我们去从下往上地处理结果</strong>。具体来说，可以判断某个节点的左子树是否出现过p，右子树是否出现过q，如果都出现了，就将该节点向上返回。看该节点的父节点，若父节点的左子树中没出现p，或者右子树中没出现q，则说明该节点是p和q的最近公共祖先。父节点继续将最近公共祖先节点的值向上返回，直到返回到根节点。</p><p>从下往上传递p和q节点的最近公共祖先的逻辑写在回溯过程中。<strong>想在回溯过程中达到从下往上处理的效果，一定要用后序遍历</strong>。后序遍历是左右中，中：处理逻辑。<strong>中的具体处理逻辑</strong>：判断某个节点的左子树是否出现过p，右子树是否出现过q。即在终止条件中，如果遇到了p或者q，就往上返回。如果一个节点的左子树的返回值不为空，则左子树中出现了p或者q；如果一个节点的右子树的返回值不为空，则右子树中出现了p或者q。<strong>如果当前中节点的左右子树的返回值都不为空，则当前的中节点就是p和q最近的公共祖先</strong>。还有一种情况。即p就是q的公共祖先。但本情况的处理逻辑和上面是相同的。</p><p>具体的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回最近的公共祖先</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">traversal</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件1</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 终止条件2：遇到节点p或者q，则将它们向上返回</span></span><br><span class="line">    <span class="keyword">if</span> (root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归的逻辑：后序遍历</span></span><br><span class="line">    <span class="comment">// 左：可以告诉我们左子树中是否出现过p或者q</span></span><br><span class="line">    TreeNode* left = <span class="built_in">traversal</span>(root-&gt;left, p, q);</span><br><span class="line">    <span class="comment">// 右：可以告诉我们右子树中是否出现过p或者q</span></span><br><span class="line">    TreeNode* right = <span class="built_in">traversal</span>(root-&gt;right, p, q);</span><br><span class="line">    <span class="comment">// 中</span></span><br><span class="line">    <span class="comment">// 左右子树中出现了p和q，则root是最近公共祖先，将root返回</span></span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="comment">// 左子树中没有p和q，右子树为最近公共祖先，则继续将right（即最近公共祖先）向上返回，可以参见下面的实例</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> right;</span><br><span class="line">    <span class="comment">// 左子树为最近公共祖先，右子树中没有p和q，则继续将left(即最近公共祖先)向上返回，和上面一行代码同理</span></span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> left;</span><br><span class="line">    <span class="comment">// 左右子树都为空，则return NULL</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 7, q = 4</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The LCA of nodes 5 and 1 is 3.</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="img"></p><p>以上面的二叉树为例，2的左子树返回7，右子树返回4，则2是最近公共祖先。5的左子树返回空，右子树返回2，2是7和4的最近公共祖先，则将2继续向上返回。</p><p>为什么上述代码将另一种情况也包含了？以上图为例，若p=7, q=2，则q就是最近的公共祖先。<strong>一旦遇到q就返回，就不继续向下遍历了</strong>。最终就将q返回到root节点，作为结果了。因此另一种情况不需要特别考虑。</p><p>本题的难点：</p><ul><li>回溯的过程可以将结果逐层从下往上返回。</li><li>从下往上返回结果需要用到后序遍历。先进行左右子树的判断逻辑，再进行中节点的逻辑。只有左右子树的返回值不为空，才将中节点作为最近公共祖先返回。</li><li>可以举实例画图理解本题的回溯过程和后序遍历中节点的处理（返回）逻辑。</li><li>情况2的处理逻辑包含于情况1中。</li></ul><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="530-二叉搜索树的最小绝对差-2"><a href="#530-二叉搜索树的最小绝对差-2" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h3><ol><li>遇到二叉搜索树，首先需要注意其在中序遍历后得到的数组是递增的这一特性。</li><li>遇到在二叉搜索树上求什么最值啊，差值之类的，就把它想成在一个有序数组上求最值，求差值。</li><li><strong>我之所以一开始没有写出本题的双指针解法，原因在于</strong>忘记了如何确定递归函数的返回值。对于本题，需要遍历整棵二叉树且用全局变量来记录返回结果，因此递归函数不需要返回值。</li><li>本题的双指针法的思路和98.验证二叉搜索树相同，但两题的区别在于本题的递归函数没有返回值，而98题的递归函数返回值为bool类型。</li><li>移动pre和cur的核心在于：cur由中序遍历来移动，pre由赋值移动。cur是当前节点，pre是当前节点的上一个节点。</li></ol><h3 id="501-二叉搜索树中的众数-2"><a href="#501-二叉搜索树中的众数-2" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h3><ol><li>本题虽然是easy难度，但其实是<strong>比较难</strong>的。</li><li>若是一般的二叉树，而非二叉搜索树，则本题的思路为：首先遍历二叉树，用map统计每个元素出现的次数。然后对map按照value进行排序，将排序后的map的(key, value)中最大的一个（或几个）value对应的key放入结果集中。原理不复杂，但代码实现起来比较麻烦。</li><li>本题是二叉搜索树，因此想要充分利用了其性质的话，肯定要采用<strong>中序遍历</strong>。本题的核心思路依然是<strong>双指针算法</strong>。需要一个<code>count</code>来存储当前节点出现的次数，一个<code>maxcount</code>来存储整棵二叉树中出现次数最多的节点出现的次数。如果采用两次遍历的做法，那么需要先遍历一遍二叉树得到<code>maxcount</code>，然后再遍历一遍二叉树，将<code>count == maxcount</code>的节点的值存入结果集中。但实际上，遍历一遍二叉树即可完成上述操作。</li><li>遍历一遍二叉树的做法：初始时，<code>count = 1</code>；<code>pre-&gt;val == cur-&gt;val</code>时，<code>count += 1</code>；否则，<code>count = 1</code>。若<code>count == maxcount</code>，则将当前节点的值放入结果集中。此时出现问题：<code>maxcount</code>不一定是整棵二叉树出现次数最多的节点出现的次数。可以用一个简单的办法解决这个问题：若<code>count &gt; maxcount</code>，则更新<code>maxcount</code>，清空结果集，然后再往结果集中插入当前节点的值。通过这样的操作，就可以动态地去更新结果集，从而避免了对二叉树的两次遍历。</li></ol><h3 id="236-二叉树的最近公共祖先-2"><a href="#236-二叉树的最近公共祖先-2" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h3><ol><li><p>本题需要自下往上处理节点，自然而然想到用<strong>回溯</strong>的思想。</p></li><li><p><strong>后序遍历</strong>（左右中）就是天然的回溯过程，可以根据左右子树的返回值，来处理中节点的逻辑。因此本题采用后序遍历。</p></li><li><p>理解以下的示意图就理解了本题：<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210204151125844.png" alt="236.二叉树的最近公共祖先1"></p></li><li><p>本题的代码实际上非常简单而清晰，可以根据代码来理解上面的图片，本题的核心代码为中节点的处理逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 终止条件1</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 终止条件2：遇到节点p或者q，则将它们向上返回，对应于节点6和5将它们自身向节点7返回的过程</span></span><br><span class="line"><span class="keyword">if</span> (root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单层递归的逻辑：后序遍历</span></span><br><span class="line"><span class="comment">// 左：可以告诉我们左子树中是否出现过p或者q</span></span><br><span class="line">TreeNode* left = <span class="built_in">traversal</span>(root-&gt;left, p, q);</span><br><span class="line"><span class="comment">// 右：可以告诉我们右子树中是否出现过p或者q</span></span><br><span class="line">TreeNode* right = <span class="built_in">traversal</span>(root-&gt;right, p, q);</span><br><span class="line"><span class="comment">// 中</span></span><br><span class="line"><span class="comment">// 左右子树中出现了p和q，则root是最近公共祖先，将root返回，对应于节点7将其自身向节点10返回的过程</span></span><br><span class="line"><span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line"><span class="comment">// 左子树中没有p和q，右子树为最近公共祖先，则继续将right（即最近公共祖先）向上返回</span></span><br><span class="line"><span class="comment">// 对应于节点10将节点7向节点8返回的过程</span></span><br><span class="line"><span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> right;</span><br><span class="line"><span class="comment">// 左子树为最近公共祖先，右子树中没有p和q，则继续将left(即最近公共祖先)向上返回，和上面一行代码同理</span></span><br><span class="line"><span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> left;</span><br><span class="line"><span class="comment">// 左右子树都为空，则return NULL</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>用文字来描述，本题的关键代码实现了以下功能：</p><ul><li>遇到节点p或q，就将其向上返回</li><li>某个节点的左右子树中包含p和q，则该节点就是p和q的最近公共祖先，将该节点向上返回</li><li>某个节点的左右子节点中的一个的返回值不为空，则说明那个返回值不为空的左/右节点为p和q的最近公共祖先，将该节点进一步向上返回</li><li>其他情况下均返回空即可</li></ul></li><li><p>还有一种情况，即p是q的父节点，此时遍历到p的父节点时，p的父节点就会向上返回p，而不会继续遍历p和其下面的子树。因此本情况也包含在上述代码的逻辑中。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E</summary>
      
    
    
    
    <category term="算法（二叉树）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="双指针算法" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    
    <category term="递归解法" scheme="http://example.com/tags/%E9%80%92%E5%BD%92%E8%A7%A3%E6%B3%95/"/>
    
    <category term="二叉搜索树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="中序遍历" scheme="http://example.com/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Day 19 Leetcode 654 617 700 98</title>
    <link href="http://example.com/2024/04/19/Day-19-Leetcode-654-617-700-98/"/>
    <id>http://example.com/2024/04/19/Day-19-Leetcode-654-617-700-98/</id>
    <published>2024-04-19T04:22:38.000Z</published>
    <updated>2024-04-22T02:36:45.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html">654.最大二叉树</a></p><p><a href="https://programmercarl.com/0617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.html">617.合并二叉树</a></p><p><a href="https://programmercarl.com/0700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.html">700.二叉搜索树中的搜索</a></p><p><a href="https://programmercarl.com/0098.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html">98.验证二叉搜索树</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h3><p><strong>什么是二叉树搜索树？</strong>其根节点要比左子树里所有节点的数值大，根节点要比右子树里所有节点的数值小。同理，左右子树也符合这个规则。二叉搜索树的上述规则确定了遍历顺序（既不是前序，也不是中序、后序），而二叉搜素树的上述规则也让本题的迭代写法特别简单。</p><p><code>if (node != NULL)</code> 可以简写为<code>if (node)</code>。</p><h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h3><p>中序遍历一棵二叉搜索树，得到的数组中的元素是有序的。</p><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h3><p>本题延续106.从中序与后序遍历序列构造二叉树的思路。步骤可以分为：</p><ol><li><p>找到nums数组中的最大值，作为root</p></li><li><p>找到root在nums中的下标</p></li><li><p>将nums按照root分为左数组和右数组</p></li><li><p>递归处理左数组和右数组，得到左右子树</p></li></ol><p>我独立写出了以下的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件：数组为空，构造不出树，返回NULL</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找到nums数组中的最大值，作为root</span></span><br><span class="line">        <span class="type">int</span> max = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找到root在nums中的下标</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j; j &lt; nums.<span class="built_in">size</span>(); j ++ ) </span><br><span class="line">            <span class="keyword">if</span> (nums[j] == max)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> rootvalue = nums[j];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组分为左数组和右数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ml</span><span class="params">(nums.begin(), nums.begin() + j)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mr</span><span class="params">(nums.begin() + j + <span class="number">1</span>, nums.end())</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归处理左数组和右数组，得到左右子树</span></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(ml);</span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(mr);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">traversal</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h3><p>对于本题，我也采用前序遍历的方法，独立写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 应该采用前序遍历，先中节点，再左节点，再右节点</span></span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="literal">NULL</span> &amp;&amp; root2 == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root1 == <span class="literal">NULL</span>) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root2 == <span class="literal">NULL</span>) <span class="keyword">return</span> root1;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootvalue = root1-&gt;val + root2-&gt;val;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="keyword">if</span> (root1-&gt;left != <span class="literal">NULL</span> &amp;&amp; root2-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            root-&gt;left = <span class="built_in">mergeTrees</span>(root1-&gt;left, root2-&gt;left);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root1-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            root-&gt;left = <span class="built_in">mergeTrees</span>(root1-&gt;left, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root2-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            root-&gt;left = <span class="built_in">mergeTrees</span>(<span class="literal">NULL</span>, root2-&gt;left);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="keyword">if</span> (root1-&gt;right != <span class="literal">NULL</span> &amp;&amp; root2-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">            root-&gt;right = <span class="built_in">mergeTrees</span>(root1-&gt;right, root2-&gt;right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root1-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">            root-&gt;right = <span class="built_in">mergeTrees</span>(root1-&gt;right, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root2-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">            root-&gt;right = <span class="built_in">mergeTrees</span>(<span class="literal">NULL</span>, root2-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>由上述代码可知，对左右节点的处理都分了三类讨论，这与终止条件中的三类相对应，这是上述代码可以正确运行的基础。本题应该也可以用层序遍历去做。</p><h3 id="700-二叉搜索树中的搜索-1"><a href="#700-二叉搜索树中的搜索-1" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h3><p>哈哈哈这题又给我用前序遍历的写法做出来了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">searchBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前序遍历搜索整棵树</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == val) <span class="keyword">return</span> root; <span class="comment">// 中节点</span></span><br><span class="line">        TreeNode* left = <span class="built_in">searchBST</span>(root-&gt;left, val); <span class="comment">// 左节点：在左子树中搜索值为val的节点</span></span><br><span class="line">        TreeNode* right = <span class="built_in">searchBST</span>(root-&gt;right, val); <span class="comment">// 右节点：在右子树中搜索值为val的节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> left; <span class="comment">// 在左子树中找到目标节点，则返回之</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> right; <span class="comment">// 在右子树中找到目标节点，则返回之</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 左右子树中都没找到，则返回空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本题用层序遍历应该也可以做。层序遍历的写法我也独立写出来了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">searchBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); <span class="comment">// 取出一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;val == val) <span class="keyword">return</span> node; <span class="comment">// 判断其是否为目标节点，是，则返回之</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 继续往队列中加入当前节点的非空左右子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left); </span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 若最后没有找到目标节点，则返回空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="98-验证二叉搜索树-1"><a href="#98-验证二叉搜索树-1" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h3><p>本题我觉得应该采用中序遍历，先验证左子树是否符合要求，再验证中节点是否符合要求，最后验证右子树是否符合要求，根据这个思路，我尝试独立写出本题的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只有root节点</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 左子树为空</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &gt;= root-&gt;right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右子树为空</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;right == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &lt;= root-&gt;left-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左右子树都不为空</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &lt;= root-&gt;left-&gt;val || root-&gt;val &gt;= root-&gt;right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">bool</span> res1 = <span class="built_in">isValidBST</span>(root-&gt;left);</span><br><span class="line">                <span class="type">bool</span> res2 = <span class="built_in">isValidBST</span>(root-&gt;right);</span><br><span class="line">                <span class="keyword">if</span> (res1 &amp;&amp; res2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上述代码分了4种情况讨论：只有root节点；左子树为空；右子树为空；左右子树都不为空。但忽略了一种情况：<br>当<code>root = [5,4,6,null,null,3,7]</code>时，二叉树如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A((5)) --&gt; B((4))</span><br><span class="line">    A --&gt; C((6))</span><br><span class="line">    C --&gt; F((3))</span><br><span class="line">    C --&gt; G((7))</span><br></pre></td></tr></table></figure><p>此时虽然[5, 4, 6]是二叉搜索树，[6, 3, 7]也是二叉搜素树，但[6, 3, 7]中存在元素3小于root的5，因此整体并不是一棵二叉搜索树。这种局部都是二叉搜索树，但整体不是二叉搜索树的情况，在我的代码中并没有进行特判。因此我只能通过77/85个测试样例。这也是本题的坑之所在。直接看卡尔的讲解。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="654-最大二叉树-1"><a href="#654-最大二叉树-1" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h3><p>规则：在数组中选取最大的元素作为root，最大元素的左区间用于构造左子树，规则同上；最大元素的右区间用于构造右子树，规则同上。</p><p>例如，321605，根据以上规则得到以下的最大二叉树：<br><img src="https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg" alt="img"></p><p>遍历方式：前序遍历。<strong>凡是涉及构造二叉树的题目，都要用到前序遍历</strong>。原因：前序遍历顺序是中左右，先构造root节点，再去构造左子树和右子树。</p><p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回二叉树的root节点</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">construct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 确定递归的终止条件</span></span><br><span class="line">    <span class="comment">// 数组中只有一个元素，则唯一一个元素就是root节点</span></span><br><span class="line">    <span class="comment">// 本题题目中对数组的要求是非空，因此不需要考虑数组为空的情况</span></span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归的逻辑</span></span><br><span class="line">    <span class="comment">// 中节点的逻辑</span></span><br><span class="line">    <span class="comment">// 找到数组中的最大值和其下标</span></span><br><span class="line">    <span class="type">int</span> maxvalue = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; maxvalue)</span><br><span class="line">        &#123;</span><br><span class="line">            maxvalue = nums[i];</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据最大值定义root节点</span></span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(maxvalue);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 左子树的逻辑</span></span><br><span class="line">    <span class="comment">// 根据index切割原数组，将其分为左右数组</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">0</span>) <span class="comment">// 保证左区间中至少有一个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(nums.begin(), nums.begin() + index)</span></span>; <span class="comment">// 左区间，左闭右开</span></span><br><span class="line">        root-&gt;left = <span class="built_in">construct</span>(l); <span class="comment">// 递归构造左子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 右子树的逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="comment">// 保证右区间中至少有一个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(nums.begin() + index + <span class="number">1</span>, nums.end())</span></span>; <span class="comment">// 右区间，左闭右开</span></span><br><span class="line">        root-&gt;right = <span class="built_in">construct</span>(r); <span class="comment">// 递归构造右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码严格按照前序遍历构造二叉树。本代码冗余，且效率低，效率低的原因是每次分割时都构造了两个新的数组。<strong>对本代码的优化是每次分割数组时不用构造新的数组，操作下标即可</strong>。</p><p>还有一个重要问题：左右子树的逻辑中要加上if判断。写不写if关键在于终止条件。终止条件保证了数组中至少要有一个元素，因此在左右子树的逻辑中需要加上if判断，也就是保证左右区间中至少有一个元素。当然在左右子树的逻辑中不写if也可以，那就需要在leetcode的主函数外另写一个函数。</p><p>完整的代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前序遍历：中节点</span></span><br><span class="line">        <span class="comment">// 找到root的值和下标</span></span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(nums.begin(), nums.begin() + index)</span></span>; <span class="comment">// 左区间</span></span><br><span class="line">            root-&gt;left = <span class="built_in">constructMaximumBinaryTree</span>(l); <span class="comment">// 递归构造左子树</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(nums.begin() + index + <span class="number">1</span>, nums.end())</span></span>; <span class="comment">// 右区间</span></span><br><span class="line">            root-&gt;right = <span class="built_in">constructMaximumBinaryTree</span>(r); <span class="comment">// 递归构造右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>左右子树中不加if判断的写法（关键在于终止条件<code>nums.size() == 0</code>），这也是我在初次尝试中的写法，是最不容易写错的写法。因为思路直接继承自106.从中序与后序遍历序列构造二叉树，且不需要在左右子树处加if判断。<strong>推荐这个写法</strong>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">construct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前序遍历：中节点</span></span><br><span class="line">        <span class="comment">// 找到root的值和下标</span></span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max);</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(nums.begin(), nums.begin() + index)</span></span>; <span class="comment">// 左区间</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(nums.begin() + index + <span class="number">1</span>, nums.end())</span></span>; <span class="comment">// 右区间</span></span><br><span class="line">        root-&gt;left = <span class="built_in">construct</span>(l); <span class="comment">// 递归构造左子树</span></span><br><span class="line">        root-&gt;right = <span class="built_in">construct</span>(r); <span class="comment">// 递归构造右子树</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">construct</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在本写法的基础上进一步进行优化。不在分割数组时创建新的数组，只改变数组的下标。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">construct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件，区间是左闭右开的，因此是begin &gt;= end</span></span><br><span class="line">        <span class="keyword">if</span> (begin &gt;= end)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全部操作下标，不需要操作元素的值</span></span><br><span class="line">        <span class="type">int</span> index = begin;</span><br><span class="line">        <span class="comment">// 从begin + 1开始搜索，i = begin时，index = i = begin，不需要写入循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = begin + <span class="number">1</span>; i &lt; end; i ++ ) </span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[index])</span><br><span class="line">                index = i;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[index]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="comment">// 左闭右开</span></span><br><span class="line">        <span class="type">int</span> leftbegin = begin;</span><br><span class="line">        <span class="type">int</span> leftend = index;</span><br><span class="line">        root-&gt;left = <span class="built_in">construct</span>(nums, leftbegin, leftend); <span class="comment">// 递归构造左子树</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="type">int</span> rightbegin = index + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rightend = end;</span><br><span class="line">        root-&gt;right = <span class="built_in">construct</span>(nums, rightbegin, rightend); <span class="comment">// 递归构造右子树</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不需要下面这句话，因为已经在construct函数中通过begin == end处理了nums.size() == 0的情况</span></span><br><span class="line">        <span class="comment">// if (nums.size() == 0) return NULL;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">construct</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>本版本代码在处理左右节点时不需要进行if判断，原因是若左右区间为空，在递归调用construct函数时会因为<code>begin == end</code>直接返回<code>NULL</code>，而不会出现直接创建数组写法中的空数组的现象（终止条件中未考虑空数组的情况，因此若数组为空不能触发终止条件，会导致程序报错）。因此我也可以在终止条件中考虑空数组的情况，而不在构建左右子树时加上if判断，代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件1</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 终止条件2</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前序遍历：中节点</span></span><br><span class="line">        <span class="comment">// 找到root的值和下标</span></span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左节点，不需加if判断，由于有终止条件1</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(nums.begin(), nums.begin() + index)</span></span>; <span class="comment">// 左区间</span></span><br><span class="line">        root-&gt;left = <span class="built_in">constructMaximumBinaryTree</span>(l); <span class="comment">// 递归构造左子树</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右节点，不需加if判断，由于有终止条件1</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(nums.begin() + index + <span class="number">1</span>, nums.end())</span></span>; <span class="comment">// 右区间</span></span><br><span class="line">        root-&gt;right = <span class="built_in">constructMaximumBinaryTree</span>(r); <span class="comment">// 递归构造右子树</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="617-合并二叉树-1"><a href="#617-合并二叉树-1" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h3><p>将两个二叉树合并为一个二叉树。有相同的节点则将两个节点数值相加，作为新节点。对于一棵树上有而另一棵树上没有的节点，将新的节点补充过来。难点：同时操作两个二叉树。本题使用前序遍历最易理解，顺序是中左右。中序和后序也可，但不太符合直观上合并两棵二叉树的过程。本题也可使用迭代法。接下来写递归的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">mergeTree</span><span class="params">(TreeNode* t1, TreeNode* t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 遍历到t1树的某个位置为空后，需要返回t2树上相同位置的节点（遍历两树是同步的），这样才能将t2树上的该节点的子树加入到合并后的二叉树中</span></span><br><span class="line">    <span class="comment">// 已经包含了两树都为空的情况</span></span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="literal">NULL</span>) <span class="keyword">return</span> t2;</span><br><span class="line">    <span class="keyword">if</span> (t2 == <span class="literal">NULL</span>) <span class="keyword">return</span> t1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归逻辑，前序遍历</span></span><br><span class="line">    <span class="comment">// 直接改tree1的结构，而不重新定义一棵二叉树</span></span><br><span class="line">    t1-&gt;val += t2-&gt;val; <span class="comment">// 中节点</span></span><br><span class="line">    t1-&gt;left = <span class="built_in">mergeTree</span>(t1-&gt;left, t2-&gt;left); <span class="comment">// 左节点</span></span><br><span class="line">    t1-&gt;right = <span class="built_in">mergeTree</span>(t1-&gt;right, t2-&gt;right); <span class="comment">// 右节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> t1; <span class="comment">// 返回合并后的二叉树，即t1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题采用中序/后序遍历也可以，把单层递归逻辑的三行代码调整顺序即可。按照前序遍历的思路想即可，这符合我们正常合并二叉树的习惯。本题除了在t1上修改，也可以定义一棵新的二叉树，写法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">root-&gt;val = t1-&gt;val + t2-&gt;val;</span><br><span class="line">root-&gt;left = <span class="built_in">mergeTree</span>(t1-&gt;left, t2-&gt;left);</span><br><span class="line">root-&gt;right = <span class="built_in">mergeTree</span>(t1-&gt;right, t2-&gt;right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> root;</span><br></pre></td></tr></table></figure></p><p>上述写法空间复杂度是O(n)。</p><p>本题的迭代写法如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* r1, TreeNode* r2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (r1 == <span class="literal">NULL</span>) <span class="keyword">return</span> r2;</span><br><span class="line">        <span class="keyword">if</span> (r2 == <span class="literal">NULL</span>) <span class="keyword">return</span> r1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代写法，常用队列</span></span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(r1); q.<span class="built_in">push</span>(r2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* n1 = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            TreeNode* n2 = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// n1和n2都不为空</span></span><br><span class="line">            n1-&gt;val += n2-&gt;val;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若n1和n2的左子树都不为空，则将它们加入队列中</span></span><br><span class="line">            <span class="keyword">if</span> (n1-&gt;left != <span class="literal">NULL</span> &amp;&amp; n2-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(n1-&gt;left);</span><br><span class="line">                q.<span class="built_in">push</span>(n2-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若n1和n2的右子树都不为空，则将它们加入队列中</span></span><br><span class="line">            <span class="keyword">if</span> (n1-&gt;right != <span class="literal">NULL</span> &amp;&amp; n2-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(n1-&gt;right);</span><br><span class="line">                q.<span class="built_in">push</span>(n2-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若n1的左子树为空，则将n2的左子树赋到n1上</span></span><br><span class="line">            <span class="keyword">if</span> (n1-&gt;left == <span class="literal">NULL</span>)</span><br><span class="line">                n1-&gt;left = n2-&gt;left;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 若n1的右子树为空，则将n2的右子树赋到n1上</span></span><br><span class="line">            <span class="keyword">if</span> (n1-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">                n1-&gt;right = n2-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="700-二叉搜索树中的搜索-2"><a href="#700-二叉搜索树中的搜索-2" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h3><p>在二叉树中找到数值为目标值的节点然后返回。</p><p><strong>什么是二叉树搜索树？</strong>其根节点要比左子树里所有节点的数值大，根节点要比右子树里所有节点的数值小。同理，左右子树也符合这个规则。二叉搜索树的上述规则确定了遍历顺序，而二叉搜素树的上述规则也让本题的迭代写法特别简单。递归法的代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">search</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 两个终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span> || root-&gt;val == val) <span class="keyword">return</span> root; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归的逻辑</span></span><br><span class="line">    TreeNode* res = <span class="literal">NULL</span>; <span class="comment">// res用于存递归函数的返回值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据二叉搜索树的特性，若val &lt; root的值，则向root的左子树中去遍历</span></span><br><span class="line">    <span class="keyword">if</span> (val &lt; root-&gt;val) res = <span class="built_in">search</span>(root-&gt;left, val);</span><br><span class="line">    <span class="comment">// 根据二叉搜索树的特性，若val &gt; root的值，则向root的右子树中去遍历</span></span><br><span class="line">    <span class="keyword">if</span> (val &gt; root-&gt;val) res = <span class="built_in">search</span>(root-&gt;right, val);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比于我在初次尝试中的写法，上述写法代码更简洁，效率也更高。因为我在初次尝试中的写法没有利用二叉搜索树的特性，只是单纯地先搜索root节点，再递归搜索root节点的左子树和右子树。而卡尔的写法先搜索root节点，然后根据<code>root-&gt;val</code>和<code>val</code>的大小对比，决定是在root节点的左子树中继续搜索还是在其右子树中继续搜索。卡尔的写法并不涉及前中后序，因为二叉搜索树本身的性质已经帮我们确定了遍历的顺序。</p><p>本题迭代法的代码也并很简单。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">search</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 向左子树中搜索</span></span><br><span class="line">        <span class="keyword">if</span> (val &lt; root-&gt;val) root = root-&gt;left;</span><br><span class="line">        <span class="comment">// 向右子树中搜索</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; root-&gt;val) root = root-&gt;right;</span><br><span class="line">        <span class="comment">// 相等，说明找到了目标节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 树中无目标节点，则返回空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>迭代法中搜索的方向也由二叉搜索树的特性决定。上述迭代写法也比我在初次尝试中写的迭代写法更为简洁且效率更高，因为卡尔<strong>充分利用了二叉搜索树的特性</strong>，知道想要找到目标值应该朝着什么方向走。</p><h3 id="98-验证二叉搜索树-2"><a href="#98-验证二叉搜索树-2" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h3><p>判断给定的二叉树是否是二叉搜索树。二叉搜索树的定义：左子树中的所有元素都小于root节点，右子树中的所有元素都大于root节点，左右子树都符合这个规则。<strong>中序遍历这棵二叉树，其元素是有序的</strong>。例如对以下二叉树：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[5] --&gt; B[3]</span><br><span class="line">    B[3] --&gt; H[1]</span><br><span class="line">    B[3] --&gt; I[NULL]</span><br><span class="line">    A --&gt; C[10]</span><br><span class="line">    C --&gt; F[6]</span><br><span class="line">    C --&gt; G[11]</span><br></pre></td></tr></table></figure></p><p>按照中序遍历，就是[1, 3, 5, 6, 10, 11]，数组是有序的。<strong>验证二叉树是否是二叉搜索树，就是验证中序遍历后得到的数组是否是单调递增的</strong>。开始写具体的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isvalid</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 空二叉树是二叉搜索树</span></span><br><span class="line">    </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec; <span class="comment">// 存放树中序遍历后的结果</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="built_in">isvalid</span>(root-&gt;left); <span class="comment">// 左</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(root-&gt;val); <span class="comment">// 中：将遍历到的元素放入数组中</span></span><br><span class="line">    <span class="built_in">isvalid</span>(root-&gt;right); <span class="comment">// 右</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断vec是否有序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据上述思路，我写下了能够运行的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec; <span class="comment">// 全局变量，用于存放中序遍历二叉树的结果</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于中序遍历二叉树的辅助函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">        vec.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">inorder</span>(root);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断数组是否是单调递增的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>() - <span class="number">1</span>; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vec[i + <span class="number">1</span>] &lt;= vec[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其实不需要将二叉树转换为数组，可以直接在遍历二叉树的过程中判断元素是否是单调递增的。接下来看如何不使用数组来判断二叉树是否是二叉搜索树。本题也可以用迭代法实现，但主要关注递归法。</p><p>代码误区：<code>if (root-&gt;val &gt; root-&gt;left-&gt;val &amp;&amp; root-&gt;val &lt; root-&gt;right-&gt;val) return true;</code>。实际上这样写是错误的。因为二叉搜索树要求的是root要大于左子树中的所有值，root要小于右子树中的所有值。这个错误我在初次尝试部分已经讨论过了。</p><p>现在开始写不额外定义数组的写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -2^31 &lt;= Node.val &lt;= 2^31 - 1，因此maxval要小于int的最小值，因此maxval要取为long long的最小值</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> maxval = LONG_MIN; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isvalid</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> left = <span class="built_in">isvalid</span>(root-&gt;left); <span class="comment">// 左：左子树是否是二叉搜索树</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中</span></span><br><span class="line">    <span class="comment">// 若二叉树是二叉搜索树，在中序遍历的情况下，元素是递增的，root-&gt;val会持续大于maxval</span></span><br><span class="line">    <span class="comment">// maxval相当于记录了遍历过程中当前节点的前一个节点的数值</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &gt; maxval)</span><br><span class="line">    &#123;</span><br><span class="line">        maxval = root-&gt;val; <span class="comment">// 更新maxval</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若元素不是递增的，则return false</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 右：右子树是否是二叉搜索树</span></span><br><span class="line">    <span class="type">bool</span> right = <span class="built_in">isvalid</span>(root-&gt;right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right; <span class="comment">// 要求左右子树同时符合条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以二叉树为例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[5] --&gt; B[3]</span><br><span class="line">    B[3] --&gt; H[1]</span><br><span class="line">    B[3] --&gt; I[NULL]</span><br><span class="line">    A --&gt; C[10]</span><br><span class="line">    C --&gt; F[6]</span><br><span class="line">    C --&gt; G[11]</span><br></pre></td></tr></table></figure></p><p>在判断6是否合法时，拿5（root，也是maxvalue）和6进行比较了，因此不会进入初次尝试中提到的误区。若左叶子为<code>INT_MIN</code>，且<code>maxval = INT_MIN</code>，则<code>root-&gt;val == maxval</code>，就会直接返回false。因此要让<code>maxval</code>小于<code>INT_MIN</code>。</p><p>上述方法存在问题，若左叶子为<code>LONG_MIN</code>（改变输入节点数值的范围），则<code>maxval</code>就无法取更小的值了。我们可以对上述方法进行优化，<strong>不额外定义一个变量，而是直接让二叉树的前一个节点和后一个节点进行比较</strong>。写下如下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TreeNode* pre = <span class="literal">NULL</span>; <span class="comment">// pre记录当前节点的前一个节点, root可以和pre进行比较</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isvalid</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> left = <span class="built_in">isvalid</span>(root-&gt;left); <span class="comment">// 左</span></span><br><span class="line">    <span class="comment">// 中</span></span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;val &gt;= root-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 前一个节点的值大于当前节点，则return false</span></span><br><span class="line">    pre = root; <span class="comment">// 将pre从NULL移到root，即从前一个节点移到当前节点</span></span><br><span class="line">    <span class="type">bool</span> right = <span class="built_in">isvalid</span>(root-&gt;right); <span class="comment">// 右</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上方法被称为双指针优化。其实原理非常简单，就是在中序遍历的过程中一直去判断root（当前节点）和pre（前一个节点）之间的大小关系。root指针是由中序遍历的过程去移动的，pre指针是通过直接赋值去移动的。本题是二叉搜索树中的基础题。</p><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="654-最大二叉树-2"><a href="#654-最大二叉树-2" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h3><ol><li><p>本题的思路和106.从中序与后序遍历序列构造二叉树的思路非常类似，理解了那题就可以顺畅的写出本题的代码。</p></li><li><p>本题的单层递归核心逻辑如下：</p><ol><li><p>找到nums数组中的最大值，作为root</p></li><li><p>找到root在nums中的下标</p></li><li><p>将nums按照root分为左数组和右数组</p></li><li><p>递归处理左数组和右数组，得到左右子树</p></li></ol></li><li><p>本题的终止条件可以写两个也可以写一个。若只有终止条件：<code>if (nums.size() == 1) return new TreeNode(nums[0]);</code>，则需要在构造左右子树时加上if判断，保证左右区间不为空。若再加上终止条件：<code>if (nums.size() == 0) return NULL;</code>，则就不需要在构造左右子树时加上if判断了。加上第二个终止条件的原因并非是为了防止传入的nums数组为空（题目限制了传入的数组中至少有1个元素），而是为了在递归时出现数组为空的情况下顺利退出递归过程。</p></li><li><p>在实现中，给出了本题的4种写法。写法1和写法4的区别在于：1有1个终止条件，有if判断。4有2个终止条件，无if判断。<strong>最推荐的写法</strong>（初学者不易写错，且可直接由106演化而来）<strong>是写法2</strong>。效率最高的写法是写法3（只操作数组下标，而不新建数组，也不操作数组中的元素）。我将在下面附上写法2的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">construct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到root的值和下标</span></span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max);</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(nums.begin(), nums.begin() + index)</span></span>; <span class="comment">// 左区间</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(nums.begin() + index + <span class="number">1</span>, nums.end())</span></span>; <span class="comment">// 右区间</span></span><br><span class="line">        root-&gt;left = <span class="built_in">construct</span>(l); <span class="comment">// 递归构造左子树</span></span><br><span class="line">        root-&gt;right = <span class="built_in">construct</span>(r); <span class="comment">// 递归构造右子树</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">construct</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>本题的优化写法是只操作下标，不新建数组，也不操作数组中元素的值。这样可以降低时间和空间复杂度（我感觉时间复杂度基本没变，但空间复杂度由于不需要新建数组，大大降低了）。注意区间始终要保持左闭右开（基于循环不变量原则）。</p></li></ol><h3 id="617-合并二叉树-2"><a href="#617-合并二叉树-2" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h3><ol><li>本题虽然涉及到同时操作两棵二叉树，但代码的思路和实现都非常简单。</li><li>本题的递归写法的思路：<ul><li>终止条件：若一棵树的root节点为空，则返回另一棵树的root节点</li><li>单层递归：前序遍历。先合并中节点的值，然后再递归处理左子树和右子树。在树1的基础上，将树1修改为合并后的树。也可定义一棵新的树作为合并后的树。</li></ul></li><li>本题的迭代写法较为复杂，没必要掌握。</li></ol><h3 id="700-二叉搜索树中的搜索-3"><a href="#700-二叉搜索树中的搜索-3" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h3><ol><li>通过本题可以了解二叉搜索树的性质：其根节点要比左子树里所有节点的数值大，根节点要比右子树里所有节点的数值小。同理，左右子树也符合这个规则。二叉搜索树的上述规则确定了遍历顺序（既不是前序，也不是中序、后序），而二叉搜素树的上述规则也让本题的迭代写法特别简单。</li><li>我在初次尝试中的递归写法和迭代写法并没有利用二叉搜索树的性质，因此代码较长且运行效率较低，相当于初次尝试中的代码是执行了在一般的二叉树中搜索节点的过程。而在实现中卡尔的递归写法和迭代写法则充分利用了二叉搜索树的性质，因此代码较为简洁且运行效率高。</li><li>本题的迭代写法尤其简单，原因是：一般二叉树遍历的迭代法，需要使用栈来模拟深度遍历，使用队列来模拟广度遍历。但对于二叉搜索树，因为二叉搜索树的特殊性，也就是节点的有序性，可以不使用辅助栈或者队列就可以写出迭代法。对于一般二叉树，递归过程中还有回溯的过程，例如走一个左方向的分支走到头了，那么要调头，在走右分支。而<strong>对于二叉搜索树，不需要回溯的过程，因为节点的有序性就帮我们确定了搜索的方向。</strong></li><li>本题推荐的写法是卡尔的写法，因为充分利用了二叉搜索树的性质。但如果想不起来卡尔的写法，或者题目中的二叉树并非二叉搜索树，而是一般的二叉树，我在初次尝试中的两种写法不失为一种具有普适性的写法。</li></ol><h3 id="98-验证二叉搜索树-3"><a href="#98-验证二叉搜索树-3" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h3><ol><li>本题的递归解法有三个版本，分别是直接判断中序遍历得到的数组是否递增、<code>maxvalue</code>法和双指针法。其中最简单最直观的方法是方法1，但其也是效率最低的。因此一定要掌握方法1，接着尽力掌握方法3，最后掌握方法2即可。</li><li><strong>本题利用的基本原理：中序遍历一棵二叉搜索树，得到的数组中的元素是有序（递增）的</strong>。</li><li><code>maxvalue</code>法和双指针法本质都是在中序遍历二叉树的过程中，不用额外的数组去存储二叉树中的所有元素，而是直接判断当前节点是否大于前一个节点。但<code>maxvalue</code>法具有<code>maxvalue</code>的初始值必须小于节点的最小值的问题，因此若节点的最小值可以取到long long的最小值，则<code>maxvalue</code>的初始值无法确定（cpp不提供超出long long范围的整数类型）。<strong>因此双指针法更为完美</strong>。</li><li><code>maxvalue</code>法和双指针法在代码实现上略有区别。二者的单层递归逻辑都是中序遍历，但在对中节点的处理逻辑上有差异。<code>maxvalue</code>法是当元素递增时，更新<code>maxvalue</code>的值，否则返回false。双指针法则是当元素不是递增时，返回false，否则更新pre指针。</li><li>本题的迭代解法要用到栈，代码也比较复杂，不要求掌握。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E</summary>
      
    
    
    
    <category term="算法（二叉树）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="双指针算法" scheme="http://example.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    
    <category term="层序遍历" scheme="http://example.com/tags/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
    <category term="递归解法" scheme="http://example.com/tags/%E9%80%92%E5%BD%92%E8%A7%A3%E6%B3%95/"/>
    
    <category term="二叉搜索树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="中序遍历" scheme="http://example.com/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
    <category term="迭代解法" scheme="http://example.com/tags/%E8%BF%AD%E4%BB%A3%E8%A7%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Day 18 Leetcode 513, 112, 106</title>
    <link href="http://example.com/2024/03/12/Day-18-Leetcode-513-112-106/"/>
    <id>http://example.com/2024/03/12/Day-18-Leetcode-513-112-106/</id>
    <published>2024-03-12T15:14:06.000Z</published>
    <updated>2024-04-19T05:42:46.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.html">513.找树左下角的值</a><br><a href="https://programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html">112. 路径总和，113. 路径总和ii</a><br><a href="https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html">106.从中序与后序遍历序列构造二叉树，105.从前序与中序遍历序列构造二叉树</a></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106.从中序与后序遍历序列构造二叉树"></a>106.从中序与后序遍历序列构造二叉树</h3><p><code>vector&lt;int&gt; lm(inorder.begin(), inorder.begin() + i);</code>创建了一个左闭右开的区间。在C++中，<code>std::vector</code>的这个构造函数接受两个迭代器作为参数，分别表示要复制的范围的开始和结束。这个范围遵循左闭右开的原则，即包括开始位置的元素，但不包括结束位置的元素。</p><p><strong>注意：不可以写作<code>vector&lt;int&gt; lm(0, i)</code>。传入数字的功效和传入迭代器的功效是完全不同的，传入数字的写法无法运行出正确的结果。只有传入两个迭代器的写法是表示创建了一个左闭右开的区间。</strong></p><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h3><p>拿到本题后，我先复习了层序遍历的代码，然后先拿层序遍历法尝试一下。本题果然可以简单地用层序遍历解决：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面两行代码可以简写为return res.back().front();</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans = res.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">return</span> ans.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在尝试用递归做本题。首先需要考虑前/中/后序遍历。发现确实不好写，不知道该采用怎样的遍历顺序，且终止条件也不知道该怎么写，直接看卡尔的讲解。</p><h3 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h3><p>本题用层序遍历肯定不好做，因为涉及到从root节点到叶子节点。我尝试用递归解决本题。本题肯定涉及到回溯，搜索完一条root节点到叶子节点的和之后，若没找到targetSum，还需要返回root节点，寻找到新的叶子节点的路径。我不会做此题，直接看卡尔的讲解。</p><h3 id="113-路径总和ii"><a href="#113-路径总和ii" class="headerlink" title="113. 路径总和ii"></a>113. 路径总和ii</h3><p>本题我尝试用112的方法独立完成，但是没有成功，其实我写的代码离能成功运行的代码已经很接近了，思路没错就是部分细节不对。本题的方法应该和112相同，但代码实现上会复杂一些。</p><h3 id="106-从中序与后序遍历序列构造二叉树-1"><a href="#106-从中序与后序遍历序列构造二叉树-1" class="headerlink" title="106.从中序与后序遍历序列构造二叉树"></a>106.从中序与后序遍历序列构造二叉树</h3><p>本题是二叉树中的难题，我没有什么思路，直接来看卡尔的视频。</p><h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h3><p>本题的核心思路和106完全一致，我独立写出了本题的代码。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="513-找树左下角的值-1"><a href="#513-找树左下角的值-1" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h3><p>树左下角的值：树的最后一行最靠左侧的值（不一定是左孩子）。本题用层序遍历（迭代法）最合适，目标值就是最后一层的第一个值。<strong>本题用迭代法比用递归法更简单直观</strong>。现在主要讲解递归法。</p><p>如何用递归法找到树左下角的值？深度最大的叶子节点一定在最后一行。因为本题不需要处理中节点，只需要先遍历左节点即可，<strong>因此本题使用前中后序遍历都可</strong>。<strong>只要保证先遍历左节点，且得到的是深度最大的节点</strong>，找到的就是最后一行最靠左侧的节点。现在开始写代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录二叉树最大深度的全局变量</span></span><br><span class="line"><span class="type">int</span> maxDepth = INT_MIN; <span class="comment">// 初始化为int中的最小值</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 若当前深度大于maxDepth，则更新res为当前节点的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// depth用于记录当前遍历的节点的深度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件：遍历到叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 若当前深度大于maxDepth，则更新res为当前节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (depth &gt; maxDepth) </span><br><span class="line">        &#123;</span><br><span class="line">            maxDepth = depth;</span><br><span class="line">            res = root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 单层递归的逻辑，前中后序遍历皆可，本题不需要中节点的处理逻辑</span></span><br><span class="line">    <span class="comment">// 左节点</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">    &#123;</span><br><span class="line">        depth ++ ;</span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;left, depth); <span class="comment">// 递归</span></span><br><span class="line">        depth -- ; <span class="comment">// 回溯，即回退到左节点的父节点，然后遍历父节点的右节点，不回溯则会一直向左遍历</span></span><br><span class="line">        <span class="comment">// 以上三行代码可以简写为traversal(root-&gt;left, depth + 1)</span></span><br><span class="line">        <span class="comment">// 因为depth + 1并没有改变depth的值，相当于在traversal中+1，在traversal之后复原</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 右节点</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        depth ++ ;</span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;right, depth);</span><br><span class="line">        depth -- ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题的递归解法同样显示地展现了回溯。根据上述核心代码，我写出了本题递归解法的完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> maxDepth = INT_MIN; <span class="comment">// 直接int maxDepth = 0也可以</span></span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件，遍历到叶子节点</span></span><br><span class="line">        <span class="comment">// 若当前深度大于最大深度，则需要更新最大深度和结果</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (depth &gt; maxDepth)</span><br><span class="line">            &#123;</span><br><span class="line">                res = root-&gt;val;</span><br><span class="line">                maxDepth = depth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单层递归的逻辑</span></span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            depth ++ ;</span><br><span class="line">            <span class="built_in">traversal</span>(root-&gt;left, depth);</span><br><span class="line">            depth -- ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            depth ++ ;</span><br><span class="line">            <span class="built_in">traversal</span>(root-&gt;right, depth);</span><br><span class="line">            depth -- ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traversal</span>(root, <span class="number">1</span>); <span class="comment">// root节点的深度一般被规定为1，当然规定为0也可以</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本题的层序遍历解法其实也有更简便的写法，不需要浪费空间复杂度来存储树中的所有元素的值。代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) res = node-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="112-路径总和-1"><a href="#112-路径总和-1" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h3><p>题意：有无从root节点到叶子节点的一条路径，路径上所有元素之和等于目标和。推荐使用递归法。本题使用前中后序遍历皆可，因为不涉及中节点的处理逻辑，因此中节点放在哪里都可以。规则看似简单，但代码不好写。现在开始写代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值为bool类型，找到一条符合条件的路径，立即从下（叶子节点）往上（根节点）返回true</span></span><br><span class="line"><span class="comment">// cnt：计数器，在主函数中传入目标值</span></span><br><span class="line"><span class="comment">// 如果传入0，从上往下遍历每遍历到一个节点就加上这个节点的值，看遍历到叶子节点时cnt是否等于target，这样代码更复杂，不如直接传入target，每次遍历到一个节点就在target中减去该节点的值，看到叶子节点时cnt是否为0</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">traversal</span><span class="params">(TreeNode* node, <span class="type">int</span> cnt)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件：遇到叶子节点且cnt=0</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span> &amp;&amp; cnt == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span> &amp;&amp; cnt != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 单层递归逻辑</span></span><br><span class="line">    <span class="comment">// 左节点</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt -= node-&gt;left-&gt;val; <span class="comment">// 从cnt中减去左节点的值</span></span><br><span class="line">        <span class="comment">// 若返回true，则说明node的左孩子到叶子节点的路径中有符合题目要求的路径</span></span><br><span class="line">        <span class="comment">// 此时目标值为cnt -= node-&gt;left-&gt;val</span></span><br><span class="line">        <span class="comment">// 此时应该继续向上返回true，这样才能一层层将true的结果返回给根节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">traversal</span>(node-&gt;left, cnt)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 回溯，遍历到叶子节点后，需要回退到根节点去遍历一条新的路径，因此需要回溯</span></span><br><span class="line">        <span class="comment">// 若不回溯，则cnt一直做减法，则遍历完左子树后，遍历右子树时根本不可能找到符合条件的路径</span></span><br><span class="line">        cnt += node-&gt;left-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 右节点，逻辑同上</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt -= node-&gt;right-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">traversal</span>(node-&gt;right, cnt)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        cnt += node-&gt;right-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一直不return true, 则return false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码没有对中节点的处理逻辑，因此前中后序都可以。对左右节点的处理逻辑可以简写为一句话，我以左节点为例：<code>if (traversal(node-&gt;left, cnt -= node-&gt;left-&gt;val)) return true;</code>，但不建议这样写，因为无法清晰地看到回溯的逻辑。</p><p>本题的完整代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traversal</span><span class="params">(TreeNode* node, <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件：遍历到叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span> &amp;&amp; cnt == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// if (node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL &amp;&amp; cnt != 0)</span></span><br><span class="line">        <span class="comment">//     return false;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt -= node-&gt;left-&gt;val;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">traversal</span>(node-&gt;left, cnt)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            cnt += node-&gt;left-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt -= node-&gt;right-&gt;val;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">traversal</span>(node-&gt;right, cnt)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            cnt += node-&gt;right-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(root, targetSum - root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="113-路径总和ii-1"><a href="#113-路径总和ii-1" class="headerlink" title="113. 路径总和ii"></a>113. 路径总和ii</h3><p>本题由于要遍历整棵树，找到所有路径，因此递归函数不要返回值，遍历完整棵树后，在函数外定义好的 <code>path</code>和 <code>res</code>中自然会被递归函数写入应有的结果。如果只是要找树中符合条件的一条路径，那么递归函数就要返回值，一旦遍历到叶子节点时找到了合适的路径，就立即返回true，要是一直找不到符合条件的路径，再返回false。</p><p>本题的代码相较于上一题要复杂一些，但<strong>核心思路其实是相同的</strong>。以下几点是与112的主要差异。</p><ul><li>首先定义一个 <code>vector&lt;int&gt; path</code>来存放一条符合条件的路径，再定义一个 <code>vector&lt;vector&lt;int&gt;&gt; res</code>来存放树中所有符合条件的路径。</li><li>在针对左右节点的操作中，需要回溯，但与112不同的是，本题中的回溯不仅需要回溯 <code>cnt</code>，还需要回溯 <code>path</code>中的元素（先将左右节点放入path中，回溯时又从path中弹出左右节点）。</li><li>由于本题的递归函数没有返回值，因此只需要返回空即可，即 <code>return;</code>。</li><li>本题需要在主函数中在path中事先插入根节点的值，作为启动的引线（可以想想极端情况，树中只有一个节点，即根节点，如果不在path中事先插入根节点的值，那么即使根节点的值等于 <code>targetSum</code>，res中也不会存有根节点的值）。</li></ul><p>本题的具体代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 本题的递归函数不需要返回值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* node, <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right == <span class="literal">NULL</span> &amp;&amp; node-&gt;left == <span class="literal">NULL</span> &amp;&amp; cnt == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right == <span class="literal">NULL</span> &amp;&amp; node-&gt;left == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(node-&gt;left-&gt;val);</span><br><span class="line">            cnt -= node-&gt;left-&gt;val;</span><br><span class="line">            <span class="built_in">traversal</span>(node-&gt;left, cnt); <span class="comment">// 递归</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">            cnt += node-&gt;left-&gt;val; <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(node-&gt;right-&gt;val);</span><br><span class="line">            cnt -= node-&gt;right-&gt;val;</span><br><span class="line">            <span class="built_in">traversal</span>(node-&gt;right, cnt); <span class="comment">// 递归</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">            cnt += node-&gt;right-&gt;val; <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathSum</span>(TreeNode* root, <span class="type">int</span> targetSum) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</span><br><span class="line">        path.<span class="built_in">push_back</span>(root-&gt;val); <span class="comment">// 事先把根节点放进路径</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(root, targetSum - root-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="106-从中序与后序遍历序列构造二叉树-2"><a href="#106-从中序与后序遍历序列构造二叉树-2" class="headerlink" title="106.从中序与后序遍历序列构造二叉树"></a>106.从中序与后序遍历序列构造二叉树</h3><p>任务：从中序和后序数组中构造出一棵唯一的二叉树。思路：如何用两个数组构造二叉树？<br>中序：左中右，例：9 3 15 20 7<br>后序：左右中，例：9 15 7 20 3<br>由于需要确定根节点，根节点是中节点，而根据中序数组无法确定出根节点的位置，这时就需要后序数组。后序数组的最后一个元素一定是中节点，也就是根节点。以上述两数组为例，根节点就是3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[3]</span><br></pre></td></tr></table></figure><p>再看中序数组，root是3，则左节点是9，右节点是15，20，7。这一步操作就是利用后序数组中找到的root节点在中序数组中完成切割的任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[3] --&gt; B[9];</span><br><span class="line">    A --&gt; C[x];</span><br></pre></td></tr></table></figure><p>再利用中序数组中切割出的两部分在后序数组中完成切割。由上一步知，左节点是9，右节点是15，20，7。结合后序数组知，右节点是15，7，20。右节点中最后一个元素是20，因此20是右子树的中节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[3] --&gt; B[9];</span><br><span class="line">    A --&gt; C[20];</span><br></pre></td></tr></table></figure><p>再利用后序数组去切割中序数组。20是右子树的中节点，中序数组中的右区间为15，20，7，因此左节点是15，右节点是7。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[3] --&gt; B[9];</span><br><span class="line">    A --&gt; C[20];</span><br><span class="line">    C --&gt; F[15];</span><br><span class="line">    C --&gt; G[7];</span><br></pre></td></tr></table></figure><p>关键：先通过后序数组找到root节点，再利用root节点切割中序数组，再利用中序数组切割出的左右区间切割后序数组，交替进行。可以具体为以下六步：</p><ol><li>后序数组为空，说明无root节点，返回空的树</li><li>后序数组最后一个元素作为root</li><li>寻找中序数组中root的位置作为切割点</li><li>切割中序数组，切为左右区间</li><li>根据切割中序数组得到的左右区间切割后序数组</li><li>递归处理，构造下一层子树</li></ol><p>现在开始写本题的伪代码（注重整体思路而非细节）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定递归函数的参数和返回值</span></span><br><span class="line"><span class="comment">// 返回值：二叉树的根节点</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt; inorder, vector&lt;<span class="type">int</span>&gt; postorder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件：后序数组为空</span></span><br><span class="line">    <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 后序数组的最后一个元素为root节点的值</span></span><br><span class="line">    <span class="type">int</span> rootvalue = postorder[postorder.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 优化：若postorder中只有一个元素，则该元素必为叶子节点（root节点也是叶子节点）</span></span><br><span class="line">    <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 单层递归的逻辑</span></span><br><span class="line">    <span class="comment">// 寻找中序数组中root的位置作为切割点</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 返回中序数组中root的index</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; inorder.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder[i] == rootvalue)</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 根据root切中序数组，得到一个左中序数组和一个右中序数组</span></span><br><span class="line">    <span class="comment">// 切后序数组，拿上一步得到的左中序数组来切出后序数组的左区间和右区间，得到一个左后序数组和一个右后序数组</span></span><br><span class="line">    <span class="comment">// 递归处理左区间和右区间，即递归构建root的左右子树</span></span><br><span class="line">    root-&gt;left = <span class="built_in">traversal</span>(左中序, 左后序);</span><br><span class="line">    root-&gt;right = <span class="built_in">traversal</span>(右中序, 右后序);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>切中序数组和切后序数组时需要有统一的区间定义。要么都坚持左闭右开，要么都坚持左闭右闭。</li><li>先切中序数组，再切后序数组。因为中序数组中的左区间和后序数组中的左区间一定相同。</li><li>建议debug时打印切中序数组得到的左中序和右中序数组，打印切后序数组的左后序和右后序数组。</li></ul><p>中序和前序数组也可以唯一地确定一棵二叉树。前序数组是中左右，拿着前序数组的第一个元素，即为root元素，拿去切中序数组。剩下的思路是相同的。</p><p>中序和后序数组可以唯一地确定二叉树，中序和前序数组也可以唯一地确定二叉树，<strong>但后序和前序数组不能唯一地确定二叉树</strong>。原因：前序数组和后序数组都可以直接知道root在哪里，但前序和后序数组的左右区间的分割点我们找不到。中序数组的重要性在于其把左右区间给分隔开了。举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[1] --&gt; B[2];</span><br><span class="line">    B[2] --&gt; C[3]</span><br><span class="line">    B[2] --&gt; E[null]</span><br><span class="line">    A --&gt; D[null];</span><br></pre></td></tr></table></figure><p>对以上二叉树，前序数组：123，后序数组：321</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[1] --&gt; B[null];</span><br><span class="line">    A[1] --&gt; C[2]</span><br><span class="line">    C[2] --&gt; D[null]</span><br><span class="line">    C[2] --&gt; E[3]</span><br></pre></td></tr></table></figure><p>对以上二叉树，前序数组：123，后序数组：321<br>虽然两棵二叉树的前序数组和后序数组完全一致，但这两棵二叉树完全不同，<strong>因此仅靠前序和后序数组不能唯一地确定二叉树</strong>。</p><p>本题是二叉树中的难题、复杂题，需要经常复习。以上笔记cover了易错点。</p><p>根据上述原理，我写出了以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootvalue = postorder[postorder.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到inorder中root的下标</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; inorder.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == rootvalue)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将inorder根据i分为左中数组和右中数组</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; lm;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; rm;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j ++ ) </span><br><span class="line">        &#123;</span><br><span class="line">            lm.<span class="built_in">push_back</span>(inorder[j]); </span><br><span class="line">            cout &lt;&lt; inorder[j] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 打印lm数组中的所有元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; inorder.<span class="built_in">size</span>(); j ++ ) </span><br><span class="line">        &#123;</span><br><span class="line">            rm.<span class="built_in">push_back</span>(inorder[j]); </span><br><span class="line">            cout &lt;&lt; inorder[j] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 打印rm数组中的所有元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        postorder.<span class="built_in">resize</span>(postorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将postorder根据上一步的结果分为左后数组和右后数组</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; lb;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; rb;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; lm.<span class="built_in">size</span>(); l ++ ) </span><br><span class="line">        &#123;</span><br><span class="line">            lb.<span class="built_in">push_back</span>(postorder[l]); </span><br><span class="line">            cout &lt;&lt; postorder[l] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 打印lb数组中的所有元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = lm.<span class="built_in">size</span>(); l &lt; postorder.<span class="built_in">size</span>(); l ++ ) </span><br><span class="line">        &#123;</span><br><span class="line">            rb.<span class="built_in">push_back</span>(postorder[l]); </span><br><span class="line">            cout &lt;&lt; postorder[l] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 打印rb数组中的所有元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(lm, lb);</span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(rm, rb);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder.<span class="built_in">size</span>() == <span class="number">0</span> || postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(inorder, postorder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该代码可以通过201 / 202个测试样例，但有一个测试样例超时了，这就需要对上述代码进行优化。写出上述代码时，我犯了一个错误。在将 <code>postorder</code>根据 <code>inorder</code>的结果分为左后数组和右后数组的过程中，我的第一版代码采用了以下的写法（逻辑：把左中数组的最后一个元素作为分界点，在后序数组中查询之，并以此分界点将后序数组划分为左后数组和右后数组）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; lb;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; rb;</span><br><span class="line"><span class="type">int</span> value = lm[lm.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; lm.<span class="built_in">size</span>(); k ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (postorder[k] == value)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;k=&quot; &lt;&lt; k &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; k; l ++ ) </span><br><span class="line">&#123;</span><br><span class="line">    lb.<span class="built_in">push_back</span>(postorder[l]);</span><br><span class="line">    cout &lt;&lt; postorder[l] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = k + <span class="number">1</span>; l &lt; postorder.<span class="built_in">size</span>(); l ++ ) </span><br><span class="line">&#123;</span><br><span class="line">    rb.<span class="built_in">push_back</span>(postorder[l]);</span><br><span class="line">    cout &lt;&lt; postorder[l] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>当左中序数组 <code>lm</code>为空时，<code>int value = lm[lm.size() - 1];</code>会访问 <code>lm[-1]</code>。该元素显然不存在，故会报错：index error。因此不能这样写，应该采用按照左中序数组的元素数量分割后序数组的写法。</p><p>我对上述代码进行简易的优化后（将resize函数改为pop_back函数，时间复杂度略微降低），就可以通过本题，代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootvalue = postorder[postorder.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; inorder.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == rootvalue)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; lm, rm;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j ++ ) lm.<span class="built_in">push_back</span>(inorder[j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; inorder.<span class="built_in">size</span>(); j ++ ) rm.<span class="built_in">push_back</span>(inorder[j]);</span><br><span class="line"></span><br><span class="line">        postorder.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; lb, rb;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lm.<span class="built_in">size</span>(); j ++ ) lb.<span class="built_in">push_back</span>(postorder[j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = lm.<span class="built_in">size</span>(); j &lt; postorder.<span class="built_in">size</span>(); j ++ ) rb.<span class="built_in">push_back</span>(postorder[j]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(lm, lb);</span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(rm, rb);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder.<span class="built_in">size</span>() == <span class="number">0</span> || postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(inorder, postorder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，还有进一步优化的空间，代码也可以写得更为简洁。我写下了如下的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件1：postorder中为空</span></span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 终止条件2：postorder中只有一个元素，即为root</span></span><br><span class="line">        <span class="type">int</span> rootvalue = postorder[postorder.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line">        <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// postorder中的最后一个元素为root，在inorder中找到root的下标</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; inorder.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == rootvalue)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 将inorder以root作为分割点分割为左中序数组和右中序数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lm</span><span class="params">(inorder.begin(), inorder.begin() + i)</span></span>; <span class="comment">// 左中序数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rm</span><span class="params">(inorder.begin() + i + <span class="number">1</span>, inorder.end())</span></span>; <span class="comment">// 右中序数组</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 删去postorder的最后一个元素（即root）</span></span><br><span class="line">        <span class="comment">// 也可写作postorder.resize(postorder.size() - 1);</span></span><br><span class="line">        postorder.<span class="built_in">pop_back</span>();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 将postorder以上一步分割得到的左中序数组分割为左后序数组和右后序数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lb</span><span class="params">(postorder.begin(), postorder.begin() + lm.size())</span></span>; <span class="comment">// 左后序数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rb</span><span class="params">(postorder.begin() + lm.size(), postorder.end())</span></span>; <span class="comment">// 右后序数组</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 递归构建root的左子树和右子树</span></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(lm, lb); <span class="comment">// 构建左子树，传入的参数为左中序数组和左后序数组</span></span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(rm, rb); <span class="comment">// 构建右子树，传入的参数为右中序数组和右后序数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 中序数组或后序数组为空，则树不存在，返回空</span></span><br><span class="line">        <span class="keyword">if</span> (inorder.<span class="built_in">size</span>() == <span class="number">0</span> || postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(inorder, postorder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码的运行时间基本可以减半，我觉得主要原因是 <code>vector&lt;int&gt; lm(inorder.begin(), inorder.begin() + i);</code>这种写法的时间复杂度要优于遍历数组然后赋值。</p><p>本题的下标索引写法（能大大降低空间复杂度，不需要每层递归产生新的数组，只需要对索引重新赋值即可，本写法的代码逻辑和上面的写法完全一致）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder, <span class="type">int</span> inbegin, <span class="type">int</span> inend, <span class="type">int</span> postbegin, <span class="type">int</span> postend)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postend == postbegin) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="type">int</span> rootvalue = postorder[postend - <span class="number">1</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line">        <span class="keyword">if</span> (postend - postbegin == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inorder中找到root</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = inbegin; i &lt; inend; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == rootvalue)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// root分割inorder为左中序数组和右中序数组</span></span><br><span class="line">        <span class="type">int</span> leftinorderbegin = inbegin;</span><br><span class="line">        <span class="type">int</span> leftinorderend = i;</span><br><span class="line">        <span class="type">int</span> rightinorderbegin = i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rightinorderend = inend;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序数组删去root</span></span><br><span class="line">        postend -- ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将postorder分割为左后序数组和右后序数组</span></span><br><span class="line">        <span class="type">int</span> leftpostorderbegin = postbegin;</span><br><span class="line">        <span class="type">int</span> leftpostorderend = postbegin + leftinorderend - leftinorderbegin;</span><br><span class="line">        <span class="type">int</span> rightpostorderbegin = postbegin + leftinorderend - leftinorderbegin;</span><br><span class="line">        <span class="type">int</span> rightpostorderend = postend;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(inorder, postorder, leftinorderbegin, leftinorderend, leftpostorderbegin, leftpostorderend);</span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(inorder, postorder, rightinorderbegin, rightinorderend, rightpostorderbegin, rightpostorderend);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder.<span class="built_in">size</span>() == <span class="number">0</span> || postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(inorder, postorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>(), <span class="number">0</span>, postorder.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="105-从前序与中序遍历序列构造二叉树-1"><a href="#105-从前序与中序遍历序列构造二叉树-1" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h3><p>本题的代码思路和上题完全一致，我独立一遍写出了本题的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本题类似于106：利用中序数组和后序数组构造二叉树</span></span><br><span class="line"><span class="comment">// 本题关键思路：前序数组第一位是root</span></span><br><span class="line"><span class="comment">// 在inorder中查找root</span></span><br><span class="line"><span class="comment">// 以root作为分割点，将inorder分为左中序数组和右中序数组</span></span><br><span class="line"><span class="comment">// 根据上一步结果，将preorder分为左前序数组和右前序数组</span></span><br><span class="line"><span class="comment">// 递归处理左右子树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootvalue = preorder[<span class="number">0</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line">        <span class="keyword">if</span> (preorder.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在inorder中查找root</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; inorder.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == rootvalue)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以root作为分割点，将inorder分为左中序数组和右中序数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lm</span><span class="params">(inorder.begin(), inorder.begin() + i)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rm</span><span class="params">(inorder.begin() + i + <span class="number">1</span>, inorder.end())</span></span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 删去preorder的头元素（即root元素）</span></span><br><span class="line">        <span class="built_in">reverse</span>(preorder.<span class="built_in">begin</span>(), preorder.<span class="built_in">end</span>());</span><br><span class="line">        preorder.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(preorder.<span class="built_in">begin</span>(), preorder.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据上一步结果，将preorder分为左前序数组和右前序数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lf</span><span class="params">(preorder.begin(), preorder.begin() + lm.size())</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rf</span><span class="params">(preorder.begin() + lm.size(), preorder.end())</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归处理左右子树</span></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(lf, lm);</span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(rf, rm);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.<span class="built_in">size</span>() == <span class="number">0</span> || inorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(preorder, inorder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本题的下标索引写法如下所示。用下标索引写法，本题删去前序数组中的第一个元素（root）就非常简单，只需要 <code>prebegin ++</code>即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">traversal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> prebegin, <span class="type">int</span> preend, <span class="type">int</span> inbegin, <span class="type">int</span> inend)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prebegin == preend) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootvalue = preorder[prebegin];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootvalue);</span><br><span class="line">        <span class="keyword">if</span> (prebegin - preend == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inorder中找root</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = inbegin; i &lt; inend; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == rootvalue)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用root划分inorder</span></span><br><span class="line">        <span class="type">int</span> leftinbegin = inbegin;</span><br><span class="line">        <span class="type">int</span> leftinend = i;</span><br><span class="line">        <span class="type">int</span> rightinbegin = i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rightinend = inend;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// preorder中删去root</span></span><br><span class="line">        prebegin ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用划分inorder的结果划分preorder</span></span><br><span class="line">        <span class="type">int</span> leftprebegin = prebegin;</span><br><span class="line">        <span class="type">int</span> leftpreend = prebegin + leftinend - leftinbegin;</span><br><span class="line">        <span class="type">int</span> rightprebegin = prebegin + leftinend - leftinbegin;</span><br><span class="line">        <span class="type">int</span> rightpreend = preend;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">traversal</span>(preorder, inorder, leftprebegin, leftpreend, leftinbegin, leftinend);</span><br><span class="line">        root-&gt;right = <span class="built_in">traversal</span>(preorder, inorder, rightprebegin, rightpreend, rightinbegin, rightinend);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.<span class="built_in">size</span>() == <span class="number">0</span> || inorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traversal</span>(preorder, inorder, <span class="number">0</span>, preorder.<span class="built_in">size</span>(), <span class="number">0</span>, inorder.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="513-找树左下角的值-2"><a href="#513-找树左下角的值-2" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h3><ol><li>本题用层序遍历法解决更简单，用递归法解决更麻烦。</li><li>本题的层序遍历解法不需要浪费空间复杂度来存储整棵二叉树中的元素值或者二叉树中某一层的元素值。直接存储每一层最左侧元素的值，然后一层层从上往下遍历即可，最后自然会更新为树左下角的值。</li><li>本题的递归解法的核心在于：保证优先左边搜索，然后记录深度最大的叶子节点，此时得到的节点就是树的最后一行最左边的节点。</li><li><p>递归三部曲：</p><ul><li>确定函数的返回值和传入的参数<br>本题可以用全局变量记录树的最大深度和结果，这样traversal函数就不需要返回值，只需要在函数中更新记录结果的全局变量即可。传入的参数为根节点和当前节点的深度。</li><li>确定终止条件<br>当遍历到叶子节点时，终止。若叶子节点的深度大于最大深度，则更新最大深度和结果。</li><li>单层递归逻辑<br>前中后序遍历都可以，只需要保证优先遍历左节点即可。注意要显式地回溯，这样遍历完父节点的左节点后才能回到父节点，然后接着遍历父节点的右节点。否则会一直向左遍历。</li></ul></li></ol><h3 id="112-路径总和-2"><a href="#112-路径总和-2" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h3><ol><li>本题推荐用递归解，因为不需要处理中节点，所以前中后序遍历都可。</li><li>本题的递归函数的返回值为bool类型。因为一旦找到一条符合条件的路径，要立即从下（叶子节点）往上（根节点）返回true，因此递归函数需要返回值。</li><li>本题传入递归函数的参数除去node外，还需要传入cnt。cnt直接是targetSum（确切来说是 <code>targetSum - root-&gt;val;</code>），遍历到一个节点就减去该节点的值（从根节点开始遍历，因此传入时就要减去根节点的值），观察遍历到叶子节点时cnt是否为0即可。</li><li><p>递归三部曲：</p><ul><li>确定函数的返回值和传入的参数：返回值bool，传入的参数node和cnt</li><li>确定终止条件：遍历到叶子节点且cnt == 0，则返回true</li><li><p>单层递归逻辑</p><p>先处理左节点，首先cnt值减去左孩子的值，然后递归判断左孩子到叶子节点的路径中是否有满足条件的路径，若有，则需要从下往上返回true。然后再回溯，将减去的cnt值加回来。若不回溯，cnt就一直减小，导致右孩子到叶子节点的路径中不可能有满足条件的路径。对右节点的处理也是类似的。</p></li></ul></li><li>本题需要特别注意：调用递归函数时，传入的参数是 <code>targetSum - root-&gt;val</code>，而不是 <code>targetSum</code>。原因是在递归函数的终止条件中，若二叉树中只有root节点不为NULL，且cnt为零时，就返回true，因此本处的cnt应该已经将root节点的值排除在外了。若cnt不把root节点的值排除在外，则在二叉树只有root节点的情况下，永远不可能返回true，因为cnt不可能为0。</li></ol><h3 id="113-路径总和ii-2"><a href="#113-路径总和ii-2" class="headerlink" title="113. 路径总和ii"></a>113. 路径总和ii</h3><ol><li>本题和112的基本思路完全一致，但应当关注和112的差异，主要有以下5点差异。</li><li>本题需要在函数外先定义一个 <code>vector&lt;int&gt; path</code>来存放一条符合条件的路径，再定义一个 <code>vector&lt;vector&lt;int&gt;&gt; res</code>来存放树中所有符合条件的路径。</li><li>本题的递归函数不需要返回值，112的递归函数需要返回值。具体原因见本题的实现部分。</li><li>由于本题的递归函数不需要返回值，因此本题的递归函数在返回时只需要写 <code>return;</code>。</li><li>在处理左右节点的逻辑中，需要对 <code>cnt</code>操作并将左右节点的值放入 <code>path</code>中，然后再调用递归函数。因此在回溯时，也需要同时恢复 <code>cnt</code>的值和 <code>path</code>数组。</li><li>本题需要在主函数中在path中事先插入根节点的值，作为启动的引线。</li></ol><h3 id="106-从中序与后序遍历序列构造二叉树-3"><a href="#106-从中序与后序遍历序列构造二叉树-3" class="headerlink" title="106.从中序与后序遍历序列构造二叉树"></a>106.从中序与后序遍历序列构造二叉树</h3><ol><li><p>本题的具体操作过程可以举一个具体的例子来展现，参见本题的实现部分。</p></li><li><p>本题的核心思路在于以下五步：</p><ul><li>根据后序数组找到root（后序数组中的最后一位）</li><li>在中序数组中查找root的下标</li><li>以root为分割点，将中序数组分割为左中序数组和右中序数组</li><li>在后序数组中找到与左中序数组相同的一段，即为左后序数组，剩下的后序数组为右后序数组</li><li>递归构建root的左右子树（根据左右中序数组和左右后序数组）</li></ul></li><li><p>本题的调试方法：打印出左右中序数组和左右后序数组，观察它们是否符合预期</p></li><li><p>中序和后序数组可以唯一地确定一棵二叉树，前序和中序数组也可以唯一地确定一棵二叉树，但前序和后序数组不可以唯一地确定一棵二叉树，我在实现部分举出了反例。原因：前序数组和后序数组都可以直接知道root在哪里，但前序和后序数组的左右区间的分割点我们找不到。中序数组的重要性在于其把左右区间给分隔开了。</p></li><li><p>本题和下一题的更佳写法是下标索引写法，即每次用下标索引来分割。虽然时间复杂度基本保持不变，但空间复杂度相比于传统写法大大降低了，因为不需要每层递归产生新的数组，只需要对索引重新赋值即可。</p></li><li><p>下标索引写法挺容易出错的，特别是在确定左右区间的边界上，搞不定的话就采用简单直接的普通写法。</p></li><li><p>我写的下标索引写法，还可以做进一步优化，若将划分postorder的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> leftpostorderbegin = postbegin;</span><br><span class="line"><span class="type">int</span> leftpostorderend = postbegin + leftinorderend - leftinorderbegin;</span><br><span class="line"><span class="type">int</span> rightpostorderbegin = postbegin + leftinorderend - leftinorderbegin;</span><br><span class="line"><span class="type">int</span> rightpostorderend = postend;</span><br></pre></td></tr></table></figure><p>直接写作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> leftpostorderbegin = postbegin;</span><br><span class="line"><span class="type">int</span> leftpostorderend = postbegin + i - inbegin;</span><br><span class="line"><span class="type">int</span> rightpostorderbegin = postbegin + i - inbegin;</span><br><span class="line"><span class="type">int</span> rightpostorderend = postend - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>即将</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">postend -- ;</span><br><span class="line"><span class="type">int</span> leftinorderbegin = inbegin;</span><br><span class="line"><span class="type">int</span> leftinorderend = i;</span><br><span class="line"><span class="type">int</span> rightinorderbegin = i + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> rightinorderend = inend;</span><br></pre></td></tr></table></figure><p>直接代入划分postorder的代码中，时间复杂度可以进一步降低。对于106题的下标索引写法也是如此。</p></li></ol><h3 id="105-从前序与中序遍历序列构造二叉树-2"><a href="#105-从前序与中序遍历序列构造二叉树-2" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h3><ol><li><p>本题的核心思路和上题完全相同，也是在于以下五步：</p><ul><li>前序数组第一位是root</li><li>在inorder中查找root</li><li>以root作为分割点，将inorder分为左中序数组和右中序数组</li><li>根据上一步结果，将preorder分为左前序数组和右前序数组</li><li>递归处理左右子树</li></ul></li><li>本题和上题的不同之处在于，上题在分割出左右中序数组后，需要删去后序数组的最后一个元素，即root元素。本题则是在分割出左右中序数组后，需要删去前序数组的第一个元素，即root元素。删去数组的最后一个元素的操作相对简单，只需要 <code>pop_back</code>即可，但删去数组的第一个元素的操作相对复杂。我想到的办法是翻转数组，删去数组最后一个元素，再翻转数组。</li><li>用下标索引写法，本题删去前序数组中的第一个元素（root）就非常简单，只需要 <code>prebegin ++</code>即可。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://programmercarl.com/0513.%E6%89%BE%E6%A0%91%E5%B7%A6%E</summary>
      
    
    
    
    <category term="算法（二叉树）" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="层序遍历" scheme="http://example.com/tags/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
    <category term="递归解法" scheme="http://example.com/tags/%E9%80%92%E5%BD%92%E8%A7%A3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Summary of full stack netflix clone</title>
    <link href="http://example.com/2024/03/07/Summary-of-full-stack-netflix-clone/"/>
    <id>http://example.com/2024/03/07/Summary-of-full-stack-netflix-clone/</id>
    <published>2024-03-07T09:39:45.000Z</published>
    <updated>2024-03-08T06:09:53.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>Frontend: React</li><li>Server-side Rendering: Next.js</li><li>Styling: Tailwind CSS</li><li>Data abstraction layer: Prisma</li><li>Storage: MongoDB</li><li>Authentication: NextAuth</li><li>Deploy: Vercel</li><li>Typescript</li><li>the entire website fully</li></ul><p>The entire website fully responsive across all devices.</p><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul><li>credential login: username + password</li><li>profile: automatically generated once we register</li><li>homepage: loaded with a random movie-billboard</li><li>movies: load from database</li><li>favourites: add movies as favourites</li><li>botton:  shows more information about the movie</li><li>play the movie</li><li>Google and GitHub oauth login</li></ul><h2 id="精简笔记与全栈开发的一般流程"><a href="#精简笔记与全栈开发的一般流程" class="headerlink" title="精简笔记与全栈开发的一般流程"></a>精简笔记与全栈开发的一般流程</h2><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><p>先在pages中创建auth.tsx，然后在components中创建Input.tsx，将其加入到auth.tsx中。实现next auth时需要创建pages/api/[…nextauth].ts文件。</p><h3 id="通过授权登录保护登录界面以外的路径"><a href="#通过授权登录保护登录界面以外的路径" class="headerlink" title="通过授权登录保护登录界面以外的路径"></a>通过授权登录保护登录界面以外的路径</h3><p>保护路由：</p><ul><li>serverAuth.ts（lib）：利用 next-auth 的 getSession 实现API路由的用户登录检查，防止未登录用户访问。</li><li>current.ts（pages/api）：API路由，使用 serverAuth.ts 验证用户登录，返回用户信息或错误。</li></ul><p>前端用户信息获取：</p><ul><li>fetcher.ts（lib）：通过 axios 封装的简易数据获取函数。</li><li>useCurrentUser.ts（hooks）：自定义Hook，结合 swr 和 fetcher.ts 从 /api/current 获取当前登录用户信息。</li></ul><p>客户端路由保护与个人资料页面：</p><ul><li>index.tsx 和 profiles.tsx（pages）：通过 getServerSideProps 中的 getSession 实现路由保护，控制访问权限。</li><li>页面重定向：auth.tsx 调整登录后重定向逻辑，确保正确导向 /profiles。</li></ul><p>实现细节：</p><ul><li>用户状态展示：在 profiles.tsx 中展示用户信息，并实现点击默认头像返回首页的功能。</li><li>环境配置调整：通过修改 .env 和 package.json 解决开发中遇到的端口配置问题，保证登录流程正常。</li></ul><h3 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h3><p>在这个项目中，开发了一个导航组件（Navigation Component），涉及了几个主要的文件和它们之间的关系，以及各自的功能和作用：</p><ol><li><p>index.tsx（主页文件）：这是应用的入口页面，最初被清理以只保留基本结构。它通过 getServerSideProps 功能检查用户的会话，基于会话存在与否决定重定向到登录页面或显示主内容。后续，Navbar 组件被引入到此文件中，作为页面的一部分。</p></li><li><p>Navbar.tsx（导航栏组件）：位于 components 文件夹内，Navbar 是顶部的导航条组件，负责显示应用的导航链接。它包括了一个动态背景变化的功能，随着页面滚动，背景从透明变为不透明。</p></li><li><p>NavbarItem.tsx（导航项组件）：同样位于 components 文件夹内，用于表示 Navbar 中的单个导航链接。它通过 props 接收 label 来显示不同的导航项。</p></li><li><p>MobileMenu.tsx（移动菜单组件）：这个组件负责在小屏幕上显示一个可展开的移动菜单。它通过 visible prop 控制显示状态，包含多个 NavbarItem 组件来展示导航选项。</p></li><li><p>AccountMenu.tsx（账户菜单组件）：用于在 Navbar 组件中显示用户的账户菜单，它提供了注销功能并可以通过 visible prop 控制其显示。</p></li></ol><p>项目中还实现了一些额外的交互特性，比如：</p><ul><li>使用 React 的 useState 和 useEffect Hooks 来管理组件的状态和生命周期，例如控制菜单的显示状态和根据页面滚动动态改变导航栏背景。</li><li>通过 useCallback 来优化事件处理函数，避免不必要的重新渲染。</li><li>导航组件和移动菜单的显示逻辑，包括在小屏幕上通过点击“浏览”来展开和隐藏导航项。</li><li>在 Navbar 组件中，引入了 react-icons 库中的图标来增强视觉效果，并通过条件渲染实现了箭头图标的旋转动画，以指示菜单的展开和收起状态。</li></ul><p>整体而言，这个导航组件通过组合多个子组件和利用 React 的特性，实现了一个响应式、具有交互性的用户界面，能够适应不同的设备和屏幕尺寸。</p><h3 id="广告牌组件"><a href="#广告牌组件" class="headerlink" title="广告牌组件"></a>广告牌组件</h3><p>首先将定义有电影信息的json文件手动添加到MongoDB中。<br>然后创建新的api：random，用于随机返回一部电影。<br>在<code>hooks/useBillboard.ts</code>中写代码以避免对首页推荐电影的重复加载。在<code>components</code>中新建<code>Billboard.tsx</code>，然后在<code>index.tsx</code>中引入<code>Billboard</code>。<br>接着在<code>Billboard.tsx</code>中填入具体的内容，目的是fetch the data for a random movie，并继续加入电影、电影名、电影介绍和More info按钮。</p><h3 id="电影列表和电影卡片组件"><a href="#电影列表和电影卡片组件" class="headerlink" title="电影列表和电影卡片组件"></a>电影列表和电影卡片组件</h3><p>定义api: <code>pages/api/movies/index.ts</code>，加载所有电影。<br>接着在hooks文件夹中创建<code>useMovieList.ts</code>，用于返回<code>api/movies</code>中得到的数据。<br>接着在<code>components</code>中创建<code>MovieList.tsx</code>，并在<code>pages/index.tsx</code>中装入MovieList并传入必要的参数，并使用上面定义的hook: <code>useMovieList.ts</code>。<br>接着在<code>components</code>文件夹中创建<code>MovieCard.tsx</code>文件，用于实现电影卡片组件，并将<code>MovieCard</code>放入<code>MovieList.tsx</code>中。</p><h3 id="收藏功能"><a href="#收藏功能" class="headerlink" title="收藏功能"></a>收藏功能</h3><p>定义api: <code>pages/api/favorite.ts</code>，用于实现用户在收藏和取消收藏电影时对数据库的操作。<br>再定义一个api: <code>pages/api/favorites.ts</code>，用于加载我们收藏的电影列表。<br>接着写一个hook: <code>useFavorites.ts</code>，用于调用第二个api从而加载我们收藏的电影列表。<br>再写一个组件<code>components/FavoriteButton.tsx</code>，作为收藏按钮。<br>将该按钮加入MovieCard中。然后在Trending Now列表以外再创建一个My Favorites列表，这是在<code>pages/index.tsx</code>中实现的。<br>最后让favorite按钮变得可交互。这样在Trending Now列表上的电影上的加号时，其就会被添加到My List，然后加号会变成勾。这样一部电影就被收藏了。取消收藏也是同理。</p><h3 id="电影播放功能"><a href="#电影播放功能" class="headerlink" title="电影播放功能"></a>电影播放功能</h3><p>首先定义api: 创建<code>pages/api/movies/[movieId].ts</code>，用于通过外部传入的movieId找到电影。<br>再创建<code>hooks/useMovie.ts</code>，调用上述api，并负责给上述api传入参数movieId。<br>接着写播放按钮：<code>components/PlayButton.tsx</code>，并在<code>components/Billboard.tsx</code>中加入播放按钮。<br>现在实现了点击播放按钮，跳转到另一个页面的功能，接着在MovieCard组件中也实现这个功能。<br>然后具体写跳转到的<code>/watch</code>页面，创建<code>pages/watch/[movieId].tsx</code>，并在这个页面中实现加载视频名字、返回等功能。</p><h3 id="电影详细信息功能"><a href="#电影详细信息功能" class="headerlink" title="电影详细信息功能"></a>电影详细信息功能</h3><p>实现的功能：点击More Info按钮，会显示电影的信息。<br>创建用于状态管理（打开或关闭More Info）的钩子：<code>hooks/useInfoModel.ts</code>。<br>创建显示电影详细信息的组件：<code>components/InfoModal.tsx</code><br>在pages/index.tsx中加入上述组件。<br>给InfoModal组件加上关闭、播放、收藏按钮，最后加上电影信息等字样。<br>利用onClick函数实现点击关闭按钮关闭页面的功能。<br>在<code>pages/index.tsx</code>中实现对组件<code>InfoModal.tsx</code>的触发，从而展现电影的详细信息。<br><code>components/Billboard.tsx</code>中实现点击More Info按钮触发组件<code>InfoModal.tsx</code>，从而展现电影的详细信息。<br>在电影卡片组件中同样实现点击按钮展现电影详细信息。<br>修复个人profile中名字始终加载为username的问题。</p><h3 id="给全栈项目开发新功能的一般过程"><a href="#给全栈项目开发新功能的一般过程" class="headerlink" title="给全栈项目开发新功能的一般过程"></a>给全栈项目开发新功能的一般过程</h3><p>熟悉了上述精简版本的笔记后，我们可以对全栈项目（react + next.js）的开发做一些总结。</p><p>对于实现登录页面和通过授权登录保护登录界面以外的路径，这两项属于偏后端的范畴，主要利用的是next.js的一些特性（特别是pages和api）。这两个任务没有什么一般性的套路，需要用到的文件夹也比较复杂，包括pages, hooks, lib等，跟着讲义一步步实现。</p><p>对于实现导航组件，这个属于偏前端的范畴，主要需要在pages中定义一个菜单界面，再在components中定义若干个组件。在这里需要注意组件的复用。组件拼凑组合起来就能实现一个网页。同时还需要注意如何实现交互特性和其他的一些细节。</p><p>对于广告牌组件、电影列表和电影卡片组件、收藏功能、电影播放功能、电影详细信息功能，这些都属于前后端交互的范畴，是有统一的开发套路的。<strong>一般来说是先定义api，再定义hook（调用api），再定义组件（调用hook获取api的数据），再将组件加入到页面（pages）中</strong>。这就是开发全栈项目的一般的新功能（非拓荒）的一般过程。</p><h2 id="我的思考"><a href="#我的思考" class="headerlink" title="我的思考"></a>我的思考</h2><ol><li><p>Tailwind CSS的好处：我的主要感受是不需要手写css文件，直接在classname中写内容就可以。注意使用Tailwind CSS前，需要进行必要的配置。Tailwind CSS的具体优点如下所示：</p><ul><li><p>快速原型开发<br>Tailwind 的实用工具类使得快速原型设计变得非常简单。你可以通过组合不同的类来快速构建界面，而不需要离开 HTML 文件去编写和调试 CSS 文件，这可以显著加快开发速度。</p></li><li><p>一致性和可重用性<br>通过使用 Tailwind 提供的实用工具类，可以在整个项目中保持样式的一致性。由于你在不同的地方复用相同的实用工具类，这自然而然地导致了样式的可重用性和一致性。</p></li><li><p>可定制和可配置<br>Tailwind CSS 高度可定制。你可以根据项目的设计指南调整配置文件（如颜色、字体大小、边距等），这使得创建符合品牌指南的设计变得简单。</p></li><li><p>减少 CSS 的复杂性<br>由于采用实用工具类的方式，你可以避免编写过多的自定义 CSS 和处理复杂的 CSS 继承关系，这降低了代码的复杂性。</p></li><li><p>响应式设计友好<br>Tailwind CSS 内置了响应式设计的支持，通过简单的前缀可以轻松地实现不同屏幕尺寸的样式适配，而不需要编写额外的媒体查询。</p></li><li><p>减少未使用的 CSS<br>通过与 PurgeCSS 的集成，Tailwind CSS 可以在构建过程中自动移除未使用的 CSS，这意味着最终的样式表非常精简，加载时间快。</p></li><li><p>总结<br>尽管 Tailwind CSS 提供了诸多好处，如加速开发、提高一致性和可维护性，但它也有一定的学习曲线，尤其是对于习惯了传统 CSS 开发方式的开发者来说。此外，一些开发者可能会对在 HTML 中大量使用实用工具类表示担忧，担心这会导致 HTML 文件的可读性降低。不过，对于许多项目和团队而言，Tailwind CSS 提供的好处远远超过了这些潜在的缺点。</p></li></ul></li><li><p>Google oauth比较难用。在本地将项目跑起来时，Google oauth功能正常，但当我尝试在vercel上部署本项目时，Google oauth就完全无法正常使用，甚至每次产生的报错信息都不相同。与此形成鲜明对比的是，GitHub oauth比较好用，配置和更改都较为简单，且将项目部署在vercel上以后再使用GitHub oauth也不会出问题。</p></li><li><p>Next.js和React各自的作用：</p><p>React 和 Next.js 在一个项目中的共存实际上非常常见，并且它们各自扮演着互补的角色。理解它们的主要用途有助于更好地利用这两个库/框架来构建你的应用。</p><p>React</p><p>React 是一个用于构建用户界面的 JavaScript 库，由 Facebook 开发。它的主要特点是组件化开发和声明式编程，使得开发复杂、高性能的单页应用（SPA）变得简单。React 本身主要关注于视图层（UI），允许开发者以组件的形式构建复杂的用户界面。它并不提供诸如路由、服务器端渲染等功能，这些通常需要通过其他库或框架来实现。</p><p>Next.js</p><p>Next.js 是一个基于 Node.js 的框架，它为 React 应用提供了额外的结构和功能，如自动的代码分割、服务器端渲染（SSR）、静态站点生成（SSG）、基于文件的路由系统、API 路由等。Next.js 旨在解决 React 单页应用的一些限制，特别是在 SEO 和首屏加载性能方面。通过服务器端渲染，Next.js 可以提前渲染页面，使其内容能够被搜索引擎索引，同时也提升了页面加载的速度。</p><p>它们是如何一起工作的</p><ul><li>React 在项目中的角色：负责定义应用的组件结构、状态管理和用户交互逻辑。开发者会使用 React 来创建应用的各个界面组件。</li><li>Next.js 在项目中的角色：提供框架和额外功能，帮助这些 React 组件以更高效、优化的方式被呈现和服务。<strong>例如，Next.js 通过文件系统提供的路由功能，自动将位于 <code>pages/</code> 目录下的 React 组件转换为可访问的页面</strong>。</li></ul><p>总结</p><p>在一个项目中，React 用来构建用户界面的组件，而 Next.js 则用来增强 React 应用，提供路由、预渲染（SSR 或 SSG）等功能，以及优化应用的性能和可访问性。Next.js 让开发者能够更专注于业务逻辑和组件本身，而不是底层的架构问题，从而简化了 React 应用的开发和部署过程。简言之，你可以将 React 视为构建应用的砖块，而 Next.js 则是将这些砖块组织起来，建造出结构化、高效、易于维护的应用的框架。<strong>我的理解：React只能做前端，而React+Next.js就可以做全栈了</strong>。</p></li><li><p>Prisma是一款现代化的ORM框架，它可以连接到多种数据库类型（如 PostgreSQL 、 MySQL 、 SQLite 和 SQL Server等），在本项目中我们用Prisma连接了MongoDB。在ORM的帮助下，我们不需要写SQL语句，只需要定义数据库中的数据名称和数据类型，就可以实现对数据库的各种操作。</p></li><li><p>本项目中的大多数代码都是Typescript（.ts）代码或者TypeScript JSX(.tsx)代码。前者是基于javascript开发的。TypeScript 是 JavaScript 的一个超集，这意味着它包含了 JavaScript 的所有功能，并在此基础上添加了更多的特性。后者是 TypeScript 的扩展，允许在 TypeScript 文件中使用 JSX 语法。JSX 是一种语法糖，允许开发者在 JavaScript 代码中写像HTML一样的标记语言，这在React 开发中非常常见。由于 TypeScript 默认不理解 JSX 语法，TSX（<code>.tsx</code> 文件扩展名）提供了一种方式来使用 TypeScript 和 JSX。因此，<code>.tsx</code> 文件通常用于包含 JSX 的 TypeScript 项目，尤其是在开发 React 组件时。<strong>简而言之，当代码中需要有类似HTML的代码时，即需要创建一个页面或者页面的一部分时，用tsx。无类似HTML的代码，则用ts</strong>。在本项目中，定义所有组件的components文件夹中的文件全用了tsx，因为要写HTML代码；同理，pages文件夹中除了api文件夹以外的所有文件用的也是tsx。剩下的文件夹中的文件普遍用的是ts，包括hooks文件夹，lib文件夹和pages/api文件夹。</p></li><li><p>本项目中几个主要文件夹的作用：</p><p>属于 Next.js 的特定文件夹：</p><ul><li><strong>pages</strong>：这是 Next.js 特有的一个文件夹，用于基于文件系统的路由。在 Next.js 中，<code>pages</code> 目录下的每一个文件都会自动对应一个路由，这是 Next.js 框架的核心特性之一。pages中还有api文件夹，因此在本项目中可以像前后端分离的项目那样在后端定义api，然后在前端调用。<strong>只不过本项目中是在next.js实现的伪后端中定义api，然后在react实现的纯前端中调用api</strong>。</li><li><strong>public</strong>：这个文件夹也是 Next.js 的标准部分，用于存放静态文件，如图片、字体等。在项目中，你可以通过相对路径直接引用 <code>public</code> 文件夹中的资源。</li><li><strong>styles</strong>：虽然存放样式的做法在前端项目中非常常见，但在 Next.js 项目中，<code>styles</code> 文件夹通常用于组织 CSS 或 SCSS 文件。Next.js 支持 CSS Modules 和内置的 Sass 支持，这个文件夹通常用来利用这些特性。本项目中的styles文件夹中只有一个global.css文件，主要负责对tailwind css的配置和定义一些默认的css格式。</li></ul><p>通常属于开发者根据项目需求创建的文件夹（既适用于 React，也适用于 Next.js）：</p><ul><li><p>components：存放 React 组件的文件夹。这些组件可以在不同的页面中复用。这是 React 项目的常见结构，但在 Next.js 项目中同样适用。</p></li><li><p>hooks：存放自定义 React 钩子（Hooks）。自定义钩子是 React 16.8 引入的功能，用于在函数组件之间复用状态逻辑。</p></li><li><p>lib：通常用于存放一些工具库或者用于与 API 交互的函数等。这个文件夹的具体用途依项目需求而定，既适用于纯 React 项目，也适用于 Next.js 项目。</p></li></ul><p>数据库相关的文件：</p><p>prisma：这个文件夹通常用于存放与 Prisma 相关的配置和模型文件。Prisma 是一个流行的 Node.js 和 TypeScript ORM（对象关系映射），用于构建数据库访问。这不是 Next.js 或 React 特有的，而是根据你的项目是否需要与数据库交互来决定使用。</p><p>总结：<br>Next.js 特有：pages 和 public 文件夹是 Next.js 特定的，而 styles 虽然不是 Next.js 特有的，但其在 Next.js 项目中的使用方式往往利用了 Next.js 的一些特性。</p><p>React 和 Next.js 通用：components、hooks、lib 和 prisma 文件夹是根据开发者的项目需求创建的，它们既适用于 React 项目，也适用于 Next.js 项目。这些文件夹的使用反映了现代前端项目的一些最佳实践，如组件化开发、自定义钩子的使用等。</p></li><li><p>本项目中使用到了hook的以下功能：</p><ul><li><p>状态管理 (<code>useState</code>)<br>这是 Hooks 最基本的用途之一，允许在函数组件中添加状态。这对于实现按钮点击、输入表单处理、切换UI组件显示隐藏等功能至关重要。</p></li><li><p>数据获取（<code>useSWR</code>）<br><code>useSWR</code> 是一个由 Vercel 团队开发的 React Hook，它是 SWR (Stale-While-Revalidate) 数据获取库的一部分。SWR 是一种缓存策略，其名称来自 HTTP 缓存无效化策略，意味着“先返回缓存中的数据（陈旧的），然后发送请求（重新验证），最后用新数据替换旧数据”。<code>useSWR</code> 主要用于数据获取场景，特别是在需要频繁请求更新数据的应用中，它提供了一种简单而强大的方法来获取、缓存、更新远程数据。</p></li><li><p>副作用处理 (<code>useEffect</code>)<br>用于执行副作用操作，如数据获取（调用API）、订阅/取消订阅事件、直接操作DOM。这对于在组件加载、更新或卸载时执行外部操作非常有用。</p></li><li><p>性能优化 (<code>useCallback</code>)<br><code>useCallback</code> 可以避免在每次渲染时都进行不必要的计算或创建新的函数实例，从而提高性能。</p><p>需要特别注意的是，hook是一种概念，因此不局限于定义在某个特定的文件夹（如 <code>hooks</code> 文件夹）中，而是可以在函数的任何地方使用。在本项目中，hooks文件夹中的hooks主要负责对api的调用，而components, pages等文件夹中的hooks主要负责状态管理和性能优化。</p></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;headerlink&quot; title=&quot;技术栈&quot;&gt;&lt;/a&gt;技术栈&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Frontend: React&lt;/li&gt;
&lt;li&gt;Server-side Rendering: Next.js&lt;/li&gt;</summary>
      
    
    
    
    <category term="web开发" scheme="http://example.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Experiences of OAs</title>
    <link href="http://example.com/2024/02/27/Experiences-of-OAs/"/>
    <id>http://example.com/2024/02/27/Experiences-of-OAs/</id>
    <published>2024-02-27T10:37:21.000Z</published>
    <updated>2024-02-27T10:44:23.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Amazon-SDE-OA"><a href="#Amazon-SDE-OA" class="headerlink" title="Amazon SDE OA"></a>Amazon SDE OA</h2><ol><li>题目不难，简单的算法</li><li>第二题涉及到链表的增加头、尾节点和删去头节点，但用最简单直接的做法会超时</li><li>第二题的优化做法没有完全实现（出现报错），导致第二题没有完美地做出来，应该会被拒</li><li>时间一共70分钟，乍一看很充裕，但是如果碰到要优化的地方，时间就不够用了，因此下次做OA一定要做快一些，留出充足的时间给可能需要的优化和debug。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Amazon-SDE-OA&quot;&gt;&lt;a href=&quot;#Amazon-SDE-OA&quot; class=&quot;headerlink&quot; title=&quot;Amazon SDE OA&quot;&gt;&lt;/a&gt;Amazon SDE OA&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;题目不难，简单的算法&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="找工记录" scheme="http://example.com/categories/%E6%89%BE%E5%B7%A5%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="OA" scheme="http://example.com/tags/OA/"/>
    
    <category term="经验与教训" scheme="http://example.com/tags/%E7%BB%8F%E9%AA%8C%E4%B8%8E%E6%95%99%E8%AE%AD/"/>
    
  </entry>
  
</feed>
