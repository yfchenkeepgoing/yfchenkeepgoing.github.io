<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>How to Build and Maintain a Personal Blog</title>
    <url>/2024/01/20/Blog/</url>
    <content><![CDATA[<h1 id="如何搭建和维护个人博客"><a href="#如何搭建和维护个人博客" class="headerlink" title="如何搭建和维护个人博客"></a>如何搭建和维护个人博客</h1><h2 id="个人博客的实现方式"><a href="#个人博客的实现方式" class="headerlink" title="个人博客的实现方式"></a>个人博客的实现方式</h2><p>使用GitHub Pages和Hexo框架搭建和维护个人博客</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="注意1"><a href="#注意1" class="headerlink" title="注意1"></a>注意1</h3><p>尽量避免在一点不止一行的情况下使用：</p>
<p>的结构，因为这会导致网页上的博客渲染异常。在这种情况下，建议每一点使用一个小标题</p>
<h3 id="注意2"><a href="#注意2" class="headerlink" title="注意2"></a>注意2</h3><p>在线博客的刷新需要几分钟时间，请在更新博客后稍安勿躁。在线博客各部分的更新速度不同，比如博客内容先更新了，但日志还没有更新，这是正常现象，稍稍等待即可</p>
<h3 id="注意3"><a href="#注意3" class="headerlink" title="注意3"></a>注意3</h3><p>由于托管博客的仓库有两个分支，其中的master分支总会在我部署博客时实时更新，因此source分支在发布新博客时更新即可，不需要实时更新</p>
<h3 id="注意4"><a href="#注意4" class="headerlink" title="注意4"></a>注意4</h3><p>使用VSCode在本地编辑博客即可，博客的内容可以复制自Typora，在VSCode中点击md文件左上角的铅笔符号（Edit in VSCode）即可在VSCode中编辑博客内容，每次编辑完后记得运行部署脚本将博客更新部署到网站上</p>
<h2 id="博客结构"><a href="#博客结构" class="headerlink" title="博客结构"></a>博客结构</h2><p>本博客计划同时按照标签页（tags）和分类页（categories）进行分类。分类是更大的范畴，主要分为算法、web开发、工具使用、个人随笔和找工记录五大类。标签页是更小的范畴，有Python, C++, Java, Django, Springboot, Typora, GitHub Pages, Hexo, VsCode, 简历等等。一般一篇文章只隶属于一个category，但可以同时拥有多个标签。</p>
<p>本博客可以通过网址：<br><a href="https://yfchenkeepgoing.github.io/">https://yfchenkeepgoing.github.io/</a><br>访问，注意由于GitHub Pages是静态网页，因此出现延迟请稍安勿躁。另外，本博客所在的仓库地址为：<a href="https://github.com/yfchenkeepgoing/yfchenkeepgoing.github.io">https://github.com/yfchenkeepgoing/yfchenkeepgoing.github.io</a><br>其中有两个分支，分别为master和source。master托管了正在运行的博客，其中的内容在每次运行部署脚本后就会被更新。source托管了博客文件夹的所有源文件，需要通过git命令进行更新。博客网页与master分支中的内容进行了绑定。</p>
<h2 id="个人博客的特点和功能"><a href="#个人博客的特点和功能" class="headerlink" title="个人博客的特点和功能"></a>个人博客的特点和功能</h2><ol>
<li>配置站点信息</li>
<li>修改为next主题</li>
<li>进行了next主题的配置，包括样式、favicon、avatar、rss、code、top、reading_process、bookmark、github_banner、pangu、math、pjax</li>
<li>采用gitalk存储并显示评论，需要评论者使用GitHub登录</li>
<li>使用了标签页和分类页</li>
<li>拥有搜索页</li>
</ol>
<h2 id="如何搭建个人博客"><a href="#如何搭建个人博客" class="headerlink" title="如何搭建个人博客"></a>如何搭建个人博客</h2><p>参见知乎链接：<br><a href="https://zhuanlan.zhihu.com/p/371995929">https://zhuanlan.zhihu.com/p/371995929</a></p>
<p>其中指导非常详细，但过程较为繁琐，本文不再赘述。本文的重点在于如何维护搭建好的个人博客。</p>
<h2 id="如何维护个人博客"><a href="#如何维护个人博客" class="headerlink" title="如何维护个人博客"></a>如何维护个人博客</h2><h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>进入博客的根目录下，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure>
<p>然后通过链接：<a href="http://localhost:4000/即可访问到渲染出的博客页面。注意：在这种情况下，博客页面只对自己可见，因此上述命令只能用于调试。">http://localhost:4000/即可访问到渲染出的博客页面。注意：在这种情况下，博客页面只对自己可见，因此上述命令只能用于调试。</a></p>
<h3 id="维护在线博客"><a href="#维护在线博客" class="headerlink" title="维护在线博客"></a>维护在线博客</h3><h4 id="增加新的文章并将其分类到特定的tags和categories中"><a href="#增加新的文章并将其分类到特定的tags和categories中" class="headerlink" title="增加新的文章并将其分类到特定的tags和categories中"></a>增加新的文章并将其分类到特定的tags和categories中</h4><p>新建一篇名为HelloWorld的文章，在本地博客的根目录下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new hello-world</span><br></pre></td></tr></table></figure>
<p>创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式。<br>在文章开头通过如下格式添加必要信息：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello-world # 自动创建，如hello<span class="emphasis">_world</span></span><br><span class="line"><span class="emphasis">date: 日期 # 自动创建，如2024-01-20 02:07:51</span></span><br><span class="line"><span class="emphasis">tags: </span></span><br><span class="line"><span class="emphasis">- 标签1</span></span><br><span class="line"><span class="emphasis">- 标签2</span></span><br><span class="line"><span class="emphasis">- 标签3</span></span><br><span class="line"><span class="emphasis">categories:</span></span><br><span class="line"><span class="emphasis">- 分类1</span></span><br><span class="line"><span class="emphasis">- 分类2</span></span><br><span class="line"><span class="emphasis">- 分类3</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure>
<p>开头下方撰写正文，MarkDown 格式书写即可。这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html">https://hexo.io/zh-cn/docs/writing.html</a></p>
<h4 id="标签和分类的区别"><a href="#标签和分类的区别" class="headerlink" title="标签和分类的区别"></a>标签和分类的区别</h4><p><strong>Tags（标签）</strong>：<br>标签是用来描述博客文章中的具体细节的关键词。<br>它们是扁平的，不形成层次结构。<br>标签可以非常具体，也可以非常多，用于描述文章的具体内容，如“Python”、“Web开发”、“机器学习”等。<br><strong>一个文章可以有多个标签，标签的数量通常比分类多</strong>。</p>
<p><strong>Categories（分类）</strong>：<br>分类通常用来表示博客文章的主要主题或大的分组。<br>它们是层次性的，可以有子分类，形成一个结构化的树状层次，例如：“技术”可以有子分类如“编程”、“网页设计”等。<br>分类通常较少，更宽泛，用于将文章分配到几个广泛的、互相排斥的主题中。<br><strong>一个博客文章通常只属于一个或少数几个分类</strong>。</p>
<p>使用示例：<br>假设您写了一篇关于Python网络编程的博客文章。您可以将这篇文章归类到“编程”分类下，并给它加上“Python”、“网络编程”、“套接字编程”等标签。</p>
<p><strong>总结：<br>分类用于表示文章的主要主题，是更广泛的分组工具。<br>标签用于详细描述文章的内容和细节，是更具体的关键词。</strong></p>
<h4 id="通过部署脚本部署在线博客"><a href="#通过部署脚本部署在线博客" class="headerlink" title="通过部署脚本部署在线博客"></a>通过部署脚本部署在线博客</h4><p>在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>在部署发布的时候只需要执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure>
<p>就可以完成博客的更新了，非常方便。</p>
<p>注意，在发布博客时只能执行上述命令，不能执行 <code>./deploy.sh</code>，否则博客无法正常发布。</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>GitHub Pages</tag>
        <tag>Hexo</tag>
        <tag>next主题</tag>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 10 | Leetcode 232, 225</title>
    <url>/2024/02/04/Day-10-Leetcode-232-225/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">栈与队列理论基础</a><br><a href="https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html">232.用栈实现队列</a><br><a href="https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html">225. 用队列实现栈</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="栈与队列理论基础"><a href="#栈与队列理论基础" class="headerlink" title="栈与队列理论基础"></a>栈与队列理论基础</h3><p>顾名思义，<strong>队列是先进先出，栈是先进后出</strong>（可以从顶部添加元素，也可以从顶部移除元素，但是不能从中间或底部添加或移除元素）。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235346563.png" alt="栈与队列理论1"></p>
<p>栈和队列是STL（C++标准库）里面的两个数据结构。STL有多个版本，其中有三个版本最为普遍。我们介绍的栈和队列是三个版本中的SGI STL里面的数据结构。知道版本才确定其底层实现。</p>
<p>栈：先进后出<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235434905.png" alt="栈与队列理论2"></p>
<p>栈提供push和pop等等接口，时间复杂度都是O(1)，所有元素必须符合先进后出规则（只能在顶部添加和移除元素），所以<strong>栈不提供走访功能，也不提供迭代器(iterator)</strong>。 不像是set 或者map提供迭代器iterator来遍历所有元素。</p>
<p><strong>我们可以用多种容器来实现栈的功能</strong>，栈的底层实现可以是vector，deque（双端队列），list（双向链表）都是可以的， 主要就是数组和链表的底层实现。</p>
<p>我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构（deque是容器）。deque是一个双向队列，<strong>只要封住一段，只开通另一端就可以实现栈的逻辑了</strong>。<strong>SGI STL中 队列底层实现缺省情况下一样使用deque实现的</strong>。也可以指定vector为栈的底层实现，初始化语句如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数int：指定了栈中元素的类型</span></span><br><span class="line"><span class="comment">// 第二个参数std::vector&lt;int&gt;：指定了底层容器的类型及其元素类型。即使用一个整型向量来存储栈中的元素。</span></span><br><span class="line">std::stack&lt;<span class="type">int</span>, std::vector&lt;<span class="type">int</span>&gt; &gt; third;  <span class="comment">// 使用vector为底层容器的栈</span></span><br></pre></td></tr></table></figure>
<p>通过允许指定底层容器，<code>std::stack</code>提供了灵活性，可以根据不同的性能需求或使用场景来选择最合适的容器类型。例如，<code>std::vector</code>提供了随机访问的能力，但是在容器前端添加或删除元素可能较慢，而<code>std::deque</code>在容器的前端和后端添加或删除元素都较快，但不支持快速随机访问。选择哪种底层容器取决于你的具体需求。</p>
<p>队列是先进先出的数据结构，<strong>同样不允许有遍历行为，不提供迭代器,  SGI STL中队列一样是以deque为缺省情况下的底部结构。</strong></p>
<p>也可以指定list 为起底层实现，初始化queue的语句如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::queue&lt;<span class="type">int</span>, std::list&lt;<span class="type">int</span>&gt;&gt; third; <span class="comment">// 定义以list为底层容器的队列</span></span><br></pre></td></tr></table></figure>
<p>STL队列和栈都不被归类为容器，而被归类为container adapter（容器适配器）。<strong>因为可以用不同的容器来实现栈和队列的功能，因此栈和队列不对应于某个特定的容器</strong>。</p>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h3><p>yxc讲过的应该是用数组来实现栈和队列，并没有见过怎么用栈来实现队列。直接看卡尔的讲解。</p>
<h3 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h3><p>我想了想，没想出什么好办法，听卡尔讲吧。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="232-用栈实现队列-1"><a href="#232-用栈实现队列-1" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h3><p>不涉及具体的算法，考察对栈和队列的基本操作。向队列中插入元素123，则队列吐出元素的顺序是123。向栈中插入元素123，则栈吐出元素的顺序是321。若想用栈实现队列，就需要两个栈，一个栈用于存储元素，<strong>另一个栈用于改变第一个栈中元素出栈的顺序</strong>。第一个栈吐出元素的顺序是321，将它们依次插入第二个栈中，则第二个栈吐出元素的顺序是123。第一个栈被称为入栈，第二个栈被称为出栈。</p>
<p><img src="D:/OneDrive%20-%20stu.xjtu.edu.cn/%E5%9B%BE%E7%89%87/tstmp_20240205061240.gif" alt="tstmp_20240205061240"></p>
<p>入栈中不要有滞留元素的行为，<strong>一旦需要弹出元素，就把入栈中的所有元素全部放入出栈中</strong>，让出栈实现元素的弹出。如果没有把入栈中的所有元素全部放入出栈，则出栈中弹出元素的顺序会与队列弹出元素的顺序不同。</p>
<p>本题pop函数的实现需要特别注意。若出栈为空，则将入栈中的所有元素加入到出栈中。peek和pop方法大部分代码都是重复的，可以在peek中直接调用pop方法：<code>result = this-&gt;pop();</code>。此时第一个元素被获取的同时也被弹出了，因此需要将其插入回去：<code>stackOut.push(result)</code>（peek方法只需要查询元素的数值，不需要像pop函数那样弹出元素）。参考视频讲解中的伪代码，我写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; inStack; <span class="comment">// 入栈</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; outStack; <span class="comment">// 出栈</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向入栈中插入元素即可</span></span><br><span class="line">        inStack.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若出栈为空，则将入栈中的所有元素全部加入到出栈中</span></span><br><span class="line">        <span class="comment">// 如果没有把入栈中的所有元素加入到出栈中，则弹出元素的顺序会发生错误</span></span><br><span class="line">        <span class="comment">// 若出栈不为空，则跳过if判断部分，直接执行本函数最后三行代码</span></span><br><span class="line">        <span class="keyword">if</span> (outStack.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (inStack.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> tmp = inStack.<span class="built_in">top</span>();</span><br><span class="line">                inStack.<span class="built_in">pop</span>();</span><br><span class="line">                outStack.<span class="built_in">push</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回出栈顶部的元素并将该元素弹出</span></span><br><span class="line">        <span class="type">int</span> res = outStack.<span class="built_in">top</span>();</span><br><span class="line">        outStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 复用上面实现的pop函数</span></span><br><span class="line">        <span class="type">int</span> res = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 由于pop函数弹出了出栈顶部的元素，peek函数只需要查询出栈顶部的元素，不需要弹出</span></span><br><span class="line">        <span class="comment">// 因此将该元素插入回出栈中</span></span><br><span class="line">        outStack.<span class="built_in">push</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 入栈和出栈同时为空时，队列才为空</span></span><br><span class="line">        <span class="comment">// 若只有入栈为空，则出栈中依然有元素没有弹出，说明队列还可以弹出元素，不为空</span></span><br><span class="line">        <span class="comment">// 若只有出栈为空，则入栈中依然有元素可以加入出栈中，之后出栈还可以继续弹出元素，故队列也不为空</span></span><br><span class="line">        <span class="keyword">if</span> (inStack.<span class="built_in">empty</span>() &amp;&amp; outStack.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="225-用队列实现栈-1"><a href="#225-用队列实现栈-1" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h3><p>两个栈才能实现一个队列。<strong>虽然两个队列可以模拟栈，但重点讲一个队列模拟栈的进元素和出元素</strong>。</p>
<p>用两个队列模拟栈：假设栈中先后插入元素123，则栈弹出元素的顺序为321。那么我们可以在队列1中先插入123，然后将1和2放入队列2中，然后从队列1中弹出元素3。接着若想让队列1弹出元素2，则将队列2中的元素2放入队列1中即可。详细讲解见代码随想录网站。</p>
<p>用一个队列模拟栈：在队列中先加入123，然后取出元素1，加入队列中；再取出元素2，加入队列中，此时队列弹出的元素就是3。<strong>推广：队列中有size个元素，先弹出(size - 1)个元素，再将它们加入队列中，再弹出队列中剩余的最后一个元素即可</strong>。</p>
<p>根据上述原理，我独立写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">       q.<span class="built_in">push</span>(x); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = q.<span class="built_in">size</span>(); <span class="comment">// 队列中有size个元素</span></span><br><span class="line">        <span class="comment">// 循环(size - 1)次</span></span><br><span class="line">        <span class="comment">// 先弹出队首的元素，再将其加入到队尾中</span></span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            q.<span class="built_in">push</span>(tmp); </span><br><span class="line">            count -- ;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 弹出队首的元素，即为最后插入的元素</span></span><br><span class="line">        <span class="type">int</span> res = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复用pop函数，但是由于本函数只需要实现查询元素的功能，要记得将弹出的元素插入回去</span></span><br><span class="line">    <span class="comment">// 也可直接return q.back()。因为栈顶的元素就是队列尾部的元素（队列中，从front弹出元素，从back插入元素）</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        q.<span class="built_in">push</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 队列为空，则栈也为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>更简洁的写法：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        size -- ;</span><br><span class="line">        <span class="keyword">while</span> (size -- )</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><strong>用两个队列que1和que2实现队列的功能，que2其实完全就是一个备份的作用</strong>，把que1最后面的元素以外的元素都备份到que2，然后弹出最后面的元素，再把其他元素从que2导回que1。据此原理，我写下了如下的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q1;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将除去队尾的元素的其他元素全部加入到q2中</span></span><br><span class="line">        <span class="type">int</span> size = q1.<span class="built_in">size</span>();</span><br><span class="line">        size -- ;</span><br><span class="line">        <span class="keyword">while</span> (size -- )</span><br><span class="line">        &#123;</span><br><span class="line">            q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">            q1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 收获答案</span></span><br><span class="line">        <span class="type">int</span> res = q1.<span class="built_in">front</span>();</span><br><span class="line">        <span class="comment">// 将q2赋给q1</span></span><br><span class="line">        q1 = q2;</span><br><span class="line">        <span class="comment">// 清空q2</span></span><br><span class="line">        <span class="keyword">while</span> (q2.<span class="built_in">size</span>()) q2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.<span class="built_in">empty</span>() &amp;&amp; q2.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="232-用栈实现队列-2"><a href="#232-用栈实现队列-2" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h3><ol>
<li>注意stack内置的pop函数不会返回被移除的元素的值。</li>
<li>实现pop函数时：出栈为空，则插入入栈中的所有元素；出栈不为空，则直接弹出出栈中的首元素。</li>
<li>一旦需要弹出元素，就把入栈中的所有元素全部放入出栈中，否则出栈中弹出元素的顺序会与队列弹出元素的顺序不同。</li>
<li>入栈和出栈都为空时，模拟的队列才为空。</li>
<li>取出栈顶元素再弹出栈顶元素的实现，都是先<code>int tmp = stack.top()</code>，再<code>stack.pop()</code>。</li>
</ol>
<h3 id="225-用队列实现栈-2"><a href="#225-用队列实现栈-2" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h3><ol>
<li>本题的关键在于如何弹出元素。</li>
<li>队列中，从front弹出元素，从back插入元素。取出队列尾部的元素：<code>queue.back()</code>，取出队列头部的元素：<code>queue.front()</code>。</li>
<li>掌握一个队列实现栈的方法即可，两个队列实现栈更加复杂。</li>
</ol>
]]></content>
      <categories>
        <category>算法（栈与队列）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 1 | Leetcode 704, 27</title>
    <url>/2024/01/24/Day-1-Leetcode-704-27/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p><a href="https://programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">https://programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html</a></p>
<p><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE</a></p>
<p><a href="https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81.html#%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81.html#%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6</a></p>
<p><a href="https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%9C%89%E5%87%A0%E4%B8%AA%E7%96%91%E9%97%AE%EF%BC%9F.html">https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%9C%89%E5%87%A0%E4%B8%AA%E7%96%91%E9%97%AE%EF%BC%9F.html</a></p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.com/problems/binary-search/">https://leetcode.com/problems/binary-search/</a></p>
<p><a href="https://leetcode.com/problems/remove-element/">https://leetcode.com/problems/remove-element/</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="数组理论基础"><a href="#数组理论基础" class="headerlink" title="数组理论基础"></a>数组理论基础</h3><p>数组是存放在<strong>连续内存空间</strong>上的<strong>相同类型数据</strong>的集合。</p>
<p>注意：</p>
<ul>
<li><p>数组下标都是从0开始的</p>
</li>
<li><p>数组内存空间的地址是连续的</p>
</li>
<li><p>正是因为数组的在内存空间的地址是连续的，所以我们在<strong>删除或者增添元素的时候，就难免要移动其他元素的地址</strong></p>
</li>
<li><p>C++中，要注意vector和array的区别，vector的底层实现是array，严格来讲vector是容器，不是数组</p>
</li>
<li><p>数组的元素是不能删的，只能覆盖</p>
</li>
<li><p>C++中二维数组在地址空间上是连续的（在现代系统上，二维数组中的每个int占用4个字节）</p>
</li>
<li><p>Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。输出的值不是真正的地址，而是经过处理的数值</p>
</li>
</ul>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度是一个函数，它定性描述该算法的运行时间。</p>
<p>大O用来表示上界的，当用它作为算法的最坏情况运行时间的上界，就是对任意数据输入的运行时间的上界。有时业界也默认O代表的就是一般情况，而不是严格的上界。面试中说道算法的时间复杂度是多少指的都是一般情况。</p>
<p>数据用例的不一样，时间复杂度也是不同的。</p>
<p>我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大。</p>
<p>我们统一说 logn，也就是忽略底数的描述。</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>是对一个算法在运行过程中占用内存空间大小的量度。</p>
<p>来看一下例子，什么时候的空间复杂度是$O(1)$呢，C++代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第一段代码可以看出，随着n的变化，所需开辟的内存空间并不会随着n的变化而变化。即此算法空间复杂度为一个常量，所以表示为大O(1)。</p>
<p>当消耗空间和输入参数n保持线性增长，这样的空间复杂度为O(n)，来看一下这段C++代码<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="built_in">int</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    a[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>随着n的增大，开辟的内存大小呈线性增长，即 O(n)。</p>
<p>递归的时候，会出现空间复杂度为logn的情况。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="第一想法"><a href="#第一想法" class="headerlink" title="第一想法"></a>第一想法</h3><h4 id="Leetcode-704-二分查找"><a href="#Leetcode-704-二分查找" class="headerlink" title="Leetcode 704 二分查找"></a>Leetcode 704 二分查找</h4><p>这题应该是整数二分，虽然我在yxc的算法基础课里学过这题，但时隔几个月我已经彻底忘了（不管是原理还是实现），从头开始吧。</p>
<h4 id="Leetcode-27-移除元素"><a href="#Leetcode-27-移除元素" class="headerlink" title="Leetcode 27 移除元素"></a>Leetcode 27 移除元素</h4><p>试试暴力做法吧，双指针做法想不出来。根据yxc的经验，暴力做法成功后再想办法去优化。</p>
<h3 id="看完代码随想录后的想法"><a href="#看完代码随想录后的想法" class="headerlink" title="看完代码随想录后的想法"></a>看完代码随想录后的想法</h3><h4 id="Leetcode-704-二分查找-1"><a href="#Leetcode-704-二分查找-1" class="headerlink" title="Leetcode 704 二分查找"></a>Leetcode 704 二分查找</h4><p>二分法的使用前提：数组为有序数组，且数组中无重复元素。满足这两个性质的题目可尝试二分法。</p>
<p>二分法中区间的定义有两种：左闭右闭和左闭右开。<strong>每一次边界的处理都要坚持根据区间的定义来操作</strong>。</p>
<h4 id="Leetcode-27-移除元素-1"><a href="#Leetcode-27-移除元素-1" class="headerlink" title="Leetcode 27 移除元素"></a>Leetcode 27 移除元素</h4><p>暴力做法：遍历数组-&gt;找到需要移除的元素-&gt;将该元素后面的所有元素都前移一位-&gt;索引前移一位，数组长度减1</p>
<p>双指针法（快慢指针法）： 通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="Leetcode-704-二分查找-2"><a href="#Leetcode-704-二分查找-2" class="headerlink" title="Leetcode 704 二分查找"></a>Leetcode 704 二分查找</h3><p>cpp中的vector中求数组的长度没有len函数，应该用size函数。</p>
<p>cpp中两个整数的做除法如果得到的结果变量类型为整数，则是向下取整的。</p>
<p>cpp中的vector是动态数组，要先向用push_back向其中添加元素，然后才能通过索引来访问元素。</p>
<p>左闭右闭和左闭右开的写法中，需要注意right初始值的选取的不同（由于一种写法的右边界可以取到，另一种写法的右边界取不到）。还需要注意分成三类讨论，即target &gt; nums[mid], target &lt; nums[mid]和target == nums[mid]。这样就可以避免处理大于等于和小于等于的情况。</p>
<p>返回总是返回mid，不要尝试返回l或者r，可能会遇到边界问题。</p>
<p>用(l + r) &gt;&gt; 1比(l + r) / 2要更快一点。</p>
<p>建议采用l + (r - l) / 2代替(r + l) / 2，前者可以防止(r + l)溢出整数的范围。</p>
<p>时间复杂度：O(log n)<br>空间复杂度：O(1)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左闭右闭写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左闭右闭，因此要求左右边界均可取到，因此r的值要与右边界的索引相同</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当left==right，区间[left, right]依然有效，所以用 &lt;=</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) / <span class="number">2</span>; <span class="comment">// (l + r) &gt;&gt; 1速度更快</span></span><br><span class="line">            <span class="comment">// 分三类情况讨论</span></span><br><span class="line">            <span class="comment">// 因为区间是右闭的，所以r不可能取为mid，最大为mid - 1</span></span><br><span class="line">            <span class="keyword">if</span> (target &lt; nums[mid]) r = mid - <span class="number">1</span>; </span><br><span class="line">            <span class="comment">// 因为区间是左闭的，所以l不可能取为mid，最小为mid + 1</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// return l/r都是错误的，可以通过模拟一个输入知道错误原因</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左闭右开写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左闭右开，因此target不能取为右边界的值，要保证区间完全覆盖住target，因此r的值要比右边界的索引大1</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右边界取不到，因此是l &lt; r</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 因为区间是左闭的，所以l不可能取为mid，最小为mid + 1</span></span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 因为区间是右开的，所以r可以取为mid</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) r = mid;</span><br><span class="line">            <span class="comment">// return l是错误的，可以通过模拟一个输入知道错误原因</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Leetcode-27-移除元素-2"><a href="#Leetcode-27-移除元素-2" class="headerlink" title="Leetcode 27 移除元素"></a>Leetcode 27 移除元素</h3><h4 id="暴力做法"><a href="#暴力做法" class="headerlink" title="暴力做法"></a>暴力做法</h4><p>若不前移i，则若数组中出现连续的两个val时，结果会发生错误，不能完全移除数组中所有的val。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 遍历数组，找到需要移除的元素</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 将该元素后面的所有元素都前移一位，覆盖掉需要移除的元素</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j ++ )</span><br><span class="line">                    nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                <span class="comment">// 索引前移一位，数组长度减1</span></span><br><span class="line">                i -- ;</span><br><span class="line">                size -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n^2)<br>空间复杂度：O(1)</p>
<h4 id="快慢双指针做法"><a href="#快慢双指针做法" class="headerlink" title="快慢双指针做法"></a>快慢双指针做法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 快指针用于遍历所有元素、慢指针用于记录更新后数组的下标</span></span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> fast = <span class="number">0</span>; fast &lt; nums.<span class="built_in">size</span>(); fast ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val)</span><br><span class="line">                nums[slow ++ ] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>
<h4 id="相向双指针做法"><a href="#相向双指针做法" class="headerlink" title="相向双指针做法"></a>相向双指针做法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相向双指针方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 跳过所有不需要移除的元素，剩下需要移除的元素</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r &amp;&amp; nums[l] != val) l ++ ;</span><br><span class="line">            <span class="comment">// 跳过所有需要移除的元素，剩下不需要移除的元素</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r &amp;&amp; nums[r] == val) r -- ;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将右边不需要移除的元素覆盖掉左边需要移除的元素(交换左右两边的元素)</span></span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) nums[l ++ ] = nums[r -- ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回左边的最后一个值的索引</span></span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>
<p>注意：while (l &lt;= r &amp;&amp; nums[l] != val)和while (l &lt;= r &amp;&amp; nums[r] == val)中的两个判断条件不可以写反，否则会出现Runtime Error。这是因为短路原则，最好先进行边界检查，再访问数组。</p>
<p>逻辑：数组的左边放等于val的元素，因此需要跳过所有不等于val的元素；数组的右边放不等于val的元素，因此需要跳过所有等于val的元素。交换数组的左右两边，让数组的左边放不等于val的元素，数组的右边放等于val的元素，然后输出数组左边的最后一个值的索引。</p>
<p>相向双指针方法的基本过程我大致理解了，但还不理解其的细节和应用。</p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="Leetcode-704-二分查找-3"><a href="#Leetcode-704-二分查找-3" class="headerlink" title="Leetcode 704 二分查找"></a>Leetcode 704 二分查找</h3><p>我认为代码随想录的做法比yxc的讲解更加清晰。清楚地归纳总结出了左闭右闭和左闭右开的写法，并根据选择区间的开闭性质清晰地写出了代码。同时，分成三类讨论，避免了处理大于等于和小于等于的情况。</p>
<p>还没有做35和34，等到二刷来做。</p>
<h3 id="Leetcode-27-移除元素-3"><a href="#Leetcode-27-移除元素-3" class="headerlink" title="Leetcode 27 移除元素"></a>Leetcode 27 移除元素</h3><p>相向双指针方法的理解有待加深。</p>
]]></content>
      <categories>
        <category>算法（数组）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>整数二分</tag>
        <tag>双指针算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 11 | Leetcode 20, 1047, 150</title>
    <url>/2024/02/05/Day-11-Leetcode-20-1047-150/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html">20. 有效的括号</a><br><a href="https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html">1047. 删除字符串中的所有相邻重复项</a><br><a href="https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html">150. 逆波兰表达式求值</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h3><ol>
<li>cpp中，将一个个字母存储在stack中，用<code>stack&lt;int&gt;</code>或者<code>stack&lt;char&gt;</code>都是一样的。若是<code>stack&lt;int&gt;</code>，则字符以ascii码的形式存储。</li>
<li><p>在Linux系统中，cd（change directory）命令用于更改当前工作目录。它确实可以借助栈的概念来理解路径的导航，尤其是处理相对路径时。</p>
<p>考虑命令<code>cd a/b/c/../../</code>，这里我们可以将目录路径视作一个栈的操作序列：</p>
<p><code>cd a</code>：进入目录a，相当于将a压入栈。<br><code>cd b</code>：进入子目录b，相当于将b压入栈中a的上面。<br><code>cd c</code>：进入子目录c，相当于将c压入栈中b的上面。<br>此时栈的状态为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<p>然后遇到<code>..</code>，这代表上一级目录，相当于从栈中弹出最上面的元素。第一个<code>..</code>将c弹出。<br>栈的状态更新为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<p>第二个<code>..</code>将b弹出。<br>最终栈的状态为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<p>所以，最后当前工作目录是a。<strong>在这个过程中，我们可以将每个目录视为栈中的一个元素，每进入一个新的子目录就相当于压入一个元素，而每次使用<code>..</code>就相当于弹出一个元素，回到上一级目录</strong>。这就是栈数据结构在文件系统路径解析中的一个应用。</p>
</li>
</ol>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="20-有效的括号-1"><a href="#20-有效的括号-1" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h3><p>不知道怎么做，直接看卡尔的讲解视频。</p>
<h3 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h3><p>本题应该是一道用栈解决的经典问题。以输入s = “abbaca”为例，定义一个栈，遍历字符串，遍历到第一个字符时，判断栈顶元素是否与之相同，是，则弹出栈顶元素，否，则插入该字符。对后面的字符也是这样处理的。根据这个思路，我独立写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == st.<span class="built_in">top</span>()) st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        string out;</span><br><span class="line">        <span class="keyword">while</span> (st.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            out += st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(out.<span class="built_in">begin</span>(), out.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>需要特别注意：</p>
<ul>
<li>对栈做top操作时需要保证其非空，否则会报访问未知地址，导致程序非法访问内存的错误</li>
<li>将栈中的一个个元素弹出并插入到一个字符串中后，需要将字符串颠倒顺序，输出才是正确的顺序</li>
</ul>
<h3 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h3><p>我看题后，暂时还没有解题思路。先看视频，了解本题的解题思路。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="20-有效的括号-2"><a href="#20-有效的括号-2" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h3><p>本题是用栈来解决的经典题目。栈的应用：编译器做词法分析、linux系统的命令。</p>
<p>不匹配的场景共有三个：</p>
<ol>
<li>多出左括号</li>
<li>括号的类型不匹配</li>
<li>多出右括号</li>
</ol>
<p>各种不匹配的场景都可被归为以上三类。</p>
<p>如何用栈结构解决三类不匹配的情形？</p>
<p>对1，从字符串的左边向右边遍历，遇到左括号，就将一个对应的右括号加入到栈中。当遍历到字符串的右括号时，若栈顶元素和右括号相同，则弹出栈顶元素。如果字符串遍历完了，但栈不为空，栈中还剩余右括号，就说明字符串中的左括号多了，不匹配。</p>
<p>对2，从左往右遍历字符串，遇到左括号，就在栈中加入一个对应的右括号。遇到右括号，将其与栈顶的元素比较，若不相同，则说明不匹配。</p>
<p>对3，从左往右遍历字符串，遇到左括号，就在栈中加入一个对应的右括号。遇到右括号，将其与栈顶的元素比较，相同则弹出栈顶的元素。若字符串还没遍历完，栈就空了，说明字符串的前面没有左括号与后面的右括号对应，说明多出了右括号，也不匹配。</p>
<p>字符串遍历完之后，栈是空的，就说明全都匹配了。</p>
<p>剪枝：字符串长度为奇数，一定会有不匹配的括号，直接return false即可。</p>
<p>看了卡尔的视频后，我写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st; <span class="comment">// stack&lt;int&gt;和stack&lt;char&gt;都可以</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剪枝：字符串长度为奇数，一定不匹配</span></span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() % <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;[&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#123;&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="comment">// 不匹配的两种情况：多出右括号和括号类型不匹配</span></span><br><span class="line">            <span class="comment">// 两个判据不可颠倒，否则可能会出现栈为空但依然试图取栈顶元素的情况，编译器会报错</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (st.<span class="built_in">empty</span>() || s[i] != st.<span class="built_in">top</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 栈不为空且栈的顶元素和s[i]相同，则弹出st的顶元素，两两抵消</span></span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不匹配的情况：多出左括号</span></span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="1047-删除字符串中的所有相邻重复项-1"><a href="#1047-删除字符串中的所有相邻重复项-1" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h3><p>本题用栈解决非常简单，用其他数据结构比较复杂。本题和20. 有效的括号是同一类问题。本题的主要思路：相邻的字母相同，就做消除的动作。</p>
<p>栈用来存遍历过的元素，同时帮助我们完成消除的动作。<strong>本题可以用一个字符串来模拟栈的行为</strong>，这样在输出时就不需要再把栈转换为字符串了。<strong>用字符串模拟栈时，可以让字符串的尾部作为栈顶，字符串的头部作为栈底</strong>，这样字符串中字符的顺序就是正确的。</p>
<p>根据以上原理，我写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string out;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (out.<span class="built_in">empty</span>()) out.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == out.<span class="built_in">back</span>()) out.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">else</span> out.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>可以将上述代码写的更为精简（将两种需要push_back()的情况合并为一种）：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 字符串为空或者字符串尾部的元素与s[i]不同时，直接在字符串的尾部插入s[i]</span></span><br><span class="line">            <span class="keyword">if</span> (res.<span class="built_in">empty</span>() || res.<span class="built_in">back</span>() != s[i]) res.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">            <span class="comment">// 否则，意味着字符串尾部的元素和s[i]相同，则两两抵消，弹出字符串尾部的元素</span></span><br><span class="line">            <span class="keyword">else</span> res.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>相比于我在初次尝试中空间复杂度为O(n)的做法，上面的做法空间复杂度是O(1)，因为返回值不计空间复杂度。</p>
<h3 id="150-逆波兰表达式求值-1"><a href="#150-逆波兰表达式求值-1" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h3><p>什么是逆波兰表达式：是后缀表达式。后缀表达式是方便计算机来做运算的一种表达式。我们正常易于阅读的表达式是中缀表达式。例如(1+2)x(3+4)。画成二叉树的形式：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[x] --&gt; B[+];</span><br><span class="line">    A --&gt; C[+];</span><br><span class="line">    B --&gt; D[1];</span><br><span class="line">    B --&gt; E[2];</span><br><span class="line">    C --&gt; F[3];</span><br><span class="line">    C --&gt; G[4];</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><strong>后缀表达式就是上述二叉树的后序遍历</strong>。<strong>后续遍历的顺序是左右中</strong>。因此后缀表达式是：12+34+x。二叉树的中序表达式是1+2x3+4。中序表达式若要得到正确的结果，需要加上括号。但后缀表达式我们不需要加任何括号，从头到尾遍历我们就可以计算出正确的结果。<strong>计算机只需顺序处理后缀表达式，即可得到计算结果，而不必担心括号优先级，这就是为什么说后缀表达式是方便计算机来做运算的一种表达式</strong>。</p>
<p>计算机如何顺序处理后缀表达式？用栈。遍历后缀表达式时，遇到数字就将数字加入栈中，遇到运算符就从栈中取出元素来做运算，再把运算结果加入栈中。以上面的后缀表达式为例，先将1和2加入栈中，遇到+，则弹出2和1，算2+1=3，将3加入栈中。再将3和4加入栈中，遇到+，则弹出4和3，算4+3=7，将7加入栈中。遇到x，栈中弹出7和3，算7x3=21。最后将21加入栈中。后缀表达式的结果就是栈中最后的元素。</p>
<p>总结：两个数字遇到一个操作符时，也做消除操作，将合成的数字加入到栈中。栈适合做相邻字符的消除操作。</p>
<p>根据以上原理，我参照代码随想录的代码写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">long</span> <span class="type">long</span>&gt; st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&quot;+&quot;</span> || s[i] == <span class="string">&quot;-&quot;</span> || s[i] == <span class="string">&quot;*&quot;</span> || s[i] == <span class="string">&quot;/&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 注意采用long long类型</span></span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> num1 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> num2 = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// 注意是先num2再num1</span></span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&quot;+&quot;</span>) st.<span class="built_in">push</span>(num2 + num1);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&quot;-&quot;</span>) st.<span class="built_in">push</span>(num2 - num1);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&quot;*&quot;</span>) st.<span class="built_in">push</span>(num2 * num1);</span><br><span class="line">                <span class="keyword">else</span> st.<span class="built_in">push</span>(num2 / num1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoll</span>(s[i])); <span class="comment">// stoi可以将字符串转换为int, stoll可以将字符串转换为long long</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>(); <span class="comment">// 释放内存</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>本题关于数字的变量类型全部用int而不用long long，也可以通过评测。</p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="20-有效的括号-3"><a href="#20-有效的括号-3" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h3><ol>
<li>本题的思路：在字符串中遇到左括号就在栈中插入右括号，在字符串中遇到右括号则判断其能否与栈顶元素相消。</li>
<li>不匹配的三种情况：多出右括号、多出左括号、括号类型不匹配。</li>
<li>本题利用了栈的性质：后插入的元素先弹出，这与本题字符串中后出现的左括号必然有先出现的右括号与之匹配的题意相符。</li>
<li><code>st.empty()</code>和<code>s[i] != st.top()</code>这两个判据顺序不可颠倒，否则会出现栈为空但依然试图取栈顶元素的情况，编译器会报错。</li>
<li>本题可以做剪枝优化：字符串长度为奇数，则必然不匹配。</li>
<li>栈用<code>stack&lt;int&gt;</code>或者<code>stack&lt;char&gt;</code>都可以。前者就是将字符存储为ascii码。</li>
</ol>
<h3 id="1047-删除字符串中的所有相邻重复项-2"><a href="#1047-删除字符串中的所有相邻重复项-2" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h3><ol>
<li>栈特别适合处理对相邻字符需要做特殊判断的一些问题。比如相邻的括号匹配和消除。</li>
<li>字符串类型的变量也有empty, back, pop_back, push_back等函数。</li>
<li>本题可以用字符串来模拟栈，这样返回时不需要将栈转换回字符串，且可以通过让字符串头部对应栈底，字符串尾部对应栈顶的方式，来让输出的字符串不需要调整顺序（即不需要reverse）</li>
<li>本题需要考虑三种情况：栈为空/栈顶元素和字符串中元素相同/不相同</li>
<li>函数的递归调用需要用到栈</li>
<li>一个函数的返回值不会被计入这个函数的空间复杂度，额外的空间占用才会被计入空间复杂度</li>
</ol>
<h3 id="150-逆波兰表达式求值-2"><a href="#150-逆波兰表达式求值-2" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h3><ol>
<li>栈适合用于做相邻两个字符的消除操作。</li>
<li>逆波兰表达式即为二叉树的后缀表达式。</li>
<li>后缀表达式由二叉树的后序遍历（按左右中的顺序）得到。</li>
<li>本题思路：遇到数字则将其插入栈中，遇到运算符就弹出栈中的两个数字，计算并将计算结果插入栈中。</li>
<li>注意：运算时先num2（后弹出的数字，二叉树的左子节点）后num1（先弹出的数字，二叉树的右子节点）。</li>
<li>stoi可以将字符串转换为int，stoll可以将字符串转换为long long。</li>
<li>本题无需采用long long类型变量，用int类型变量就可以通过测评。</li>
</ol>
]]></content>
      <categories>
        <category>算法（栈与队列）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>栈</tag>
        <tag>栈的经典应用</tag>
        <tag>相邻元素两两抵消</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 13 | Leetcode 239, 347, summary</title>
    <url>/2024/02/06/Day-13-Leetcode-239-347-summary/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html">239. 滑动窗口最大值</a><br><a href="https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html">347.前 K 个高频元素</a><br><a href="https://programmercarl.com/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E6%80%BB%E7%BB%93.html">栈与队列总结</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h3><h3 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h3><h3 id="栈与队列总结"><a href="#栈与队列总结" class="headerlink" title="栈与队列总结"></a>栈与队列总结</h3><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="239-滑动窗口最大值-1"><a href="#239-滑动窗口最大值-1" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h3><p>本题应该有些类似于滑动窗口的经典题目：209.长度最小的子数组。本题的思路：用一个长度始终为3的队列，滑过数组。每次算出队列中的最大值，然后存入数组中。我打算另写一个函数来返回三个值中的最大值。但是应该是有办法在队列进出元素的时候顺便维护其中的最大值。</p>
<p>我根据暴力做法的思路，写下了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 得出队列中的最大值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queuemax</span><span class="params">(queue&lt;<span class="type">int</span>&gt; q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> max = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> tmp = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (max &lt; tmp) max = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() &lt; k) q.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (q.<span class="built_in">size</span>() == k)</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="built_in">queuemax</span>(q));</span><br><span class="line">                q.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(<span class="built_in">queuemax</span>(q));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>上述代码在输入数组不大时可以正常运行，但输入数组太大时会超时，测试样例通过了37 / 51。上述暴力做法的时间复杂度是O(n * k)。看代码随想录的视频讲解吧。</p>
<h3 id="347-前-K-个高频元素-1"><a href="#347-前-K-个高频元素-1" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h3><p>拿到这道题，我的第一想法是拿哈希去做。但发现哈希不能解决本题，因为对统计频率的数组排序后，数组的下标（即输入数组的元素）被打乱了。直接看卡尔的讲解。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="239-滑动窗口最大值-2"><a href="#239-滑动窗口最大值-2" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h3><p>本题是第一道hard。难点：如何求窗口中的最大值？暴力做法时间复杂度O(n <em> k)。需要一个特殊的队列，实现pop, push和getMaxValue（返回当前队列中的最大值）这三个操作。还可以用一个优先级队列。<strong>cpp中的优先级队列就是大顶堆（单调递减）或者小顶堆（单调递增）</strong>。大顶堆本质就是一个排序后的二叉树，最大的元素在上面。始终维护大顶堆，让大顶堆不断插入元素和弹出元素，大顶堆最前面的元素就是滑动窗口的最大值。<em>*但是用大顶堆是不行的</em></em>，因为无法正确地弹出元素（大顶堆内部自动做了排序，打乱了原来元素的顺序）。</p>
<p>因此用优先队列是不行的，需要我们自行实现一个<strong>单调队列</strong>来解决问题。需要维持队列中的元素是单调递增或单调递减的，同时需要保证pop操作的正确。<strong>单调队列中只需要维护有可能成为最大值的元素，而不需要维护k个元素</strong>。</p>
<p>模拟单调队列：<br>假设输入数组为13-1-35321。首先在队列中加入元素1，再加入3，若队列的前面有小于3的元素，则将这些元素全部弹出。这样做可以让队列的出口处就是最大值。<strong>由于随着滑动窗口的移动，本身就会舍弃第1个1，因此没必要维护3之前比3小的元素</strong>。接着在队列中加入-1。此时队列的前面没有小于-1的元素，故-1可以保留在队列中。此时取队首元素3，就是最大值。接着加入-3，队列前面的元素都大于-3，故保留-3，此时队列的最大值还是3。接着加入5，由于5比队列前面的元素都大，因此需要pop掉除5以外的全部元素，此时取队列的最大值，即队首元素，是5。接着放入3，3&lt;5，放入3，此时队列的最大值还是5。接着加入2，2&lt;5&amp;&amp;2&lt;3，因此放入2，此时队列的最大值还是5。再向后移动，需要把最大值5pop掉，加入1，1&lt;2 &amp;&amp; 1&lt;3，因此队列中加入1，此时队列的最大值是队首元素3。</p>
<p>单调队列在数组中移动的规则：除去常规的移动窗口的pop和push操作外，若push进来的元素比队列前面的元素都大，那前面的元素都要pop出去，直到队列前面的元素都大于push进来的元素为止。本方法的好处在于<code>getMaxValue</code>时取队首元素即可。</p>
<p>根据原理，我画出了如下的示意图，可以帮助理解（下图中打x的元素是因为单调队列的特殊规则：<code>若push进来的元素比队列前面的元素都大，那前面的元素都要pop出去</code>而被提前被删去的元素）。<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-02-07_13-50-29.png?raw=true" alt="Snipaste_2024-02-07_13-50-29.png"></p>
<p>根据上述原理，我尝试写出相应的代码，但是有一个问题我始终无法解决：根据规则：<code>若push进来的元素比队列前面的元素都大，那前面的元素都要pop出去</code>，有时原本的队首元素已经被更新为最大的元素了，意味着滑动窗口本身最前面的元素已经被弹出了，但有时，滑动窗口本身最前面的元素还没有被弹出，它仍作为队首元素，需要手动弹出。如何判断是否需要手动弹出队首元素。我来看看卡尔的代码实现，看他是如何解决这个问题的。</p>
<p>卡尔写了单调队列的三个关键函数。单调队列是在双向队列的基础上实现的，双向队列的首尾都可以出入元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; que; <span class="comment">// cpp中队列默认用deque双向队列来实现，双向队列的首尾都可以出元素和入元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 只有当需要pop的元素和队首元素（单调队列中目前的最大值）相同时，才弹出队首元素</span></span><br><span class="line">    <span class="comment">// 例如上图的倒数第二行到最后一行的操作（532-&gt;321）</span></span><br><span class="line">    <span class="comment">// 若需要pop的元素小于队首元素，那么在push时该元素已经被删除了</span></span><br><span class="line">    <span class="comment">// 例如上图中的-1-35-&gt;-353，本来需要手动删除-1，但由于-1&lt;5，因此在push(5)时-1已经被删除了</span></span><br><span class="line">    <span class="keyword">if</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val == que.<span class="built_in">front</span>())</span><br><span class="line">        que.<span class="built_in">pop_front</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 当队列不为空且要插入的值val &gt; 队列中的最后一个元素时，持续从队尾弹出元素</span></span><br><span class="line">    <span class="comment">// 例如上图中的3-1-3-&gt;-1-35，要插入5，持续从队尾弹出比5小的元素，然后再插入5</span></span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val &gt; que.<span class="built_in">back</span>()) que.<span class="built_in">pop_back</span>();</span><br><span class="line">    que.<span class="built_in">push_back</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMaxValue</span><span class="params">(deque&lt;<span class="type">int</span>&gt; que)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> que.<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述关键代码的基础上，我写下了解决本题的完整代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyQueue</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">            <span class="comment">// 单调队列中只维护当前队列中的最大值，作为队首元素</span></span><br><span class="line">            <span class="comment">// 故窗口滑动时只需要在滑出最大值时手动删除最大值即可</span></span><br><span class="line">            <span class="comment">// 其他值都会在push时被删除</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val == que.<span class="built_in">front</span>()) que.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保证单调队列从队首到队尾是单调递减的</span></span><br><span class="line">            <span class="comment">// 新插入的元素若大于当前队列中的最大值，则删除当前队列，将插入的元素放在队列的首部</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; val &gt; que.<span class="built_in">back</span>()) que.<span class="built_in">pop_back</span>();</span><br><span class="line">            que.<span class="built_in">push_back</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前队列中的最大值为队首元素，故返回队首元素即可</span></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getMaxValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> que.<span class="built_in">front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        MyQueue que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++ )</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line"></span><br><span class="line">        res.<span class="built_in">push_back</span>(que.<span class="built_in">getMaxValue</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            que.<span class="built_in">pop</span>(nums[i - k]);</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            res.<span class="built_in">push_back</span>(que.<span class="built_in">getMaxValue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="347-前-K-个高频元素-2"><a href="#347-前-K-个高频元素-2" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h3><p>两个难点：</p>
<ul>
<li><p>如何求数组中每个元素的频率</p>
</li>
<li><p>如何对这个频率进行排序，并求前k个高频的元素</p>
</li>
</ul>
<p>用map来进行排序，key用来存放元素，value用来存放元素出现的次数。接着以value为基准做从大到小的排序（不好做，因为map默认是按照key的顺序来进行排序的），最后输出value对应的key即可。时间复杂度<code>O(nlogn)</code>。</p>
<p>求前k个高频的元素，只需维护k个有序的集合，没必要对所有元素都进行排序。经典的数据结构：大顶堆、小顶堆。堆擅长在很大的数据集中求前k个高/低频的元素。大顶堆的根节点是最大的元素，小顶堆的根节点是最小的元素。</p>
<p>如何用堆解决这个问题？用堆去遍历map中的所有元素（以value为基准进行统计），堆中维持k个元素，遍历完map中的所有元素后，堆中的k个元素就是前k个高频元素。<strong>大/小顶堆？</strong>用大顶堆遍历map中的所有元素时，遇到新元素时，将其插入到大顶堆中，会弹出堆顶的元素（最大的元素），<strong>用大顶堆遍历完map后，堆中剩下的元素是前k个低频的元素</strong>。<strong>因此要用小顶堆</strong>。小顶堆每次在push进来元素时，弹出堆顶元素（最小的元素），堆中剩下的就是最大的元素。最后输出前k个最大的value对应的key。时间复杂度：遍历数组O(n)，每次堆中元素调整O(logk)（堆中有k个元素，堆是树状结构），总时间复杂度为O(nlogk)。在数组很大，k较小的情况下，本做法的性能明显优于对整个map进行排序的性能。优先级队列的底层实现是堆，<strong>因此用优先级队列即可</strong>。可自行实现大顶堆和小顶堆。</p>
<p>参考代码随想录的代码，我写下了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">compare</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">        <span class="comment">// 为定义小顶堆重载运算符，这里的函数名为operator()，而非operator</span></span><br><span class="line">        <span class="comment">// 对大顶堆，本来应该是右边的元素&gt;左边的元素，对小顶堆，则与此相反</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; lhs, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; rhs)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &gt; rhs.second; <span class="comment">// 比较的是元素出现的次数，而非元素的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nums[i]作为key, 出现此处作为value存入map中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            map[nums[i]] ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义小顶堆，其中的元素类型是pair&lt;int, int&gt;，底层实现是vector&lt;pair&lt;int, int&gt;&gt;</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, compare&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历map，不断将map中的元素插入小顶堆中，小顶堆不断弹出根节点处最小的元素</span></span><br><span class="line">        <span class="comment">// 最后剩下的k个元素是出现频次最高的k个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = map.<span class="built_in">begin</span>(); it != map.<span class="built_in">end</span>(); it ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(*it);</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; k) q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(k)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根节点处是最小的元素，越往下元素越大，因此将小顶堆中的k个元素倒着插入res中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        &#123;</span><br><span class="line">            res[i] = q.<span class="built_in">top</span>().first; <span class="comment">// 插入res的是key, 即nums[i]</span></span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="239-滑动窗口最大值-3"><a href="#239-滑动窗口最大值-3" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h3><ol>
<li>单调队列需要手动实现，cpp标准库中没有现成可用的单调队列。</li>
<li>单调队列的好处在于能够将当前队列中的最大值放在队首，且不改变其他值的排列顺序（即其他值在单调队列中的排列顺序和它们在输入数组中的排列顺序相同）。</li>
<li>单调队列的特殊规则：若push进来的元素比队列前面的元素都大，那前面的元素都要pop出去。</li>
<li>定义一个类，在双向队列的基础上实现单调队列，而不要试图在主函数中对<code>queue&lt;int&gt;</code>做加工。</li>
<li>本题的详细模拟流程见实现中的图片。</li>
<li><p>单调队列中定义了三个函数：pop, push和getMaxValue。<br>对pop函数（负责模拟窗口的滑动，删除队首的最大值），需要注意：</p>
<ul>
<li>单调队列中只维护当前队列中的最大值，作为队首元素</li>
<li>故窗口滑动时只需要在滑出最大值时手动删除最大值即可</li>
<li>其他值都会在push时被删除</li>
</ul>
<p>对push函数（负责向单调队列中插入元素，同时调整队列中元素的顺序，将最大值置于队首），需要注意：</p>
<ul>
<li>保证单调队列从队首到队尾是单调递减的</li>
<li>新插入的元素若大于当前队列中的最大值，则删除当前队列，将插入的元素放在队列的首部</li>
<li>当前队列中的非最大值会在不断调用push函数的过程中被删除，最大值则需要pop函数来删除</li>
</ul>
</li>
<li>时间复杂度: O(n) 空间复杂度: O(k)<br>输入数组中的每个元素在单调队列中最多也就被插入和弹出各一次，没有任何多余操作，所以整体的时间复杂度还是O(n)。空间复杂度因为我们定义一个辅助队列，所以是O(k)。</li>
<li>本题之所以选择在双向队列的基础上加工出单调队列,是因为双向队列可以方便地在队首和队尾插入和删除元素。</li>
<li><p>注意类的写法、双向队列的<code>push_back</code>, <code>push_front</code>, <code>pop_back</code>, <code>pop_front</code>以及单调队列的<code>push</code>, <code>pop</code>等方法，不要写错或者混淆。</p>
<h3 id="347-前-K-个高频元素-3"><a href="#347-前-K-个高频元素-3" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h3></li>
<li><p>本题的大致思路：用map来存储元素的值和出现次数，用一个小顶堆遍历map，最终获取出现次数最高的k个元素。<br><strong>map-&gt;priority_queue-&gt;vector</strong></p>
</li>
<li>本题的思路：用map的key存储元素的值，value存储元素出现的次数。定义一个小顶堆。遍历map，不断将map中的元素插入到小顶堆中，不断弹出小顶堆根节点处的元素，最后小顶堆中剩下的k个元素就是出现次数最高的k个元素。将这k个元素倒着插入结果数组中即可。</li>
<li>为什么使用小根堆：小跟堆根节点处的元素最小，每次弹出元素也是从根节点处弹出，因此用大小为k的小根堆遍历完map后，小根堆中的k个元素是出现次数最高的k个元素，较小的元素在遍历的过程中就已经被弹出了。</li>
<li>注意小顶堆的定义方式：在优先级队列的基础上，传入的参数分别为小顶堆中存储的元素类型，小顶堆的底层实现，自定义的compare类（用于实现小顶堆根节点是最小元素的特性）。</li>
<li>注意如何写compare类，关键在于重载运算符。</li>
<li>注意vector数组是可以定义大小的，定义方式为<code>vector&lt;int&gt; res(k)</code>，vector元素定义了大小之后，就能像普通数组那样用索引给元素赋值：<code>res[i]</code>，插入元素的push_back函数并不是必须的。</li>
<li>根据小根堆的特点，res数组需要倒着插入，即从下标<code>k - 1</code>处开始插入。</li>
<li>定义类是，要记得在类中的函数前加上public，否则无法正常调用类中的函数。</li>
<li>本算法的时间复杂度是O(nlogk)，好于对map全部排序的O(nlogn)，在n较大，k较小时性能提升尤为明显。</li>
</ol>
<h3 id="栈与队列总结-1"><a href="#栈与队列总结-1" class="headerlink" title="栈与队列总结"></a>栈与队列总结</h3><ol>
<li>栈和队列的理论基础：栈先入后出，队列先入先出</li>
<li>用两个栈实现队列，用一个队列实现栈</li>
<li>栈的应用：栈的应用相对较为简单且单一。栈特别适合处理对相邻字符需要做特殊判断的一些问题。比如相邻的括号匹配（20. 有效的括号）、相邻字符的消除（删除字符串中的所有相邻重复项）和后缀表达式中相邻数字的计算（逆波兰表达式求值）。</li>
<li>队列的应用：队列的应用更为复杂且多样，包括手动实现单调队列（239. 滑动窗口最大值）和手动实现大/小顶堆（优先级队列）347. 前k个高频元素）。对于队列的应用要多复习，这两题写起来都较为复杂。</li>
<li>单调队列不是一成不变的，而是不同场景不同写法。不要以为239. 滑动窗口最大值中的单调队列实现就是固定的写法。</li>
<li><p>栈里面的元素在内存中是连续分布的么？</p>
<p>这个问题有两个陷阱：</p>
<ul>
<li>陷阱1：栈是容器适配器，底层容器使用不同的容器，导致栈内数据在内存中不一定是连续分布的。</li>
<li>陷阱2：缺省情况下，默认底层容器是deque，那么deque在内存中的数据分布是什么样的呢？ 答案是：不连续的，下文也会提到deque。</li>
</ul>
</li>
<li>拓展题：71. 简化路径</li>
<li>优先级队列就是大/小顶堆，名字虽为队列（因为优先级队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列），但本质是完全二叉树。大顶堆（堆头是最大元素），小顶堆（堆头是最小元素）。从小到大排就是小顶堆，从大到小排就是大顶堆。大小顶堆和大小根堆是相同的。</li>
</ol>
]]></content>
      <categories>
        <category>算法（栈与队列）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>队列</tag>
        <tag>队列的经典应用</tag>
        <tag>单调队列</tag>
        <tag>优先级队列（大/小顶堆）</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 14 | Leetcode Recursive traversal, Iterative traversal, Unified iteration</title>
    <url>/2024/02/11/Day-14-Leetcode-Recursive-traversal-Iterative-traversal-Unified-iteration/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">理论基础</a><br><a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86.html">递归遍历</a><br><a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86.html">迭代遍历</a><br><a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%B3%95.html">统一迭代</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><h4 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h4><p>解题过程中二叉树有两种主要的形式：满二叉树和完全二叉树（完全二叉树包含满二叉树，满二叉树一定是完全二叉树）</p>
<p>“度”是指一个节点拥有的子节点的数量</p>
<h5 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h5><p>满二叉树：如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。也可以说深度为k，有2^k-1个节点的二叉树。</p>
<h5 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h5><p>完全二叉树：除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且<strong>最下面一层的节点都集中在该层最左边的若干位置</strong>。若最底层为第 h 层（h从1开始），则该层包含 1~ 2^(h-1) 个节点。</p>
<p>之前我们刚刚讲过优先级队列其实是一个堆，<strong>堆就是一棵完全二叉树</strong>，同时保证父子节点的顺序关系。</p>
<h5 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h5><p>前面介绍的树，都是没有数值的，而二叉搜索树是有数值的了，<strong>二叉搜索树是一个有序树</strong>。搜索的时间复杂度是O(logn)。</p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均<strong>小于</strong>它的根结点的值；</li>
<li>若它的右子树不空，则右子树上所有结点的值均<strong>大于</strong>它的根结点的值；</li>
<li>它的左、右子树也分别为二叉排序树<h5 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h5>平衡二叉树（Balanced Binary Tree）是一种特殊的二叉树，它满足以下性质：对于树中的每一个节点，其左子树和右子树的高度差的绝对值不超过1。这个条件确保了<strong>树的高度大致保持在log(n)级别</strong>，其中n是树中节点的数量。由于这种高度平衡，平衡二叉树可以在对数据进行插入、删除和查找操作时提供较好的性能，特别是保持操作的时间复杂度接近于<code>O(logn)</code>。<h5 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h5>平衡二叉搜索树：又被称为AVL树。具有以下性质：<strong>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1</strong>，并且左右两个子树都是一棵平衡二叉树。</li>
</ul>
<p><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong>，所以map、set的增删操作时间时间复杂度是logn。map的key和set中的元素是有序的，因为它们的底层实现是平衡二叉搜索树，而平衡二叉搜索树是有序的。</p>
<h4 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h4><p>二叉树可以链式存储，也可以顺序（线性）存储。那么链式存储方式就用指针， 顺序存储的方式就是用数组。顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在各个地址的节点串联一起。</p>
<p>用数组来存储二叉树如何遍历的呢？如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。但是用链式表示的二叉树，更有利于我们理解，所以<strong>一般我们都是用链式存储二叉树</strong>。</p>
<p>代码构造二叉树：创造一个头节点，其左指针指向左子节点，右指针指向右子节点，然后向函数中传入头节点即可。</p>
<h4 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h4><p>二叉树主要有两种遍历方式：</p>
<ol>
<li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li>
<li>广度优先遍历：一层一层的去遍历。</li>
</ol>
<p>从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：</p>
<ol>
<li>深度优先遍历（一般用递归法）</li>
</ol>
<ul>
<li>前序遍历（递归法，迭代法）</li>
<li>中序遍历（递归法，迭代法）</li>
<li>后序遍历（递归法，迭代法）</li>
</ul>
<ol>
<li>广度优先遍历<br>层次遍历（迭代法）</li>
</ol>
<p>这里前中后，<strong>其实指的就是中间节点的遍历顺序</strong>（但是所有遍历顺序都是先左后右）。<br>左指左子树，右指右子树。在左右子树中继续按照规则搜索。<br>前序遍历：中左右<br>中序遍历：左中右<br>后序遍历：左右中</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806191109896.png" alt="img"></p>
<p>每个子树和整棵树都遵循中左右/左中右/左右中。</p>
<p>最后再说一说二叉树中深度优先和广度优先遍历实现方式，我们做二叉树相关题目，经常会使用<strong>递归</strong>的方式来实现深度优先遍历，也就是实现前中后序遍历，使用递归是比较方便的。<strong>之前我们讲栈与队列的时候，就说过栈其实就是递归的一种实现结构</strong>，也就说前中后序遍历的逻辑其实都是可以借助<strong>栈</strong>使用递归的方式来实现的。</p>
<p>而广度优先遍历的实现一般使用<strong>队列</strong>来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树。</p>
<h4 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h4><p>链式存储的二叉树节点的定义方式：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125; <span class="comment">// 构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>二叉树的定义和链表是差不多的，相对于链表 ，二叉树的节点里多了一个指针，有两个指针，指向左右孩子。</p>
<h3 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h3><p>针对leetcode上的三道题目，分别是前序、中序、后序遍历，题号是144，145和94。按照三步来思考，才能保证写出正确的递归代码。所有二叉树的题目都用递归三部曲进行分析。本章节主要讲如何写出递归的代码，不关注底层实现机制。</p>
<p>三部曲：</p>
<ol>
<li>确定递归函数的参数和返回值</li>
<li>确定终止条件</li>
<li>确定单层递归的逻辑</li>
</ol>
<h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>前序：中左右</p>
<ol>
<li><p>确定递归函数的参数和返回值</p>
<p>没必要一次性确定，可以在写递归函数时根据需要来填充参数。一般参数为根节点和数组，后者用来存放遍历的结果。返回值一般是void，因为我们把想要的结果放在了参数的数组中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="type">int</span>&gt;&amp; vec)</span> <span class="comment">// 参数为根节点和结果数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定终止条件（搞不好会出现栈溢出等问题）。深度优先搜索是遇到NULL时返回。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cur == <span class="literal">NULL</span>)</span><br><span class="line">	<span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定单层递归的逻辑</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vec.<span class="built_in">push_back</span>(cur-&gt;val); <span class="comment">// 中</span></span><br><span class="line"><span class="built_in">treversal</span>(cur-&gt;left, vec); <span class="comment">// 左</span></span><br><span class="line"><span class="built_in">treversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br></pre></td></tr></table></figure>
<p>注意在前序遍历中上面三行代码的顺序不可改变。</p>
</li>
</ol>
<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>左中右。只需要改变第三步：确定单层递归的逻辑的代码。三行代码的顺序不可改变。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">treversal</span>(cur-&gt;left, vec); <span class="comment">// 左</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(cur-&gt;val); <span class="comment">// 中</span></span><br><span class="line"><span class="built_in">treversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br></pre></td></tr></table></figure></p>
<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>左右中。同样只需要改变第三步：确定单层递归的逻辑的代码。三行代码的顺序不可改变。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">treversal</span>(cur-&gt;left, vec); <span class="comment">// 左</span></span><br><span class="line"><span class="built_in">treversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(cur-&gt;val); <span class="comment">// 中</span></span><br></pre></td></tr></table></figure></p>
<h3 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h3><h4 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>非递归的方式：迭代法，如何实现二叉树的前中后序遍历。通常对简单的递归逻辑，要求写出相应的迭代（非递归）写法。最基础的就是用迭代法实现前中后序遍历。使用迭代法模拟递归，也需要使用到栈这种数据结构。理论上，所有递归都可以用栈模拟出来。</p>
<p>以下面的二叉树为例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[5] --&gt; B[4];</span><br><span class="line">    A --&gt; C[6];</span><br><span class="line">    B --&gt; D[2];</span><br><span class="line">    B --&gt; E[1];</span><br></pre></td></tr></table></figure>
<p>前序遍历上述二叉树，顺序为中左右，输出结果为54216。用栈来辅助遍历上述二叉树。首先将5加入栈中，然后弹出5，将其放入结果数组中。接着处理5的左右孩子，先把6加入栈中，再把4加入栈中（栈是先进后出的），然后弹出4，将其放入结果数组中。接着处理4的左右孩子，依旧是先放右孩子1，再放左孩子2，然后弹出2，加入结果数组中，因为2已经是叶子节点了，接着弹出1，加入结果数组中，最后弹出6，加入结果数组中。结果数组中是54216，符合预期。关键点是先将右孩子放入栈中，再将左孩子放入栈中，这样弹出时就会先弹出左孩子。<strong>弹出时还要关注弹出的节点是否是叶子节点。是，则不需要继续向栈中加入元素；否，则需要向栈中继续加入弹出节点的左右孩子</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">function</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;TreeNode*&gt; st; <span class="comment">// 栈</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res; <span class="comment">// 结果数组</span></span><br><span class="line">    </span><br><span class="line">    st.<span class="built_in">push</span>(root); <span class="comment">// 中节点入栈</span></span><br><span class="line">    <span class="comment">// 栈不为空，则执行以下逻辑</span></span><br><span class="line">    <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将中节点从栈中弹出，加入到结果数组中</span></span><br><span class="line">        TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">NULL</span>) <span class="comment">// 特判：中节点是否为空</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">continue</span>; <span class="comment">// 若中节点为空，进入下一次循环</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将中节点的左右孩子放入栈中，先将右孩子入栈，再将左孩子入栈，这样出栈时才是先左后右的顺序</span></span><br><span class="line">        st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 右</span></span><br><span class="line">        st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 左</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归模拟前序遍历，本来前序遍历的顺序应该是中左右，但由于栈先进后出的特性，代码中实际的顺序是中右左。</p>
<h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>后序遍历是左右中。实现后序遍历的原理如下图所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[前序遍历：中左右] --&gt;|颠倒左右| B[中右左]</span><br><span class="line">    B --&gt;|翻转结果数组| C[左右中]</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">function</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;TreeNode*&gt; st;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    </span><br><span class="line">    st.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 中</span></span><br><span class="line">        TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">        	res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        st.<span class="built_in">push</span>(root-&gt;left); <span class="comment">// 左</span></span><br><span class="line">        st.<span class="built_in">push</span>(root-&gt;right); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>中序遍历无法在前序遍历的基础上通过交换某几行代码的顺序来实现。遍历节点和处理节点是两种逻辑。前序和后序遍历中，遍历的节点和要处理的节点是一个顺序，才能写出上述比较简洁的代码。但在中序遍历中，遍历节点的顺序与和处理节点的顺序不同。后面会继续介绍中序遍历的写法，以及如何像递归写法那样更改几行代码的顺序来实现前中后序遍历的迭代写法。</p>
<p>处理二叉树时有两步操作，一步是访问节点，一步是处理节点。访问节点是从根节点开始，一个节点一个节点地去访问。处理节点是把访问到的节点中的元素放入结果数组中。</p>
<p>以下面的二叉树为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[5] --&gt; B[4];</span><br><span class="line">    A --&gt; C[6];</span><br><span class="line">    B --&gt; D[1];</span><br><span class="line">    B --&gt; E[2];</span><br></pre></td></tr></table></figure>
<p>对于中序遍历，先访问的节点是5，但先处理的节点应该是1（先把1放入结果数组中）。我们要处理1节点，需要先访问节点5、4、1。这就造成了访问的顺序和处理的顺序不同。因此中序遍历需要另一套写法。</p>
<p>下面模拟中序遍历迭代法的过程。需要一个指针帮助我们遍历二叉树，同时用栈记录遍历过的顺序，然后逆向输出即可。指针一路向左访问，指针先指向5，5入栈；指针再指向4，4入栈；指针再指向1，1入栈。到叶子节点了（叶子节点的左指针为空），便从栈中取出元素，从栈中弹出1并加入到结果数组中。看1的右孩子，为空，故再从栈中弹出4并加入到结果数组中，看4的右孩子，不为空，4的右孩子2入栈。2的左孩子为空，故将2从栈中弹出，加入到结果数组中。再看2的右孩子，为空，故从栈中弹出5并加入到结果数组中。5的右孩子为6，不为空，6入栈。6的左孩子为空，故6出栈，加入结果数组中。6的右孩子为空，本该从栈中弹出元素，但此时栈为空，故结束。结果数组为14256，符合中序遍历的顺序。</p>
<p><strong>总结</strong>：用指针遍历节点，用栈来记录遍历过的节点，再从栈中弹出元素放入结果数组中。指针一路向左访问，若某个节点的左指针为空，则从栈中取出该节点并放入结果数组中。若某个节点的右指针为空，则从栈中弹出顶部元素并放入结果数组中，若某个节点的右指针不为空，则将右指针指向的节点入栈。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">traversal</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    stack&lt;TreeNode*&gt; st;</span><br><span class="line">    TreeNode* cur = root; <span class="comment">// 用于遍历二叉树的指针，一开始指向根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cur为空且栈也为空时，遍历终止</span></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 栈用于记录指针访问过的元素</span></span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(cur);</span><br><span class="line">            cur = cur-&gt;left; <span class="comment">// 指针一路向左访问</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指针一路向左，遇到某个节点的左指针为空</span></span><br><span class="line">        <span class="comment">// 则从栈中取出该节点并放入结果数组中</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            cur = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 看当前指针的右孩子是否为空</span></span><br><span class="line">            <span class="comment">// 若为空，则从栈中弹出顶部节点，并将其加入到结果数组中</span></span><br><span class="line">            <span class="comment">// 若不为空，则将右孩子入栈</span></span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前迭代法的前中后序遍历没有像递归那样统一起来，其实也是可以统一起来的。统一的写法：用一个栈完成遍历节点和处理节点的过程，但栈中要加入空节点做标记，标记正在遍历的节点和处理的节点。</p>
<h3 id="统一迭代"><a href="#统一迭代" class="headerlink" title="统一迭代"></a>统一迭代</h3><p>对前中后序这三种遍历方式，使用迭代法是可以写出统一风格的代码。以中序遍历为例，我们就将访问的节点放入栈中，把要处理的节点也放入栈中但是要做标记。如何标记呢，<strong>就是要处理的节点放入栈之后，紧接着放入一个空指针作为标记。</strong> 这种方法也可以叫做标记法。</p>
<h4 id="中序遍历-2"><a href="#中序遍历-2" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根节点非空才将其放入栈中</span></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环条件：栈不为空</span></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// node不为空，则按照右中左的顺序访问节点</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 右节点</span></span><br><span class="line">                st.<span class="built_in">push</span>(node); <span class="comment">// 中节点</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 左节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 只有遇到空节点的时候，才处理节点（将下一个节点放进结果集）</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 将空节点弹出，重新取出栈中的元素</span></span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">// 加入到结果集中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对于前序和后序遍历，只需要改变node不为空时访问节点的顺序即可。前序遍历原本的顺序是中左右，考虑到栈先入后出的特性，调整为右左中。后续遍历原本的顺序是左右中，考虑到栈先入后出的特性，调整为中右左。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="递归遍历-1"><a href="#递归遍历-1" class="headerlink" title="递归遍历"></a>递归遍历</h3><h4 id="144-前序遍历二叉树"><a href="#144-前序遍历二叉树" class="headerlink" title="144. 前序遍历二叉树"></a>144. 前序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 前序遍历递归写法的核心函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt; &amp;vec)</span> <span class="comment">// 递归函数的参数和返回值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>; <span class="comment">// 确定终止条件</span></span><br><span class="line">        </span><br><span class="line">        vec.<span class="built_in">push_back</span>(root-&gt;val); <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;left, vec); <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于主函数，调用核心函数</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(root, res); <span class="comment">// 调用核心函数</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>完整的，带有测试样例的代码为：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;left, res);</span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;right, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">traversal</span>(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建树的示例代码，需要根据实际情况调整</span></span><br><span class="line">    TreeNode* node3 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">    TreeNode* node2 = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">2</span>, node3, <span class="literal">nullptr</span>);</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">1</span>, <span class="literal">nullptr</span>, node2);</span><br><span class="line"></span><br><span class="line">    Solution solution;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res = solution.<span class="built_in">preorderTraversal</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> val : res) &#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放分配的内存（在实际使用中，考虑使用智能指针自动管理内存）</span></span><br><span class="line">    <span class="keyword">delete</span> node3;</span><br><span class="line">    <span class="keyword">delete</span> node2;</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="145-后序遍历二叉树"><a href="#145-后序遍历二叉树" class="headerlink" title="145. 后序遍历二叉树"></a>145. 后序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;left, res); <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;right, res); <span class="comment">// 右</span></span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val); <span class="comment">// 中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="94-中序遍历二叉树"><a href="#94-中序遍历二叉树" class="headerlink" title="94. 中序遍历二叉树"></a>94. 中序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;left, res); <span class="comment">// 左</span></span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val); <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">traversal</span>(root-&gt;right, res); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traversal</span>(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="迭代遍历-1"><a href="#迭代遍历-1" class="headerlink" title="迭代遍历"></a>迭代遍历</h3><h4 id="144-前序遍历二叉树-1"><a href="#144-前序遍历二叉树-1" class="headerlink" title="144. 前序遍历二叉树"></a>144. 前序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序为中左右，因为栈的先入后出的特性，所以代码顺序调整为中右左</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st; <span class="comment">// 用栈实现迭代，模拟递归</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res; <span class="comment">// 结果数组</span></span><br><span class="line"></span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">                res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 右</span></span><br><span class="line">            st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 左</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="145-后序遍历二叉树-1"><a href="#145-后序遍历二叉树-1" class="headerlink" title="145. 后序遍历二叉树"></a>145. 后序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后序遍历：左右中。前序遍历：中左右 </span></span><br><span class="line"><span class="comment">// 中左右-&gt;中右左-&gt;左右中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 左</span></span><br><span class="line">            st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 右</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="94-中序遍历二叉树-1"><a href="#94-中序遍历二叉树-1" class="headerlink" title="94. 中序遍历二叉树"></a>94. 中序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中序遍历的迭代写法，参见总结部分的精髓即可写出以下的代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止条件：指针和栈都为空</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 指针不为空，则将指针指向的节点放入栈中，指针向左走</span></span><br><span class="line">            <span class="keyword">if</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 指针为空，则将栈顶元素弹出并放入结果数组中，指针向右走</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="统一迭代-1"><a href="#统一迭代-1" class="headerlink" title="统一迭代"></a>统一迭代</h3><h4 id="94-中序遍历二叉树-2"><a href="#94-中序遍历二叉树-2" class="headerlink" title="94. 中序遍历二叉树"></a>94. 中序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将非空的头节点插入栈中</span></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环终止条件：栈为空</span></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若node不为空，则按照右中左的顺序访问节点</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 访问右节点</span></span><br><span class="line">                st.<span class="built_in">push</span>(node); <span class="comment">// 访问中节点</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>); <span class="comment">// 只访问没处理，在中结点上面添加NULL来标记</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 访问左节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若node为空，则处理该节点下面的节点，将其加入到res中</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="144-前序遍历二叉树-2"><a href="#144-前序遍历二叉树-2" class="headerlink" title="144. 前序遍历二叉树"></a>144. 前序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// node不为空，访问节点</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 右</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 左</span></span><br><span class="line">                st.<span class="built_in">push</span>(node); <span class="comment">// 中</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>); <span class="comment">// 中节点后面插入NULL</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// node为空，处理节点</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="145-后序遍历二叉树-2"><a href="#145-后序遍历二叉树-2" class="headerlink" title="145. 后序遍历二叉树"></a>145. 后序遍历二叉树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统一迭代写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 节点不为空，则访问节点，顺序为中右左</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(node);</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 节点为空，则处理节点</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="递归遍历-2"><a href="#递归遍历-2" class="headerlink" title="递归遍历"></a>递归遍历</h3><ol>
<li>记住递归三部曲：<ul>
<li>确定递归函数的参数和返回值</li>
<li>确定终止条件</li>
<li>确定单层递归的逻辑</li>
</ul>
</li>
<li>前序、中序、后序遍历的代码只有单层递归的逻辑部分有所不同。更确切地说，只是三行代码的顺序发生了改变。</li>
<li>递归的核心函数返回值为void，结果数组以引用的方式作为参数传入，经过核心函数的改变后，改变后的数组会被传出，在主函数中调用其即可。</li>
<li>易错点：核心函数中忘记加上引用<code>&amp;</code>，插入数组时没有取root指针的值(<code>root-&gt;val</code>)，而是直接将root指针传入了。</li>
<li>注意如何写出完整的带有测试样例的代码，这涉及到如何写<code>struct TreeNode</code>和<code>main</code>函数。</li>
<li>熟悉几个英文单词：<ul>
<li>遍历：traversal</li>
<li>前序：pre-order、中序：in-order、后序：post-order、层序：level-order</li>
<li>二叉树：binary tree</li>
<li>递归：Recursion  迭代：Iteration</li>
</ul>
</li>
</ol>
<h3 id="迭代遍历-2"><a href="#迭代遍历-2" class="headerlink" title="迭代遍历"></a>迭代遍历</h3><ol>
<li>迭代遍历的本质是用栈来模拟递归，用结果数组来收集结果。由于栈的先入后出的特性，前序遍历的顺序本来应该是中左右，迭代写法的顺序调整为中右左。后序遍历是在前序遍历的基础上颠倒右和左的顺序，再翻转结果数组（前序遍历=中左右-&gt;中右左-&gt;左右中=后序遍历）。</li>
<li>中序遍历的迭代写法不能像后序遍历那样从前序遍历迭代写法的基础上直接进行改造。这是因为在中序遍历中，遍历节点的顺序与和处理节点的顺序不同。</li>
<li>中序遍历的迭代写法需要一个指针来遍历所有节点，一个栈用于记录遍历过的节点，一个数组用于存放结果。</li>
<li><strong>中序遍历迭代写法的精髓</strong>：当指针不为空时，用栈记录指针遍历过的元素，指针持续向左走。当指针为空时，从栈中弹出顶部的节点并将其放入结果数组中，然后指针向右走。当指针为空且栈为空时，终止。</li>
<li>统一迭代的写法可以将前中后序遍历的迭代写法统一起来。</li>
<li>迭代写法确实更复杂些，注意事项也更多，也更容易写错。了解思路即可，可以放过。</li>
</ol>
<h3 id="统一迭代-2"><a href="#统一迭代-2" class="headerlink" title="统一迭代"></a>统一迭代</h3><ol>
<li>统一迭代的思路其实比较清晰：当头节点非空时，头节点入栈。在栈非空时，不断循环。弹出栈顶节点，若该节点不为空，则按照顺序访问节点，并在访问中节点之后插入NULL，作为标记（说明该节点只被访问过，没有被处理过）；若该节点为空，则处理当前的栈顶节点（原本的栈顶节点已被弹出），将其放入结果数组中，并将其弹出。</li>
<li>对于前序、中序和后序遍历，只需要改变node不为空时访问节点的顺序即可。<strong>考虑到栈先入后出的特性</strong>：前序遍历原本的顺序是中左右，调整为右左中。中序遍历原本的顺序是左中右，调整为右中左。后续遍历原本的顺序是左右中，调整为中右左。</li>
<li>统一迭代思路清晰且对于前中后序遍历能够保持一致的写法，建议用迭代法遍历二叉树时，优先采用统一迭代的写法。前面的迭代遍历的一般写法虽然较为简单，但只能在前序和后序遍历时保持统一，在中序遍历时需要重新写。</li>
</ol>
]]></content>
      <categories>
        <category>算法（二叉树）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>二叉树</tag>
        <tag>前中后序遍历</tag>
        <tag>递归遍历</tag>
        <tag>迭代遍历</tag>
        <tag>统一迭代</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 17 | Leetcode 110, 257, 404</title>
    <url>/2024/02/20/Day-17-Leetcode-110-257-404/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html">110.平衡二叉树</a><br><a href="https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html">257. 二叉树的所有路径</a><br><a href="https://programmercarl.com/0404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.html">404.左叶子之和</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h3><h3 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h3><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h3><p>先尝试递归解法。我写下了如下的代码，可以运行成功，但时间复杂度较高：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 求最大根节点的最大高度，用后序遍历</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getheight</span><span class="params">(TreeNode* node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">getheight</span>(node-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">getheight</span>(node-&gt;right);</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span> + <span class="built_in">max</span>(left, right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> left = <span class="built_in">isBalanced</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> leftdepth = <span class="built_in">getheight</span>(root-&gt;left);</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> right = <span class="built_in">isBalanced</span>(root-&gt;right);</span><br><span class="line">        <span class="type">int</span> rightdepth = <span class="built_in">getheight</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(leftdepth - rightdepth) &lt;= <span class="number">1</span>) flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根节点需要同时满足：左子树为平衡二叉树，右子树也为平衡二叉树，且左右子树高度差&lt;=1</span></span><br><span class="line">        <span class="comment">// 整个树才是平衡二叉树</span></span><br><span class="line">        <span class="type">bool</span> res = left &amp;&amp; right &amp;&amp; flag;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>接着看卡尔的讲解。</p>
<h3 id="257-二叉树的所有路径-1"><a href="#257-二叉树的所有路径-1" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h3><p>拿到本题，我毫无办法，直接看卡尔的讲解。</p>
<h3 id="404-左叶子之和-1"><a href="#404-左叶子之和-1" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h3><p>本题我本来想一上来就是层序遍历，但后面发现是左叶子，而非左孩子。叶子节点是没有左右孩子的节点。我产生了一个另外的想法，先前序遍历一遍二叉树，遍历到左节点时判断左节点是否是左叶子节点，是的话则将其加入结果res中，最后返回res即可。我尝试了，但做不出来，看卡尔的讲解。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="110-平衡二叉树-1"><a href="#110-平衡二叉树-1" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h3><p>平衡二叉树：二叉树中任何一个节点左右子树的高度差不超过1。求高度要用后序遍历。本题可以用递归法，也可以用迭代法，但优先掌握递归法。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* node)</span> <span class="comment">// 返回一个节点的高度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 终止条件</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="comment">// 若某节点的左右子树的高度差超过1，说明该子树不再为平衡二叉树，进而说明整个树并非平衡二叉树</span></span><br><span class="line">    <span class="comment">// 当发现这样的节点时，就不返回节点的高度，直接返回-1</span></span><br><span class="line">    <span class="comment">// 左</span></span><br><span class="line">    <span class="type">int</span> left = <span class="built_in">getHeight</span>(node-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 左子树并非平衡二叉树，则返回-1</span></span><br><span class="line">    <span class="comment">// 右</span></span><br><span class="line">    <span class="type">int</span> right = <span class="built_in">getHeight</span>(node-&gt;right);</span><br><span class="line">    <span class="keyword">if</span> (right == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 右子树并非平衡二叉树，则返回-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中</span></span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(left - right) &gt; <span class="number">1</span>) res = <span class="number">-1</span>; <span class="comment">// 左右子树相差大于1，则说明该子树为非平衡二叉树，返回-1</span></span><br><span class="line">    <span class="keyword">else</span> res = <span class="number">1</span> + <span class="built_in">max</span>(left, right); <span class="comment">// 计算左右子树的父节点的高度</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>必须用后序遍历，因为需要先计算左右子树的高度，然后才能进行比较。完整代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// node为根节点的二叉树是平衡二叉树则返回node的高度，是非平衡二叉树则返回-1</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getheight</span><span class="params">(TreeNode* node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">getheight</span>(node-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">getheight</span>(node-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(left - right) &gt; <span class="number">1</span>) res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> res = <span class="number">1</span> + <span class="built_in">max</span>(left, right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getheight</span>(root) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="257-二叉树的所有路径-2"><a href="#257-二叉树的所有路径-2" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h3><p>给定二叉树，返回从根节点到叶子节点的所有路径。<strong>求路径需要使用前序遍历</strong>。原因：只有前序遍历可以让父节点指向孩子节点，从而输出路径。虽然也可以用迭代法，但推荐使用递归法。<strong>回溯和递归是相辅相成、相伴而生的</strong>。本题第一次提到回溯。本题的解题过程中有回溯的过程。</p>
<p>为什么会有回溯？假设有以下的二叉树：<br><img src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg" alt="img"></p>
<p>假设有容器收集路径，收集到路径125，如何弹出2和5，然后再让容器重新收集路径13？回溯的过程：弹出5和2，加入3。<br>关键代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// path数组用来记录单条路径</span></span><br><span class="line"><span class="comment">// res数组用来存放最终的结果（包含多条路径），是一个数组，数组的每个元素都是一个字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* node, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;string&gt;&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    path.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">// 中：处理过程</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 左右孩子都为空，说明遍历到了叶子节点，收获结果</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path); <span class="comment">// 将单条路径的结果放入最终结果中，省略了vector-&gt;string和加上-&gt;的代码</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层处理逻辑，用前序遍历：中左右</span></span><br><span class="line">    <span class="comment">// 中：处理过程，即添加遍历到的节点，本题的处理过程需要写到终止条件之前</span></span><br><span class="line">    <span class="comment">// 因为本题的终止条件是到叶子节点，若中写在终止条件之后，则叶子节点没有被放入path中</span></span><br><span class="line">    <span class="comment">// 左</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">traversal</span>(node-&gt;left, path, res); </span><br><span class="line">    	  path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯，弹出5和2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 右</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;right) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">traversal</span>(node-&gt;right, path, res);</span><br><span class="line">    	  path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* node, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;string&gt;&amp; res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">// 中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            string s;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; path.<span class="built_in">size</span>() - <span class="number">1</span>; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                s += <span class="built_in">to_string</span>(path[i]);</span><br><span class="line">                s += <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s += <span class="built_in">to_string</span>(path[path.<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">            res.<span class="built_in">push_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">traversal</span>(node-&gt;left, path, res);</span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">traversal</span>(node-&gt;right, path, res);</span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">traversal</span>(root, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="404-左叶子之和-2"><a href="#404-左叶子之和-2" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h3><p>左叶子的定义：首先必须是叶子节点（叶子节点的左右孩子为空）。同时还必须是父节点的左孩子。</p>
<p>本题和之前的二叉树类题目有不同之处。之前的题目遍历到哪个节点就处理哪个节点，但这题遍历到某个节点时，不能直接处理该节点，因为无法判断该节点是否其父节点的左孩子。<strong>这题的思路为遍历到某个节点，若其左孩子不为空，但左孩子的左右孩子为空，那么该节点的左孩子就是左叶子</strong>，处理该节点的左孩子即可。</p>
<p><strong>本题用后序遍历比较容易</strong>，因为后序遍历是左右中，是一层层向上返回。本题也可使用迭代法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">traversal</span><span class="params">(TreeNode* node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件1</span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 终止条件2，可不写，不写就会做无用的递归</span></span><br><span class="line">    <span class="comment">// 如果当前遍历的节点是叶子节点，那其左叶子也必定是0</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 左</span></span><br><span class="line">    <span class="type">int</span> leftNum = <span class="built_in">traversal</span>(node-&gt;left);</span><br><span class="line">    <span class="comment">// node为左叶子的父节点，左叶子为node-&gt;left</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left != <span class="literal">NULL</span> &amp;&amp; node-&gt;left-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;left-&gt;right == <span class="literal">NULL</span>) </span><br><span class="line">        leftNum = node-&gt;left-&gt;val;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 右</span></span><br><span class="line">    <span class="type">int</span> rightNum = <span class="built_in">traversal</span>(node-&gt;right);</span><br><span class="line">    <span class="comment">// 中</span></span><br><span class="line">    <span class="type">int</span> sum = leftNum + rightNum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码可以精简。但不建议初学者看。</p>
<p>本题其实用层序遍历也可以解决，关键依然在于对于左叶子的父节点的判断，代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left &amp;&amp; node-&gt;left-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;left-&gt;right == <span class="literal">NULL</span>) res += node-&gt;left-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>直接把queue改为stack，也可以解决本题。采用queue的写法是层序遍历，而采用stack的写法是普通迭代写法（区别于统一迭代写法）。</p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="110-平衡二叉树-2"><a href="#110-平衡二叉树-2" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h3><ol>
<li>平衡二叉树：二叉树中任何一个节点左右子树的高度差不超过1。求高度要用后序遍历。</li>
<li>我在初次尝试中的做法较为简单，但没有进行剪枝，意味着即使某些树的子树为非平衡二叉树，依然会继续递归，而不是直接<code>return false</code>。这样导致程序的时间复杂度较高。</li>
<li>卡尔提供的解法的核心思路在于：node为根节点的二叉树是平衡二叉树则返回node的高度，是非平衡二叉树则返回-1。本解法的时间复杂度较低，原因在于当发现某个子树是非平衡二叉树时，就说明整棵二叉树都是非平衡二叉树，则一路返回-1，相当于做了剪枝的操作。</li>
<li>本题优先掌握递归法即可，不要求掌握迭代写法。迭代写法代码很长，且因为迭代法有很多重复的计算，导致效率很低。</li>
</ol>
<h3 id="257-二叉树的所有路径-3"><a href="#257-二叉树的所有路径-3" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h3><ol>
<li><p>本题第一次让我接触到了回溯。更具体地说，是第一次在代码中显示地写出了回溯。</p>
</li>
<li><p>本题虽然是一个easy，但对我这个初学者来说难度不小，需要记得复习。</p>
</li>
<li><p>本题的核心思路依然是递归三部曲：</p>
<ul>
<li>确定传入的参数：节点、单条路径和最终结果，后两者需要加上引用。</li>
<li>终止条件：到达叶子节点</li>
<li>单层递归逻辑：前序遍历。中节点的处理逻辑需要放在终止条件之前，否则单条路径中不包含叶子节点。左右节点的处理逻辑注意判空和回溯。</li>
</ul>
</li>
<li><p>本题推荐采用我在实现中的写法，虽然代码略显复杂，但清楚地体现了回溯的过程，且不容易出错。不建议写精简的写法，容易出错，且对理解本题的原理并无帮助。</p>
</li>
</ol>
<h3 id="404-左叶子之和-3"><a href="#404-左叶子之和-3" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h3><ol>
<li>注意本题中对于左叶子的定义。</li>
<li>本题不能遍历到哪个节点就处理哪个节点，而是遍历到左叶子的父节点，就处理左叶子。</li>
<li>本题采用后序遍历的写法，代码较为简单，结果从下往上一层层返回。本题也可采用层序遍历的套路写法。</li>
<li>本题有两个终止条件，第二个终止条件可以不写，但会导致多递归一层。</li>
<li><strong>注意如何判断一个节点是否为左叶子的父节点</strong>：<code>if (node-&gt;left != NULL &amp;&amp; node-&gt;left-&gt;left == NULL &amp;&amp; node-&gt;left-&gt;right == NULL)</code>。</li>
<li>本题依然可以方便地套用层序遍历的常规代码。</li>
<li>我非常惊讶地发现，<strong>在本题中，若采用类似层序遍历的写法，用栈或者队列作为存放遍历过的节点的数据结构，都可以得到能够正常运行的代码</strong>。卡尔的讲义上给出的迭代法的写法并非是严格意义上的层序遍历，而仅仅是前序遍历的普通迭代写法（也并非统一迭代）。层序遍历需要用队列作为数据结构，而卡尔给的迭代写法采用了栈作为数据结构，但采用严格的层序遍历的写法依然可以解决这道题。</li>
</ol>
]]></content>
      <categories>
        <category>算法（二叉树）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>递归解法</tag>
        <tag>层序遍历</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 15 | Leetcode Breadth-first traversal, 226, 101</title>
    <url>/2024/02/15/Day-15-Leetcode-Breadth-first-traversal-226-101/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html">层序遍历</a><br><a href="https://programmercarl.com/0226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.html">226.翻转二叉树</a><br><a href="https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html">101. 对称二叉树</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>二叉树的层序遍历相当于图论中的广度优先搜索。leetcode 102：层序输出二叉树。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[6] --&gt; B[4];</span><br><span class="line">    A --&gt; C[7];</span><br><span class="line">    B --&gt; D[1];</span><br><span class="line">    B --&gt; E[3];</span><br><span class="line">    C --&gt; F[5]</span><br><span class="line">    C --&gt; G[8]</span><br></pre></td></tr></table></figure>
<p>上述二叉树，一层放在一个数组里，返回的是二维数组。只依赖二叉树本身的结构，无法层序保存二叉树中的节点。需要借助另一种数据结构：队列，用于保存每一层遍历过的元素。图论中的广度优先搜索也是依赖队列实现的。</p>
<p>模拟过程：根节点6加入队列，记录队列大小（size=1）。size表示这层二叉树中有几个元素。接下来弹出当前层的元素6，将6加入到结果数组中，开始处理下一层。再将6的左右孩子4和7加入队列中，此时size=2，第二层的元素个数为2，接下来弹出size（2）个元素，先弹出4，将4的左右孩子1和3加入队列。再弹出7，size归0，第二层遍历结束。弹出7后，再将7的左右孩子5和8加入队列。此时size=4，说明第三层中元素个数为4。接着队列中再弹出size(4)个元素，加入结果数组。上述过程如下图所示。<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-02-16_02-48-16.png?raw=true" alt="Snipaste_2024-02-16_02-48-16.png"></p>
<p>我尝试根据上述模拟过程独立写出代码，但不知道怎么写while循环结束的条件。直接看卡尔的讲解。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">queue&lt;TreeNode*&gt; q;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历的终止条件：队列中无元素</span></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> size = q.<span class="built_in">size</span>(); <span class="comment">// 记录当前层节点的数量</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec; <span class="comment">// 存放一层的节点的值</span></span><br><span class="line">    <span class="comment">// 队列中弹出size个节点，加入到vec中</span></span><br><span class="line">    <span class="keyword">while</span> (size -- )</span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将弹出节点的左右孩子加入到队列中</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="built_in">push_back</span>(vec);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure></p>
<p>上述代码也是图论中广度优先搜索的模板。leetcode上有10道题都可以用本模板解决，只需要改动不超过三行代码。</p>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h3><p>我能想到的办法是层序遍历二叉树，然后将每一层的输出数组翻转。但这样做需要将数组还原回到二叉树，比较麻烦。随后有产生想法，让一个节点的左指针指向其右节点，右指针指向其左节点即可，可能需要一个中间变量来存放左节点或者右节点。直接看卡尔的视频。</p>
<h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h3><p>看到本题，我的第一想法是，本题是翻转二叉树的变式。若一个二叉树被翻转后，仍和原来保持一致，那么就可以认为它是对称二叉树。现在的问题在于如何比较两棵二叉树是否完全相同，我认为可以采用层序遍历，一层层比较即可。或者直接层序遍历完后将二叉树存入一个二维数组中，然后用两重循环+双指针算法判断二维数组是否对称。这样做实际上有个问题：</p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg" alt="img"></p>
<p>上面这棵二叉树，层序遍历得到的二维数组为[1, [2, 2], [3, 3]]。二维数组是对称的，但二叉树却不是对称的。还是看卡尔的讲解吧。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="层序遍历-1"><a href="#层序遍历-1" class="headerlink" title="层序遍历"></a>层序遍历</h3><h4 id="107-二叉树的层次遍历II"><a href="#107-二叉树的层次遍历II" class="headerlink" title="107.二叉树的层次遍历II"></a>107.二叉树的层次遍历II</h4><p>只需要在最后翻转res数组即可：<code>reverse(res.begin(), res.end());</code>。翻转一个二维数组，二维数组中所有元素（一维数组）的顺序都会颠倒，但一维数组本身（即一维数组内部的顺序不会改变）。reverse函数可以用双指针算法手动实现：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> len = res.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = len - <span class="number">1</span>; i &lt; len / <span class="number">2</span>; i ++ , j -- )</span><br><span class="line">    <span class="built_in">swap</span>(res[i], res[j]);</span><br></pre></td></tr></table></figure></p>
<p>似乎手动实现的速度要快于调用现成的reverse函数。</p>
<h4 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a>199.二叉树的右视图</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (i == size - <span class="number">1</span>) res.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">// 将一层最右边的节点的值加入到结果数组中</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                sum += node-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(sum / size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="429-N叉树的层序遍历"><a href="#429-N叉树的层序遍历" class="headerlink" title="429. N叉树的层序遍历"></a>429. N叉树的层序遍历</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(Node* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                Node* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; node-&gt;children.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                    <span class="keyword">if</span> (node-&gt;children[i]) q.<span class="built_in">push</span>(node-&gt;children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a>515.在每个树行中找最大值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> max = <span class="number">-2147483648</span>; <span class="comment">// Node.val的最小值，可简写为int max = INT_MIN;</span></span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                max = node-&gt;val &gt; max ? node-&gt;val: max; <span class="comment">// 注意问号表达式的用法</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116. 填充每个节点的下一个右侧节点指针"></a>116. 填充每个节点的下一个右侧节点指针</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            Node* node0, *node; </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 取出一层的头结点</span></span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    node0 = q.<span class="built_in">front</span>();</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                 <span class="comment">// 本句话的目的：当一层只有头节点时，可以让该头节点在弹出的同时继续在队列中行插入其左右子节点</span></span><br><span class="line">                    node = node0; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 本层前一个节点next指向本节点</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// node0和node交替前进</span></span><br><span class="line">                    node = q.<span class="built_in">front</span>();</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                    node0-&gt;next = node;</span><br><span class="line">                    node0 = node;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 本层最后一个节点指向NULL</span></span><br><span class="line">            node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="117-填充每个节点的下一个右侧节点指针II"><a href="#117-填充每个节点的下一个右侧节点指针II" class="headerlink" title="117.填充每个节点的下一个右侧节点指针II"></a>117.填充每个节点的下一个右侧节点指针II</h4><p>本题代码和116完全相同。116题目中的条件：完整二叉树实际上是多余的。不管是不是完整二叉树，都可以用同样的代码解题。</p>
<h4 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res ++ ;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="literal">false</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意：只有当某个节点的左右孩子都为空，这个节点才在二叉树的底部。一旦遇到这样的节点，立即跳出循环，返回res。根据这个思路，我将上述代码做了简化：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">                    <span class="keyword">return</span> ++ res;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="226-翻转二叉树-1"><a href="#226-翻转二叉树-1" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h3><p>面试中的常考题。本质是交换每个节点的左右孩子，交换的是指针而非数值。这道题显然用递归解比较简单，但要想清楚用哪种遍历顺序。<strong>本题用前序和后序是最直接的，用中序遍历代码比较难写</strong>。迭代和层序遍历也可以做此题，但不要求掌握。</p>
<p>递归三部曲：</p>
<ul>
<li><p>确定递归函数的返回值和参数: <code>TreeNode* invertTree(root)</code></p>
</li>
<li><p>确定函数的终止条件：<code>if (root == NULL) return root</code></p>
</li>
<li><p>具体的处理逻辑：前序遍历——中左右</p>
<p> 对中节点，需要交换中节点的左右孩子: <code>swap(root-&gt;left, root-&gt;right)</code></p>
<p> 左节点：<code>invertTree(root-&gt;left);</code></p>
<p> 右节点：<code>invertTree(root-&gt;right);</code></p>
<p> 将swap函数放在处理逻辑的最后，就是左右中，就是后续遍历。因此前序和后续遍历皆可解本题。但中序遍历不可以，举个例子：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[4] --&gt; B[2];</span><br><span class="line">    A --&gt; C[7];</span><br><span class="line">    B --&gt; D[1];</span><br><span class="line">    B --&gt; E[3];</span><br><span class="line">    C --&gt; F[6]</span><br><span class="line">    C --&gt; G[9]</span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[4] --&gt; B[2];</span><br><span class="line">    A --&gt; C[7];</span><br><span class="line">    B --&gt; D[3];</span><br><span class="line">    B --&gt; E[1];</span><br><span class="line">    C --&gt; F[6]</span><br><span class="line">    C --&gt; G[9]</span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[4] --&gt; B[7];</span><br><span class="line">    A --&gt; C[2];</span><br><span class="line">    B --&gt; D[6];</span><br><span class="line">    B --&gt; E[9];</span><br><span class="line">    C --&gt; F[3]</span><br><span class="line">    C --&gt; G[1]</span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[4] --&gt; B[7];</span><br><span class="line">    A --&gt; C[2];</span><br><span class="line">    B --&gt; D[6];</span><br><span class="line">    B --&gt; E[9];</span><br><span class="line">    C --&gt; F[1]</span><br><span class="line">    C --&gt; G[3]</span><br></pre></td></tr></table></figure>
<p> 相当于原先根节点的左子树被处理了两次，原先根节点的右子树没被处理。对中序遍历的写法，具体的逻辑应该为：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">invertTree</span>(root-&gt;left); <span class="comment">// 处理左子树</span></span><br><span class="line"><span class="built_in">swap</span>(root-&gt;left, root-&gt;right); <span class="comment">// 交换左右子树，原先的右子树变为了现在的左子树，原先的左子树变为了现在的右子树</span></span><br><span class="line"><span class="built_in">invertTree</span>(root-&gt;left); <span class="comment">// 原先的左子树已经被处理过了，现在需要处理原先的右子树，就是现在的左子树</span></span><br></pre></td></tr></table></figure>
<p> 不建议绕弯子去写中序，很容易出错。</p>
</li>
</ul>
<p>前序遍历：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前序遍历写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root; <span class="comment">// 终止条件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中左右</span></span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root; <span class="comment">// 每次递归后返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>后序遍历写法：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后序遍历写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左右中</span></span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>中序遍历写法(<strong>绕，理解即可，不要写</strong>)：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中序遍历写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左中右</span></span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="101-对称二叉树-1"><a href="#101-对称二叉树-1" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h3><p>本质上是判断根节点的左子树和右子树是否可以互相翻转。需要比较二叉树同是外侧的节点和同是内侧的节点是否相等。接着考虑用哪种方式遍历二叉树。<strong>二叉树类的题目确定遍历顺序非常重要</strong>。<strong>本题目只能使用后序遍历</strong>（左右中）。因为我们需要先收集完根节点左右孩子的信息再返回给根节点，才能知道根节点的左右孩子是否相同，进而知道二叉树是否是对称的。</p>
<ol>
<li><p>确定函数传入的参数和返回值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断根节点的左右子树是否可以互相翻转</span></span><br><span class="line"><span class="comment">// 本质是判断两个二叉树是否可以相互翻转，因此需要同时处理两棵二叉树</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* left, TreeNode* right)</span> <span class="comment">// 传入的参数为左子树的头节点和右子树的头节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>确定终止条件<br>共有以下5种情况<br>|左节点|右节点|返回值|<br>|:—-:|:—-:|:—-:|<br>|空|非空|false|<br>|非空|空|false|<br>|空|空|true|<br>|非空且值不等|非空且值不等|false|<br>|非空且值相等|非空且值相等|继续向下遍历，写单层递归的逻辑|</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>单层递归的逻辑（如何像下一层遍历）<br>同是外侧的节点和同是内侧的节点相同，才可以return true。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> outside = <span class="built_in">compare</span>(left-&gt;left, right-&gt;right); <span class="comment">// 比较一对外侧节点是否相同</span></span><br><span class="line"><span class="type">bool</span> inside = <span class="built_in">compare</span>(left-&gt;right, right-&gt;left);  <span class="comment">// 比较一对内侧节点是否相同</span></span><br><span class="line"><span class="type">bool</span> res = outside &amp;&amp; inside; <span class="comment">// 内外侧节点都相同，则才可以左右翻转</span></span><br><span class="line"><span class="keyword">return</span> res; </span><br></pre></td></tr></table></figure>
<p>上面代码框的前三行代码分别对应后序遍历的左右中。中只能放在最后，不能提前，否则会出现还没计算outside和inside就来计算res的情况，因此必须是后序遍历。</p>
</li>
</ol>
<p>后序遍历解决本题的完整代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* left, TreeNode* right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> outside = <span class="built_in">compare</span>(left-&gt;left, right-&gt;right);</span><br><span class="line">        <span class="type">bool</span> inside = <span class="built_in">compare</span>(left-&gt;right, right-&gt;left);</span><br><span class="line">        <span class="type">bool</span> res = outside &amp;&amp; inside;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>本题也可以用迭代法实现。</p>
<h4 id="572-另一个树的子树"><a href="#572-另一个树的子树" class="headerlink" title="572.另一个树的子树"></a>572.另一个树的子树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* left, TreeNode* right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left != <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> outside = <span class="built_in">compare</span>(left-&gt;left, right-&gt;left);</span><br><span class="line">        <span class="type">bool</span> inside = <span class="built_in">compare</span>(left-&gt;right, right-&gt;right);</span><br><span class="line">        <span class="type">bool</span> res = outside &amp;&amp; inside;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (subRoot == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">compare</span>(root, subRoot)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 递归比较root树的子树和subRoot是否相同</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSubtree</span>(root-&gt;left, subRoot) || <span class="built_in">isSubtree</span>(root-&gt;right, subRoot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本题注意如何递归地比较root树的子树和subRoot树是否相同：<code>return isSubtree(root-&gt;left, subRoot) || isSubtree(root-&gt;right, subRoot);</code>。</p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="层序遍历-2"><a href="#层序遍历-2" class="headerlink" title="层序遍历"></a>层序遍历</h3><ol>
<li>本题（leetcode102）的模板需要熟记，可以用来解决10道leetcode。</li>
<li>本题的关键在于用队列来保存每一层遍历过的元素。</li>
<li><strong>本题的思路可以概括为</strong>：将二叉树的一层加入到队列中，记录队列的大小为size。然后弹出size个节点，用数组收集弹出的节点，并在弹出节点的同时插入弹出的节点的左右子节点。弹完size个节点后，数组中就是当前层的所有元素，而队列中则是下一层的所有节点。</li>
<li>本题不需要用指针来遍历整棵树，只需要对维护和操作队列即可。</li>
<li>本题收获最终结果的退出条件为队列为空；二叉树的一层遍历完毕的退出条件为size = 0。</li>
<li><p>二叉树的右视图这题需要特别注意，以下写法是错误的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>原因是：对于以下的二叉树：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[6] --&gt; B[4];</span><br><span class="line">    A --&gt; C[NULL];</span><br></pre></td></tr></table></figure>
<p>尽管6只有左子节点，没有右子节点，但站在二叉树的右边看这颗二叉树，看到的结果是[6, 4]，如果按照上面的写法，则返回的结果是[6]，4作为左子节点不会被加入到队列中，也不会出现在结果数组中。</p>
</li>
<li><p>N叉树的层序遍历需要注意：新定义的N叉树的名字叫Node，不要下意识地写成TreeNode。在队列中更新N叉树下一层的节点时，注意需要用for循环遍历一遍当前node的孩子数组，因为N叉树中的一个节点不仅有左右孩子，而是有一个孩子数组。</p>
</li>
<li><p>二叉树的最大深度的解题关键在于：层序遍历二叉树，每遍历完一层记录层数的变量+1。</p>
</li>
<li><p>二叉树的最大/最小深度这两道题，<code>res ++</code>放在第二重while循环之后和之前都可以。我在实现中的写法都是把<code>res ++</code>放在了第二重while循环之后，但实际上放在第二重while循环之前写出的代码更简洁易懂，可以参考代码随想录上给出的代码。</p>
</li>
<li><p>注意复习填充每个节点的下一个右侧节点指针，这道题第一遍没有写出来。本题的关键在于特判一层的头节点，以及node0和node交替前进。</p>
</li>
<li><p>116和117题的代码完全相同。差别只在于116题题目说是完整二叉树，117题目则没有这个说明。</p>
</li>
</ol>
<h3 id="226-翻转二叉树-2"><a href="#226-翻转二叉树-2" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h3><ol>
<li><p>注意：本题中的root是指遍历的每个节点，而非特指根节点。</p>
</li>
<li><p>本题的关键思路：交换中节点的左右子树，递归处理左右节点。</p>
</li>
<li><p>记住前序和后续的写法即可，swap要么写在左右的上面，要么写在左右的下面。抛弃中序写法，太绕！</p>
</li>
<li><p>记得最后要<code>return root</code>。因为终止条件：<code>if (root == NULL) return root</code>，只会返回一个为空的节点。大多数情况下不会触发这个终止条件，而是触发最后一个<code>return root</code>。</p>
</li>
<li><p>可以定义一个cur节点遍历二叉树的每个节点，这样就不会与根节点root产生混淆。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前序遍历写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中左右</span></span><br><span class="line">        <span class="built_in">swap</span>(cur-&gt;left, cur-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(cur-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(cur-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>本题除递归写法外，用一般迭代、统一迭代、层序遍历的写法都可以，其实在原本的三种迭代方式的代码的基础上稍作修改就可以，但三种迭代方式的代码本身就已经较为复杂，容易写错，因此除非必须建议不要采用迭代写法。</p>
</li>
<li><p>但还是不得不说，<strong>层序遍历解本题也很方便</strong>，本题也可以归类到层序遍历能够解决的10道题中，在层序遍历的基础上，交换每个节点的左右子节点即可，代码如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(node-&gt;left, node-&gt;right); <span class="comment">// 交换每个节点的左右子节点</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="101-对称二叉树-2"><a href="#101-对称二叉树-2" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h3><ol>
<li>本题实际上需要比较根节点的左右子树是否可以相互翻转，因此需要同时遍历两棵树，所以传入的参数为左右子树的头节点。</li>
<li>本题只能采用后序遍历，遍历左子树的顺序是左右中，遍历右子树的顺序是右左中。</li>
<li>终止条件需要分五类讨论。见实现中的表格。</li>
<li>单层递归的核心逻辑为：判断同在外侧的节点是否相同，判断同在内侧的节点是否相同。</li>
<li>本题的迭代写法其实也不难理解，原理是通过一个容器来成对的存放我们要比较的元素。但优先掌握本题的递归写法即可。</li>
<li>100.相同的树和572.另一个树的子树基本和本题是一样的，只要稍加修改就可以。572题稍有特殊，需要注意如何递归地比较root树的子树和subRoot树是否相同。同时在主函数中也需要进行分类讨论（subRoot树为空, root树为空，两树相同，root树的子树和subRoot树相同/相异）。</li>
</ol>
]]></content>
      <categories>
        <category>算法（二叉树）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>二叉树</tag>
        <tag>递归解法</tag>
        <tag>层序遍历</tag>
        <tag>后序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 16 | Leetcode 104, 559, 111, 222</title>
    <url>/2024/02/18/Day-16-Leetcode-104-559-111-222/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html">104.二叉树的最大深度</a><br><a href="https://programmercarl.com/0111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.html">111.二叉树的最小深度</a><br><a href="https://programmercarl.com/0222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.html">222.完全二叉树的节点个数</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h3><h3 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h3><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="104-二叉树的最大深度-1"><a href="#104-二叉树的最大深度-1" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><p>我看到本题后，发现本题在层序遍历里面做过，就用层序遍历先求解。写出了如下代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>本题应该可以尝试用别的遍历方法，比如递归去求解。直接看卡尔的视频讲解吧。</p>
<h3 id="559-n叉树的最大深度"><a href="#559-n叉树的最大深度" class="headerlink" title="559. n叉树的最大深度"></a>559. n叉树的最大深度</h3><p>本题我首先尝试用层序遍历的解法求解，写出了如下的可以AC的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        <span class="type">int</span> height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                Node* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; node-&gt;children.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                    <span class="keyword">if</span> (node-&gt;children[i]) q.<span class="built_in">push</span>(node-&gt;children[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            height ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>接着思考如何递归求解。递归知道思路，但写不出取孩子树最大高度的那部分关键代码。</p>
<h3 id="111-二叉树的最小深度-1"><a href="#111-二叉树的最小深度-1" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h3><p>本题可以用层序遍历来做，属于层序遍历的10道题之一。我写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            depth ++ ;</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span> (!node-&gt;left &amp;&amp; !node-&gt;right) <span class="keyword">return</span> depth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>我再尝试用递归求解。发现有坑，做不出来，看卡尔的讲解。</p>
<h3 id="222-完全二叉树的节点个数-1"><a href="#222-完全二叉树的节点个数-1" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h3><p>拿到本题，我的第一想法依然是层序遍历。不得不说层序遍历法可以解决很多问题。我写下了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size -- )</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                cnt ++ ;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>感叹下，层序遍历确实能解决很多题，应该还不止卡尔给出的那10道题。我再来尝试递归解法。我觉得应该采用后序遍历，先统计根节点左右子树的节点数量，将二者加起来再加1即可。我写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序遍历：左右中</span></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">countNodes</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">        <span class="type">int</span> cnt = left + right + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这道题我能想到的解法就是这两种，接着看卡尔的讲解。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="104-二叉树的最大深度-2"><a href="#104-二叉树的最大深度-2" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><p>什么是深度，什么是高度？</p>
<ul>
<li>深度：二叉树中任意一个节点到根节点的距离。根节点的深度规定为1（0也可以，规则不同）。</li>
<li>高度：二叉树中任意一个节点到叶子节点的距离。叶子节点的高度规定为1。</li>
</ul>
<p><strong>求高度用后序遍历，求深度用前序遍历</strong>。求高度是从下往上计数，因此要求从下往上遍历，而后序遍历顺序为左右中，恰好就是从下往上。求深度是从上往下计数，因此要求从上往下遍历，而前序遍历顺序为中左右。恰好就是从上往下。本题本来应该用前序遍历，但<strong>根节点的高度就是二叉树的最大深度</strong>，<strong>因此本题用后序遍历也可以做</strong>。</p>
<p>递归三部曲：</p>
<ul>
<li><p>传入的参数和返回值</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getheight</span><span class="params">(TreeNode* node)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>终止条件</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 叶子节点的高度是1，其下的空节点高度是0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>单层递归（后序遍历：左右中）</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> leftheight = <span class="built_in">getheight</span>(node-&gt;left); <span class="comment">// 左节点高度</span></span><br><span class="line"><span class="type">int</span> rightheight = <span class="built_in">getheight</span>(node-&gt;right); <span class="comment">// 右节点高度</span></span><br><span class="line"><span class="type">int</span> height = <span class="number">1</span> + <span class="built_in">max</span>(leftheight, rightheight); <span class="comment">// 中节点高度，为左右孩子的高度取最大值+1</span></span><br><span class="line"><span class="keyword">return</span> height; <span class="comment">// 根节点的高度就是二叉树的最大深度</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>本题的前序遍历写法相比于后序遍历写法要复杂很多（前序遍历还涉及到回溯的过程）。本题也可以用迭代法实现。</p>
<h3 id="559-n叉树的最大深度-1"><a href="#559-n叉树的最大深度-1" class="headerlink" title="559. n叉树的最大深度"></a>559. n叉树的最大深度</h3><p>受到代码随想录的启发，写出了递归法（类似后序遍历）的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 终止条件</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 挑选出最高的孩子节点，将其高度记为height</span></span><br><span class="line">        <span class="type">int</span> height = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; root-&gt;children.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            height = <span class="built_in">max</span>(height, <span class="built_in">maxDepth</span>(root-&gt;children[i]));</span><br><span class="line">        height ++ ; <span class="comment">// 中节点（父节点）的高度在最高的孩子节点的基础上+1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="111-二叉树的最小深度-2"><a href="#111-二叉树的最小深度-2" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h3><p>本题和二叉树的最大深度有很多细节不同，容易踩坑。最小深度：根节点到叶子节点的最小距离（根节点到最近的叶子节点的距离）。像104题一样，本题求二叉树的最小深度，也可以通过<strong>后序遍历</strong>求高度的方式来求解。<strong>二叉树的最小深度实际上就是根节点的最小高度</strong>。本题求深度，本来应该用前序遍历，但前序遍历的代码不如后序遍历简洁，因此<strong>本题依然推荐使用后序遍历</strong>。</p>
<p>误区，不能写：<code>int height = 1 + min(left, right);</code>，若根节点的左子树为空，右子树不为空，则这样写二叉树的最小深度为1，显然不对。正确的方法是取右子树的最小高度，然后+1。为处理这种情况，需要写如下的单次递归的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> left = <span class="built_in">getheight</span>(node-&gt;left);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">getheight</span>(node-&gt;right);</span><br><span class="line"><span class="comment">// 若根节点的左子树为空，右子树不为空，二叉树的最小深度为右子树的最小高度+1</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + right;</span><br><span class="line"><span class="comment">// 若根节点的左子树不为空，右子树为空，二叉树的最小深度为左子树的最小高度+1</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left != <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + left;</span><br><span class="line"><span class="comment">// 若左右子树都不为空，则取其中最小的最小高度+1返回</span></span><br><span class="line"><span class="type">int</span> res = <span class="number">1</span> + <span class="built_in">min</span>(left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure></p>
<p>本题后序遍历的完整写法如下所示：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">minDepth</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">minDepth</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左子树为空，右子树非空</span></span><br><span class="line">        <span class="comment">// 也可写作if (left == 0 &amp;&amp; right) </span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right != <span class="literal">NULL</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + right;</span><br><span class="line">        <span class="comment">// 左子树非空，右子树为空</span></span><br><span class="line">        <span class="comment">// 也可写作if (left &amp;&amp; right == 0)</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left != <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + left;</span><br><span class="line">        <span class="comment">// 左右子树都不为空</span></span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span> + <span class="built_in">min</span>(left, right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>我写出了一个精简后的版本，但并不会影响代码的可读性（依然可以轻松看出后序遍历）：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">minDepth</span>(root-&gt;left); <span class="comment">// 左</span></span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">minDepth</span>(root-&gt;right); <span class="comment">// 右</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 中</span></span><br><span class="line">        <span class="keyword">if</span> (!left &amp;&amp; right) <span class="keyword">return</span> <span class="number">1</span> + right; <span class="comment">// 左空右不空</span></span><br><span class="line">        <span class="keyword">if</span> (left &amp;&amp; !right) <span class="keyword">return</span> <span class="number">1</span> + left; <span class="comment">// 左不空右空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">min</span>(left, right); <span class="comment">// 左右都不空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="222-完全二叉树的节点个数-2"><a href="#222-完全二叉树的节点个数-2" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h3><p>普通二叉树，递归法（前中后序）和迭代法（层序遍历）都可以求二叉树的节点个数。我在初次尝试中写的两个版本的代码都是把本题中的二叉树当成了普通二叉树，而没有利用完全二叉树的特性。本题强调了完全二叉树，就是暗示我们尽量利用完全二叉树的特性。</p>
<p>在递归法（前中后序）中，后序遍历的代码是最简洁的。每个节点都遍历了一遍，时间复杂度是O(n)。接下来利用完全二叉树的特性来降低时间复杂度。完全二叉树：除了底层节点，上面的节点都是满的。底层节点从左到右依次排开。对于满二叉树，只要知道深度h，节点数目就是2^h - 1。对于完全二叉树，如果其子树是满二叉树，则可以直接用上述公式来计算，计算完左右子树的节点数再+1（根节点）即可。<strong>关键：如何判断子树为满二叉树，并求其深度</strong>。</p>
<p>对于满二叉树，一直向左遍历和一直向右遍历的深度应该是相等的。<strong>一直向左遍历和一直向右遍历的深度相等的完全二叉树的子树一定是满二叉树</strong>。<strong>若遇到子树非满二叉树的情况，则继续向下遍历</strong>（即继续遍历子树的左右子树），直到是满二叉树为止，然后不断返回并+1。这种方式利用了完全二叉树的特性，且避免了遍历没有必要的节点，时间复杂度小于O(n)。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">(TreeNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件1</span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 终止条件2：遇到子树为满二叉树的情况，则返回子树中节点的数量</span></span><br><span class="line">    TreeNode* left = node-&gt;left; <span class="comment">// 用于遍历子树的左侧</span></span><br><span class="line">    TreeNode* right = node-&gt;right; <span class="comment">// 用于遍历子树的右侧</span></span><br><span class="line">    <span class="type">int</span> leftdepth = <span class="number">0</span>, rightdepth = <span class="number">0</span>; <span class="comment">// 左侧和右侧的深度</span></span><br><span class="line">    <span class="comment">// 计算左侧的深度</span></span><br><span class="line">    <span class="keyword">while</span> (left)</span><br><span class="line">    &#123;</span><br><span class="line">        left = left-&gt;left;</span><br><span class="line">        leftdepth ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算右侧的深度</span></span><br><span class="line">    <span class="keyword">while</span> (right)</span><br><span class="line">    &#123;</span><br><span class="line">        right = right-&gt;right;</span><br><span class="line">        rightdepth ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左右侧深度相等，说明子树是满二叉树，可以利用公式快速计算子树的节点数量</span></span><br><span class="line">    <span class="keyword">if</span> (leftdepth == rightdepth) <span class="keyword">return</span> (<span class="number">2</span> &lt;&lt; leftdepth) - <span class="number">1</span>; <span class="comment">// 2 &lt;&lt; 0 = 2^1, 2 &lt;&lt; 1 = 2^2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单层递归的逻辑，后序遍历</span></span><br><span class="line">    leftnum = <span class="built_in">getNum</span>(node-&gt;left); <span class="comment">// 左子树数量</span></span><br><span class="line">    rightnum = <span class="built_in">getNum</span>(node-&gt;right); <span class="comment">// 右子树数量</span></span><br><span class="line">    <span class="type">int</span> res = leftnum + rightnum + <span class="number">1</span>; <span class="comment">// 中</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述解法不需要去遍历完全二叉树中的所有节点，而是用公式直接计算子树为满二叉树时的节点数量并返回。</p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="104-二叉树的最大深度-3"><a href="#104-二叉树的最大深度-3" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><ol>
<li>本题可以用层序遍历法求解，属于层序遍历法可以求解的10道题之一。但本题用递归（后序遍历）求解代码最为简洁。</li>
<li>注意二叉树中深度和高度这两个概念。某个节点的深度指其到根节点的距离，某个节点的高度指其到叶子节点的距离。这两个概念可以说是相反的。</li>
<li>求深度用前序遍历，求高度用后序遍历。</li>
<li>二叉树的最大深度就是根节点的高度。因此本题可以用后序遍历求解，实际上后序遍历的代码远比前序遍历的代码简单。因此本题的推荐做法就是后序遍历。</li>
<li>对于559. n叉树的最大深度。同样可以采用类似后序遍历的递归方法和层序遍历的迭代方法。对于递归方法，注意如何挑选出最高的孩子节点。</li>
</ol>
<h3 id="111-二叉树的最小深度-3"><a href="#111-二叉树的最小深度-3" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h3><ol>
<li>本题可以用迭代法（层序遍历）和递归法（前/后序遍历）求解。最推荐的方法是后序遍历，因为其代码最为简洁。</li>
<li>后序遍历是用来求高度的，但二叉树的最小深度就是根节点的最小高度，因此本题可以用后序遍历。</li>
<li>本题的易错点为：不可以直接将104题的max改成min（因为二叉树的最小深度为根节点到叶子节点的最小距离），而是要针对左右子树是否为空进行分类讨论。</li>
<li>本题的层序遍历写法同样需要注意：只有当左右孩子都为空的时候，才说明遍历到最低点了。</li>
</ol>
<h3 id="222-完全二叉树的节点个数-3"><a href="#222-完全二叉树的节点个数-3" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h3><ol>
<li>本题可以采用递归写法和迭代写法。递归写法建议采用后序遍历，迭代写法建议采用层序遍历。二者的时间复杂度都是O(n)。</li>
<li>上述方法对普通二叉树都适用，但对本题的完全二叉树，充分利用其特性可将时间复杂度进一步减小。</li>
<li>一直向左遍历和一直向右遍历的深度相等的完全二叉树的子树一定是满二叉树<strong>。</strong>若遇到子树非满二叉树的情况，则继续向下遍历，最终必然会遇到满二叉树。对于满二叉树，只要知道深度h，节点数目就是2^h - 1。因此不需要遍历完全二叉树的每一个节点，就可以求得其节点的个数。</li>
<li>上述解法的终止条件有两个，一个是遇到叶子节点，另一个是子树为满二叉树。单层递归逻辑采用后序遍历写法。</li>
<li>时间复杂度分析：递归调用的次数=树的高度=log n，每层递归需要计算子树的高度，故也是log n。因此总的时间复杂度为O(log n * log n)。</li>
<li>空间复杂度分析：递归的深度（即递归调用栈的最大深度）大约是树的高度。对于一棵平衡二叉树来说，其高度大约是log n，其中n是树中节点的数量。故空间复杂度为O(log n)。</li>
</ol>
]]></content>
      <categories>
        <category>算法（二叉树）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>二叉树</tag>
        <tag>递归解法</tag>
        <tag>层序遍历</tag>
        <tag>后序遍历</tag>
        <tag>满二叉树</tag>
        <tag>完全二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 2 | Leetcode 977, 209, 59</title>
    <url>/2024/01/25/Day-2-Leetcode-977-209-59/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p><a href="https://www.bilibili.com/video/BV1QB4y1D7ep">https://www.bilibili.com/video/BV1QB4y1D7ep</a></p>
<p><a href="https://www.bilibili.com/video/BV1tZ4y1q7XE">https://www.bilibili.com/video/BV1tZ4y1q7XE</a></p>
<p><a href="https://www.bilibili.com/video/BV1SL4y1N7mV/">https://www.bilibili.com/video/BV1SL4y1N7mV/</a></p>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p><a href="https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html">https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html</a></p>
<p><a href="https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html">https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html</a></p>
<p><a href="https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html">https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html</a></p>
<p><a href="https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80">https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80</a></p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">https://leetcode.com/problems/squares-of-a-sorted-array/</a></p>
<p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/">https://leetcode.com/problems/minimum-size-subarray-sum/</a></p>
<p><a href="https://leetcode.com/problems/spiral-matrix-ii/">https://leetcode.com/problems/spiral-matrix-ii/</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ol>
<li>cpp中sort函数的用法：sort(a.begin(), a.end())，排序后的结果就存储在a中。</li>
<li><code>vector&lt;int&gt; result(A.size(), 0);</code>的意思是创建一个长度为A.size()，数值全部为0的vector。</li>
<li><p>cpp中的问号表达式——条件运算符</p>
<p>len = sub &lt; len ? sub: len;表示若sub &lt; len，则len = sub；否则len等于len，保持不变。</p>
<p>len == INT32_MAX ? 0: len;表示若len等于INT32_MAX，则l表达式值为0，否则表达式值为len。</p>
</li>
<li><code>INT32_MAX</code>：这是一个在 C++ 中定义的常量，代表 32 位整数类型（即 <code>int</code> 类型）可以表示的最大值。</li>
<li>初始化一个二维vector，让其中的元素全部为0：<code>vector&lt;vector&lt;int&gt;&gt; res(n, vector&lt;int&gt;(n, 0));</code>，即初始化一个全部元素为0的一维数组，然后将其复制n遍。</li>
</ol>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h3><p>暴力做法，先平方，再排序。双指针做法有点思路，但由于不知道如何创建一个值为0且长度与nums相同的vector，因此不能完全正确地写出代码。</p>
<h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h3><p>滑动窗口我听yxc讲过，但是已经完全忘了，直接看视频讲解，然后看文字版讲解。</p>
<p>暴力解法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = INT32_MAX;</span><br><span class="line">        <span class="type">int</span> sub = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                s += nums[j];</span><br><span class="line">                <span class="keyword">if</span> (s &gt;= target)</span><br><span class="line">                &#123;</span><br><span class="line">                    sub = j - i + <span class="number">1</span>;</span><br><span class="line">                    len = len &lt; sub ? len: sub;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len == INT32_MAX ? <span class="number">0</span>: len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>暴力做法超时了。还是需要滑动窗口。</p>
<h3 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h3><p>yxc讲过这题，我印象中涉及到一个向量，撞墙了就拐弯，遇到自己之前走过的地方也拐弯，挺生动形象的，但我已经忘记怎么写了。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="977-有序数组的平方-1"><a href="#977-有序数组的平方-1" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h3><p>取平方后，最大的元素一定在原数组的两边。故用左右指针，从数组的两边向中间推进。需要一个新的数组来存储结果，新的数组的下标由大到小来更新。</p>
<h4 id="for-if写法"><a href="#for-if写法" class="headerlink" title="for+if写法"></a>for+if写法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建ans数组来存储答案</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于每次循环都要比较两个数的平方的大小关系，因此将最后一个数放入ans时</span></span><br><span class="line">        <span class="comment">// i和j都会等于该数的索引，因此要求i可以等于j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt;= j; )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] * nums[i] &lt;= nums[j] * nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                ans[n -- ] = nums[j] * nums[j];</span><br><span class="line">                j -- ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans[n -- ] = nums[i] * nums[i];</span><br><span class="line">                i ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="for-while写法"><a href="#for-while写法" class="headerlink" title="for + while写法"></a>for + while写法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>; l &lt;= r; )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 一定要记得加上l &lt;= r的条件</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r &amp;&amp; nums[l] * nums[l] &gt;= nums[r] * nums[r])</span><br><span class="line">            &#123;</span><br><span class="line">                res[k -- ] = nums[l] * nums[l];</span><br><span class="line">                l ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r &amp;&amp; nums[l] * nums[l] &lt; nums[r] * nums[r])</span><br><span class="line">            &#123;</span><br><span class="line">                res[k -- ] = nums[r] * nums[r];</span><br><span class="line">                r -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="while-while写法"><a href="#while-while写法" class="headerlink" title="while+while写法"></a>while+while写法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= j &amp;&amp; nums[i] * nums[i] &lt;= nums[j] * nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                ans[k -- ] = nums[j] * nums[j];</span><br><span class="line">                j -- ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (i &lt;= j &amp;&amp; nums[i] * nums[i] &gt; nums[j] * nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                ans[k -- ] = nums[i] * nums[i];</span><br><span class="line">                i ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="while-if写法"><a href="#while-if写法" class="headerlink" title="while + if写法"></a>while + if写法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[l] * nums[l] &lt;= nums[r] * nums[r])</span><br><span class="line">            &#123;</span><br><span class="line">                res[k -- ] = nums[r] * nums[r];</span><br><span class="line">                r -- ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                res[k -- ] = nums[l] * nums[l];</span><br><span class="line">                l ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="209-长度最小的子数组-1"><a href="#209-长度最小的子数组-1" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h3><p>其实核心思想也是双指针，只不过取两指针中间的集合像是一个正在滑动的窗口，因此也叫滑动窗口。用一个for循环替代暴力做法里的两个for循环。一个for循环中的循环变量j若表示滑动窗口的起始位置，则j在遍历的过程中，终止位置也需要去遍历，这与暴力做法无异。<strong>因此for循环中的循环变量j表示滑动窗口的终止位置，起始位置需要动态移动地去获得</strong>。<strong>滑动窗口的精髓在于如何移动起始位置</strong>。</p>
<p>若滑动窗口的起始位置和终止位置间的数的和&gt;=target，那么起止位置可以向后移动，即窗口可以缩小，看缩小后的窗口是否还可以符合条件。若满足条件，则可更新滑动窗口。更新滑动窗口时，需要同时更新滑动窗口的起始位置和滑动窗口中元素和的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = INT32_MAX; <span class="comment">// result</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">// i是滑动窗口的起始位置</span></span><br><span class="line">        <span class="type">int</span> sub = <span class="number">0</span>; <span class="comment">// 窗口长度</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 窗口之和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// j是滑动窗口的终止位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[j]; <span class="comment">// 将新的终止位置放到窗口的和中去</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新滑动窗口</span></span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)</span><br><span class="line">            &#123;</span><br><span class="line">                sub = j - i + <span class="number">1</span>; </span><br><span class="line">                len = len &lt; sub ? len: sub;</span><br><span class="line">                sum -= nums[i];</span><br><span class="line">                i ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len == INT32_MAX ? <span class="number">0</span>: len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="59-螺旋矩阵II-1"><a href="#59-螺旋矩阵II-1" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h3><p>不涉及算法，是道模拟题。不易写对的原因是转圈的过程中需要处理的边界条件很多。</p>
<p>边界条件：正方形的4个边界点</p>
<p>循环不变量：<br>循环——不断转圈<br>不变量——对每条边的处理规则<br>对每条边的处理规则应该不变。<strong>按照左闭右开的规则处理正方形的每一条边，每条边只处理头节点，不处理尾节点</strong>。</p>
<p>n * n的矩阵，需要转n / 2圈，若n为奇数，则中心那个值最后单独赋即可。每一圈的终止位置在上一圈的基础上-1。</p>
<p>示意图如下所示：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-01-26_06-26-17.png?raw=true" alt="Snipaste_2024-01-26_06-26-17.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">      </span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>, count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="type">int</span> loop = n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; n - offset; j ++ )</span><br><span class="line">                ans[startx][j] = count ++ ;</span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; n - offset; i ++ )</span><br><span class="line">                ans[i][j] = count ++ ;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt; starty; j -- )</span><br><span class="line">                ans[i][j] = count ++ ;</span><br><span class="line">            <span class="keyword">for</span> (; i &gt; startx; i -- )</span><br><span class="line">                ans[i][j] = count ++ ;</span><br><span class="line">          </span><br><span class="line">            startx ++ ;</span><br><span class="line">            starty ++ ;</span><br><span class="line">            offset ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) ans[n / <span class="number">2</span>][n / <span class="number">2</span>] = count;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="977易错点"><a href="#977易错点" class="headerlink" title="977易错点"></a>977易错点</h3><ol>
<li>一定要新建一个数组ans，不能在原数组的基础上修改，否则会混乱。</li>
<li>一定要注意左指针和右指针可以相等，因为最后总要处理两个元素，两个指针最终总会移到一起去。否则当两个指针指向同一个数时，该数会被落下，不会被添加到答案数组中。</li>
<li>这道题在for/while循环内用if或者while都可以，但用while的时候需要记得加上判断条件：<code>while(l &lt;= r &amp;&amp; ....)</code>，不加l &lt;= r的条件会报错：run time error。</li>
</ol>
<h3 id="209心得"><a href="#209心得" class="headerlink" title="209心得"></a>209心得</h3><p>滑动窗口方法其实脱胎于暴力做法。要特别注意遍历的是窗口的终止位置。</p>
<p>更新窗口的起始位置时，同时需要更新窗口中元素之和。</p>
<p>不要以为for里放一个while就以为是O(n^2)啊， 主要是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度至多是 2 × n 也就是O(n)。</p>
<h3 id="209易错点"><a href="#209易错点" class="headerlink" title="209易错点"></a>209易错点</h3><p>一定要记得把滑动窗口的初始位置定义在循环之外。</p>
<p>一定要记得在移动窗口初始位置的同时改变窗口中元素的sum。</p>
<h3 id="59易错点"><a href="#59易错点" class="headerlink" title="59易错点"></a>59易错点</h3><ol>
<li>注意每一条边都是左开右闭</li>
<li>注意画图理解</li>
<li>注意为n为奇数时单独给中心点赋值</li>
<li>注意如何定义一个二维所有元素为0的矩阵</li>
<li>offsetx/y和startx/y不会出现在同一个式子中</li>
</ol>
<h3 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h3><p>看代码随想录的数组总结</p>
<h2 id="数组总结"><a href="#数组总结" class="headerlink" title="数组总结"></a>数组总结</h2><p>数组题目中：整数二分一道（704）。双指针三道（27, 977, 包括滑动窗口209），双指针题目的难度是递增的，27最简单，977稍难，209最难。模拟题一道：59。</p>
<p>从方法上来说，704和59都应该采用循环不变量的原则，27、977、209则都是双指针算法的应用。</p>
<p>引用总结文章：<a href="https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80">https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80</a><br>中的一幅图片：</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93.png" alt="img"></p>
]]></content>
      <categories>
        <category>算法（数组）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>双指针算法</tag>
        <tag>总结</tag>
        <tag>滑动窗口</tag>
        <tag>螺旋矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 3 | Leetcode 203, 707, 206</title>
    <url>/2024/01/26/Day-3-Leetcode-203-707-206/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/%E9%93%BE%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">链表理论基础</a><br><a href="https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html">203.移除链表元素</a><br><a href="https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html">707.设计链表</a><br><a href="https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html">206.反转链表</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="链表理论基础"><a href="#链表理论基础" class="headerlink" title="链表理论基础"></a>链表理论基础</h3><p>链表是一种通过指针串联在一起的线性结构。每个节点等于数据域+指针域（存放指向下一个节点的指针）。最后一个节点的指针域指向null。头节点head。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194529815.png" alt="img"></p>
<p>单链表、双链表：既可以向前查询也可以向后查询。<br>循环链表：链表首尾相连（解决约瑟夫环问题）</p>
<p>链表在内存中不是连续分布的。其通过指针域的指针链接在内存中的各个节点。</p>
<p>链表的定义：<br>手写链表：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过上述构造函数初始化节点：<code>ListNode* head = new ListNode(5);</code><br>使用默认构造函数初始化节点：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">head-&gt;val = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值！</p>
<p>添加节点：见图</p>
<p>数组和链表有不同的适用场景。数组适合数据量固定，频繁查找，较少增删的场景；链表适合数据量不固定，频繁增删，较少查询的场景。</p>
<h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>结构体中定义了两个变量和三个构造函数。class Solution中的removeElements函数返回的变量类型是ListNode*，即这个函数返回一个指向ListNode对象的指针。</p>
<p>如果使用C，C++编程语言的话，不要忘了还要从内存中删除这两个移除的节点。如果移除一个节点之后，没有手动在内存中删除这个节点，leetcode依然也是可以通过的，只不过，内存使用的空间大一些而已，但建议依然要养成手动清理内存的习惯。</p>
<p>删除头节点：</p>
<ul>
<li>直接使用原来的链表来进行删除操作：头节点后移一位</li>
<li>设置一个虚拟头结点在进行删除操作：原链表的所有节点就都可以按照统一的方式进行移除了，最后<code>return dummyNode-&gt;next;</code></li>
</ul>
<h3 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h3><ul>
<li>void函数可以直接return，表示退出</li>
<li>统一使用虚拟头节点的方式，便于进行增删改的操作</li>
<li>变量名前加_表示是这个类的变量，而非局部变量，这是cpp中的一种约定俗成</li>
</ul>
<h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h3><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="203-移除链表元素-1"><a href="#203-移除链表元素-1" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h3><p>对链表题我一直有点懵，不太熟悉链表题的格式，但是对用数组模拟链表倒是挺熟悉的。我知道算法的思路大致是：先定义一个虚的头节点，然后遍历链表，删去值等于val的节点，然后返回头节点指针指向的节点，就是新的头节点，但我不知道这种代码怎么写。</p>
<h3 id="707-设计链表-1"><a href="#707-设计链表-1" class="headerlink" title="707.设计链表"></a>707.设计链表</h3><p>这题yxc也教过，但是在他那里似乎是用数组模拟链表，实现链表的各种功能，而这里是调用链表完成函数中的功能，我认为这题不难，只是多个功能需要分别实现，单个功能的代码较为简单。这道题我基本会做，但<strong>处理边界条件时要倍加注意</strong>！！</p>
<h3 id="206-反转链表-1"><a href="#206-反转链表-1" class="headerlink" title="206.反转链表"></a>206.反转链表</h3><p>yxc也讲过这个题，但我也给完全忘了</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="203-移除链表元素-2"><a href="#203-移除链表元素-2" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h3><h4 id="方法1-特判头节点"><a href="#方法1-特判头节点" class="headerlink" title="方法1: 特判头节点"></a>方法1: 特判头节点</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除头节点</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">NULL</span> &amp;&amp; head -&gt; val == val)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* tmp = head;</span><br><span class="line">            head = head -&gt; next;</span><br><span class="line">            <span class="keyword">delete</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除非头节点</span></span><br><span class="line">        ListNode* cur = head; <span class="comment">// cur存储要删去的节点的前一个节点</span></span><br><span class="line">        <span class="comment">// 要删的节点cur-&gt;next不可为空, cur != NULL是考虑空链表的情况</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span> &amp;&amp; cur -&gt; next != <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; next -&gt; val == val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* tmp = cur -&gt; next;</span><br><span class="line">                cur -&gt; next = cur -&gt; next -&gt; next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cur = cur -&gt; next; <span class="comment">// 后移一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="方法2-加入虚拟头节点"><a href="#方法2-加入虚拟头节点" class="headerlink" title="方法2: 加入虚拟头节点"></a>方法2: 加入虚拟头节点</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建虚拟头节点</span></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead -&gt; next = head;</span><br><span class="line">        <span class="comment">// 上面的两行代码：创建虚拟头节点可以简写为：</span></span><br><span class="line">        <span class="comment">// ListNode* dummyHead = new ListNode(0, head);</span></span><br><span class="line">        <span class="comment">// 或者ListNode* dummyHead = new ListNode();</span></span><br><span class="line">        <span class="comment">// dummyHead -&gt; next = head;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统一方法删去值为val的节点</span></span><br><span class="line">        <span class="comment">// 从虚拟头节点开始遍历, cur为目标节点的前一个节点</span></span><br><span class="line">        <span class="comment">// 此时因为加入了虚拟头节点，因此链表不可能为空，因此不再需要考虑链表为空的判断条件：cur != NULL</span></span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur -&gt; next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur -&gt; next -&gt; val == val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* tmp = cur -&gt; next;</span><br><span class="line">                cur -&gt; next = cur -&gt; next -&gt; next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cur = cur -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        head = dummyHead -&gt; next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以方法2为主。</p>
<h3 id="707-设计链表-2"><a href="#707-设计链表-2" class="headerlink" title="707.设计链表"></a>707.设计链表</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 记住struct的写法</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        LinkedList* next;</span><br><span class="line">        <span class="built_in">LinkedList</span>(<span class="type">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化, 带下划线的变量表示类中的变量，而非局部变量</span></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        _dummyHead = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(<span class="number">0</span>); <span class="comment">// 虚拟头节点</span></span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; ( _size - <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        LinkedList* cur = _dummyHead -&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index -- ) cur = cur -&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur -&gt; val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedList* head = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(val);</span><br><span class="line">        head -&gt; next = _dummyHead -&gt; next;</span><br><span class="line">        _dummyHead -&gt; next = head;</span><br><span class="line">        _size ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedList* tail = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(val);</span><br><span class="line"></span><br><span class="line">        LinkedList* cur = _dummyHead;</span><br><span class="line">        <span class="comment">// while循环中的条件不能是_size -- ，不然会破坏链表长度的准确性</span></span><br><span class="line">        <span class="keyword">while</span>(cur -&gt; next != <span class="literal">NULL</span>) cur = cur -&gt; next;</span><br><span class="line">        cur -&gt; next = tail;</span><br><span class="line">        _size ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; _size || index &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        LinkedList* cur = _dummyHead;</span><br><span class="line">        LinkedList* node = <span class="keyword">new</span> <span class="built_in">LinkedList</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(index -- ) cur = cur -&gt; next;</span><br><span class="line"></span><br><span class="line">        node -&gt; next = cur -&gt; next;</span><br><span class="line">        cur -&gt; next = node;</span><br><span class="line">        _size ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= _size) <span class="keyword">return</span>;</span><br><span class="line">        LinkedList* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (index -- ) cur = cur -&gt; next;</span><br><span class="line">        LinkedList* tmp = cur -&gt; next;</span><br><span class="line">        cur -&gt; next = cur -&gt; next -&gt; next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        _size -- ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LinkedList* _dummyHead;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="206-反转链表（常考）"><a href="#206-反转链表（常考）" class="headerlink" title="206.反转链表（常考）"></a>206.反转链表（常考）</h3><p>是考察对基础数据结构操作非常好的一道题目。先掌握双指针解法，再掌握递归的解法。根据双指针代码写出递归代码。</p>
<h4 id="双指针解法"><a href="#双指针解法" class="headerlink" title="双指针解法"></a>双指针解法</h4><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/%E7%BB%98%E5%9B%BE%20(1" alt="绘图 (1).png">.png?raw=true)</p>
<p>具体解法：由于不需要让翻转以后的链表的头节点为空，因此当cur指向NULL时，遍历结束。因此循环为：<code>while(cur)</code>，cur == NULL为遍历的终止条件。</p>
<p>更新cur和pre的方式：用临时节点将cur的下一个节点保存下来。否则一旦反转后cur的写一个节点就会丢失（反转后的链表的下一个节点是pre）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* tmp = cur -&gt; next;</span><br><span class="line">            cur -&gt; next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="递归解法1"><a href="#递归解法1" class="headerlink" title="递归解法1"></a>递归解法1</h4><p>按照双指针的思路写递归的代码。递归的代码更简短但更难懂。</p>
<p>具体解法：定义一个reverse函数，其中有两个参数，即<code>reverse(cur, pre)</code>。</p>
<p>在主函数中调用reverse函数，需要传入两个参数cur和pre，前者对应于双指针解法中的head，后者对应于双指针解法中的null。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 仿照双指针解法，递归函数中需要传入两个参数：cur和pre</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* cur, ListNode* pre)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 先检查递归的终止条件，同双指针解法</span></span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span> pre;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 再执行递归的步骤</span></span><br><span class="line">        <span class="comment">// 同双指针解法中tmp = cur -&gt; next, cur -&gt; next = pre, pre = cur, cur = tmp</span></span><br><span class="line">        ListNode* tmp = cur -&gt; next;</span><br><span class="line">        cur -&gt; next = pre;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(tmp, cur);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 双指针解法中初始时cur = head, pre = NULL</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(head, <span class="literal">NULL</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="递归解法2"><a href="#递归解法2" class="headerlink" title="递归解法2"></a>递归解法2</h4><p>另一种递归解法，思路和递归解法1完全不同，我认为相比于递归解法1更好理解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断终止条件是否成立</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 空链表，返回空</span></span><br><span class="line">        <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head; <span class="comment">// 递归结束，返回反转后链表的head</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行递归流程</span></span><br><span class="line">        ListNode* last = <span class="built_in">reverseList</span>(head-&gt;next); <span class="comment">// 从第二个节点开始反转链表</span></span><br><span class="line">        <span class="comment">// 将原来的头节点接到反转后链表的尾节点之后，反转后链表的尾节点是head-&gt;next</span></span><br><span class="line">        head-&gt;next-&gt;next = head; </span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 尾节点指向空</span></span><br><span class="line">        <span class="keyword">return</span> last; <span class="comment">// 返回反转后链表的头节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><ol>
<li>插入虚拟头节点dummyHead，可以避免空链表并避免对头节点操作的特判</li>
<li>创建一个当前节点cur，对整个链表进行遍历（<code>cur = cur-&gt;next</code>），而不用链表中原本存在的节点对链表进行遍历</li>
<li>NULL节点表示不存在的节点；虚拟节点实际上是存在的，其值为0，是人为创建的节点</li>
<li>递归时，需要先检查递归的终止条件，然后执行递归步骤</li>
</ol>
<h3 id="203-移除链表元素-3"><a href="#203-移除链表元素-3" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h3><ol>
<li>想要删除一个节点，需要先用tmp存下它，然后再delete删去之。</li>
<li>以后写，尽量采用方法2，即加入虚拟头节点。</li>
<li>cur -&gt; next表示的是cur节点的next变量（即指针域），而cur -&gt; val表示的是cur节点的val变量（即节点的值）。通过构造函数也可以给这两个变量直接赋值。</li>
<li>在方法1中，一定要加上判断条件<code>cur != NULL</code>，因为当链表为空时，<code>while (cur -&gt; next != NULL)</code> 这个条件将尝试访问 <code>NULL</code> 指针的 <code>next</code> 成员，这将触发未定义行为，从而导致程序报错。在方法2中，则不需要加上判断条件<code>cur != NULL</code>，因为有虚拟头节点的存在，链表不可能为空，至少有一个节点（即虚拟头节点）。当然，在方法2中加上这个判断条件也不会影响程序的正常运行。</li>
</ol>
<h3 id="707-设计链表-3"><a href="#707-设计链表-3" class="headerlink" title="707.设计链表"></a>707.设计链表</h3><ol>
<li>想清楚一个极端情况：返回第0个节点的值，是否会出现空指针异常等错误。</li>
<li>cur节点都赋值为_dummyHead</li>
<li>注意删除第n个节点时的内存释放问题</li>
<li>在第n个节点前增加或者删除一个节点，应该让cur指向第n-1个节点，cur-&gt;next指向第n个节点。</li>
<li>注意插入节点时先更新后面的边，再更新前面的边</li>
<li>只要传入参数index，就要记得对index进行判断，排除掉不需处理的情况。对get函数和deleteAtIndex函数，判断条件都是<code>index &lt; 0 || index &gt; _size - 1</code>，但对addAtIndex函数，判断条件是<code>index &lt; 0 || index &gt; _size</code>，因为<code>index = _size</code>表示将节点插入到链表的末尾。</li>
<li>别忘记_size ++ / _size — </li>
</ol>
<h3 id="206-反转链表-2"><a href="#206-反转链表-2" class="headerlink" title="206.反转链表"></a>206.反转链表</h3><h4 id="双指针解法-1"><a href="#双指针解法-1" class="headerlink" title="双指针解法"></a>双指针解法</h4><p>代码量少，思维量大！需要明确：cur和pre初始的取值；循环终止的条件；如何更新pre和cur。画图理解即可。</p>
<h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><p>递归解法1参照双指针解法写。<strong>这题推荐就用双指针解法，比较清楚明白</strong>，且空间复杂度为O(1)，优于递归解法的空间复杂度O(n)。递归解法2相比于递归解法1更好理解。</p>
]]></content>
      <categories>
        <category>算法（链表）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>双指针算法</tag>
        <tag>链表</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 4 | Leetcode 24, 19, 160, 142</title>
    <url>/2024/01/27/Day-4-Leetcode-24-19-160-142/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0024.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html">24. 两两交换链表中的节点</a><br><a href="https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html">19.删除链表的倒数第N个节点</a><br><a href="https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html">面试题 02.07. 链表相交</a><br><a href="https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html">142.环形链表II</a><br><a href="https://programmercarl.com/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93%E7%AF%87.html">链表总结篇</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h3><ol>
<li>两个链表的交点不是数值相等，而是指针相等。</li>
<li>本题在构造测试样例时，会输入两个单链表和两个单链表的交叉点，以及交叉点到两个链表头节点的距离。因此，只有指定的交叉点才是真正的交叉点，仅仅是值相等的节点并不一定是真正的交叉点。指定的交叉点被构造出来时在内存中的地址相同，而仅仅是值相等的两个节点在内存中的地址不一定相同。</li>
</ol>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h3><p>应该和交换数组中的两个元素相同。需要创建一个额外的节点tmp，然后若要交换a节点和b节点，则进行：<code>tmp = b, a = b, b = tmp</code>即可。</p>
<h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h3><p>我能想到的办法：先遍历一遍列表，返回列表有几个节点。然后再遍历一遍列表，当cur指向倒数第N个节点的前一个节点时，停止遍历链表，删除cur-&gt;next，然后返回链表的头节点即可。应该也要用到虚拟头节点，避免删除链表的第一个节点时需要特判。我按照上述思路写了代码，可以成功通过测评！！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建虚拟头节点</span></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 统计链表中的节点数量</span></span><br><span class="line">        <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            size ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将cur指向倒数第n个节点的前一个节点</span></span><br><span class="line">        ListNode* cur1 = dummyHead;</span><br><span class="line">        <span class="type">int</span> size1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (size1 &lt; size - n)</span><br><span class="line">        &#123;</span><br><span class="line">            cur1 = cur1-&gt;next;</span><br><span class="line">            size1 ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 删除倒数第n个节点，并释放其占用的内存</span></span><br><span class="line">        ListNode* tmp = cur1-&gt;next;</span><br><span class="line">        cur1-&gt;next= cur1-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>更好的办法是采用双指针算法，见实现部分。</p>
<h3 id="面试题-02-07-链表相交-1"><a href="#面试题-02-07-链表相交-1" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h3><p>我的第一想法是采用暴力解法。一个指针指向链表A的头节点，一个指针指向链表B的头节点，移动两个指针，当两个指针指向同一个节点时，说明该节点是两个链表相交的节点。据此，我写出了暴力解法的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* dummyHead2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead1-&gt;next = headA;</span><br><span class="line">        dummyHead2-&gt;next = headB;</span><br><span class="line"></span><br><span class="line">        ListNode* cur1 = dummyHead1;</span><br><span class="line">        ListNode* cur2 = dummyHead2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (cur1 = dummyHead1; cur1 != <span class="literal">NULL</span>; cur1 = cur1-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (cur2 = dummyHead2; cur2 != <span class="literal">NULL</span>; cur2 = cur2-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur1 == cur2)</span><br><span class="line">                    <span class="keyword">return</span> cur1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>暴力解法的时间复杂度是O(n^2)，应该有时间复杂度为O(n)的解法。时间复杂度更低的代码参见代码随想录。</p>
<h3 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h3><p>从没有见过这类题目，拿到题目毫无思路，直接看视频讲解和文字题解。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="24-两两交换链表中的节点-1"><a href="#24-两两交换链表中的节点-1" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h3><p>注意：是交换链表中的节点，而不仅仅交换节点的数值。偶数个节点则正好两两交换，奇数个节点则最后一个点不参与交换。一定需要dummyHead，因为要交换节点1、2，就一定要用到它们之前的那个节点，即dummyHead（dummyHead-&gt;2-&gt;1-&gt;3-&gt;…）。同理，要交换节点3、4，就一定要用到它们之前的那个节点，即节点2。<strong>因此当前指针一定要指向要反转的两个节点中的前一个节点，且当前指针每次移动两位</strong>。</p>
<p>若链表中的节点个数为奇数，则cur-&gt;next-&gt;next == NULL时循环结束，若链表中的节点个数为偶数，则cur -&gt; next == NULL时循环结束。如下图所示。故遍历结束的条件为 <code>while (cur-&gt;next != NULL &amp;&amp; cur-&gt;next-&gt;next != NULL)</code>。两个条件不可以反过来写，否则当出现空链表时，cur-&gt;next-&gt;next没有被定义，会出现空指针异常。<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/%E7%BB%98%E5%9B%BE1.png?raw=true" alt="绘图1.png"></p>
<p>接下来是两两交换节点的逻辑。改变后的链表为dummyHead-&gt;2-&gt;1-&gt;3，由于dummyHead-&gt;1改变为dummyHead-&gt;2后，原本的节点1已经不能被访问到了，因此需要先用tmp存下节点1。同理，由于要将2-&gt;3改为2-&gt;1，因此需要先用tmp1存下节点3。交换完节点的链表为：dummyHead-&gt;2-&gt;1-&gt;4-&gt;3…..。对于两两交换节点的逻辑，可以参考代码随想录教程中的三幅图片。</p>
<p><img src="https://code-thinking.cdn.bcebos.com/pics/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B93.png" alt="24.两两交换链表中的节点3"></p>
<p>交换3和4节点的步骤时：cur目前为1，我们让1指向4，4再指向3，3再指向5（如果有5的话）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 交换两个节点需要用到这两个节点前的那个节点</span></span><br><span class="line">        <span class="comment">// 因此定义虚拟头节点，用于交换节点1和节点2</span></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="comment">// 搞清楚遍历的终止条件，参见笔记的图示</span></span><br><span class="line">        <span class="comment">// 以下两个终止条件分别针对节点数目为偶数和奇数的情况</span></span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// dummyHead-&gt;2时，dummyHead-&gt;1不再存在，无法访问到1，因此需要事先存储节点1</span></span><br><span class="line">            ListNode* tmp = cur-&gt;next;</span><br><span class="line">            <span class="comment">// 同理，2-&gt;1时，2-&gt;3不再存在，无法访问到3，因此需要事先存储节点3</span></span><br><span class="line">            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// dummyHead-&gt;2-&gt;1-&gt;3</span></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next; <span class="comment">// dummyHead-&gt;1变为dummyHead-&gt;2</span></span><br><span class="line">            cur-&gt;next-&gt;next = tmp; <span class="comment">// dummyHead-&gt;2-&gt;3变成dummyHead-&gt;2-&gt;1</span></span><br><span class="line">            tmp-&gt;next = tmp1; <span class="comment">//dummyHead-&gt;2-&gt;1再在末尾接上3</span></span><br><span class="line"></span><br><span class="line">            cur = cur-&gt;next-&gt;next; <span class="comment">// cur指针后移两位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="19-删除链表的倒数第N个节点-1"><a href="#19-删除链表的倒数第N个节点-1" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h3><p>看了代码随想录的思路之后，我独立写出了快慢指针解法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 快慢指针</span></span><br><span class="line">        ListNode* fast = dummyHead;</span><br><span class="line">        ListNode* slow = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fast先向后移动n位</span></span><br><span class="line">        <span class="keyword">while</span> (n -- ) fast = fast-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fast移动到链表的最后一个节点（非空节点），此时slow移动到链表的倒数第n个节点前面的那个节点</span></span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除倒数第n个节点</span></span><br><span class="line">        ListNode* tmp = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也可以让fast先向后移动(n + 1)位，然后让fast和slow同时移动，直到fast移动到NULL为止，此时slow指向的也是倒数第n个节点的前一个节点。对这种办法，可以在移动fast指针前先让n ++ , 也可以在第一个while循环后让fast指针多向后移动一位。<strong>最稳妥的写法</strong>如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        ListNode* fast = dummyHead;</span><br><span class="line">        ListNode* slow = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先将快指针移动n + 1步</span></span><br><span class="line">        n ++ ;</span><br><span class="line">        <span class="keyword">while</span> (n -- &amp;&amp; fast != <span class="literal">NULL</span>) fast = fast-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 快慢指针同时移动，直到快指针指向NULL。此时慢指针指向要删除的节点前面那个节点</span></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放内存并删除倒数第n个节点</span></span><br><span class="line">        ListNode* tmp = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于题目有如下限制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The number of nodes in the list is sz.</span><br><span class="line">1 &lt;= sz &lt;= 30</span><br><span class="line">0 &lt;= Node.val &lt;= 100</span><br><span class="line">1 &lt;= n &lt;= sz</span><br></pre></td></tr></table></figure>
<p>因此即使不加上fast != NULL，也可以通过，但如果题目没有n &lt;= sz的限制，那么必须加上fast != NULL，且不能使用以下写法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (n -- &amp;&amp; fast != <span class="literal">NULL</span>) fast = fast-&gt;next;</span><br><span class="line">fast = fast-&gt;next;</span><br></pre></td></tr></table></figure>
<p>因为若采用以上写法，当n &gt; sz时，当while循环结束后，fast已经指向了NULL，此时再做fast = fast-&gt;next操作，会导致空指针异常。</p>
<h3 id="面试题-02-07-链表相交-2"><a href="#面试题-02-07-链表相交-2" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h3><p>代码随想录的思路：求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB末尾对齐的位置。此时我们就可以比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA == curB，则找到交点。否则循环退出返回空指针。</p>
<p>看了代码随想录的思路后，我独立写出了代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sizea = <span class="number">0</span>, sizeb = <span class="number">0</span>;</span><br><span class="line">        ListNode* cura = headA;</span><br><span class="line">        ListNode* curb = headB;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算a链表的长度</span></span><br><span class="line">        <span class="keyword">while</span> (cura != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cura = cura-&gt;next;</span><br><span class="line">            sizea ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算b链表的长度</span></span><br><span class="line">        <span class="keyword">while</span> (curb != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curb = curb-&gt;next;</span><br><span class="line">            sizeb ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cura = headA, curb = headB;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> delta = <span class="built_in">abs</span>(sizea - sizeb); <span class="comment">// 两链表长度的差值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sizea &gt;= sizeb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (delta -- ) cura = cura-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (sizeb -- )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cura == curb) <span class="keyword">return</span> cura;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cura = cura-&gt;next;</span><br><span class="line">                    curb = curb-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (delta -- ) curb = curb-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (sizea -- )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cura == curb) <span class="keyword">return</span> cura;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cura = cura-&gt;next;</span><br><span class="line">                    curb = curb-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里特别需要注意的是，在计算完a链表和b链表的长度后，需要让 <code>cura = headA, curb = headB</code>。</p>
<p>代码随想录的写法更见简洁：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* cura = headA, * curb = headB;</span><br><span class="line">        <span class="type">int</span> sizea = <span class="number">0</span>, sizeb = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算a链表和b链表的长度</span></span><br><span class="line">        <span class="keyword">while</span> (cura != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cura = cura-&gt;next;</span><br><span class="line">            sizea ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (curb != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curb = curb-&gt;next;</span><br><span class="line">            sizeb ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 始终保证链表a的长度大于等于链表b的长度</span></span><br><span class="line">        <span class="keyword">if</span> (sizea &lt; sizeb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(sizea, sizeb);</span><br><span class="line">            <span class="built_in">swap</span>(headA, headB);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 交换cura和curb后，再恢复cura和curb的指向</span></span><br><span class="line">        <span class="comment">// 也可以在上面直接swap(cura, curb)，那这句话就可以写到if判断的前面去</span></span><br><span class="line">        cura = headA, curb = headB;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 计算两链表的长度之差</span></span><br><span class="line">        <span class="type">int</span> delta = sizea - sizeb;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移动指向链表a的指针，让链表a和b的尾部对齐</span></span><br><span class="line">        <span class="keyword">while</span> (delta -- ) cura = cura-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cura != <span class="literal">NULL</span>) <span class="comment">// 写作while (sizeb -- )也可</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cura == curb) <span class="keyword">return</span> cura;</span><br><span class="line">            cura = cura-&gt;next;</span><br><span class="line">            curb = curb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="142-环形链表II-1"><a href="#142-环形链表II-1" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h3><p>有两问：</p>
<ol>
<li><p>判断链表中是否有环</p>
<p>用快慢指针来判断是否有环。若链表是一条直线，则快慢指针永远不会相遇。只有当链表中有环存在时，快指针先进入了环且在环中浪费了时间，快慢指针才会相遇。快指针从头节点开始，每次移动两位，慢指针也从头节点开始，每次移动一位，二者若相遇则一定在环里相遇，相遇则说明有环。快指针是一个节点一个节点的靠近慢指针，因此二者一定会在环中相遇。</p>
</li>
<li><p>找到环的入口</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220925103433.png" alt="img"></p>
<p>列方程即可解出x：<code>x = n (y + z) - y, (n &gt;= 1)</code>，由于看不出x和负数-y之间的关系，我们让出一圈，看x和z的关系：<code>x = (n - 1) (y + z) + z, (n &gt;= 1)</code>。这就意味着：<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是环形入口的节点</strong>。</p>
<p>为什么第一次在环中相遇，slow的步数是x+y而不是 x + 若干环的长度 + y 呢？”这个问题，可以这样解释，设快指针每秒移动2格，慢指针每秒移动1格，圆的周长是k。则慢指针走一圈需要的时间是k，设两指针之间的距离为m(m &lt; k)，则快指针追上慢指针的时间是m（快指针相对于满指针每秒移动1格），此时慢指针走过的距离是m，由于m &lt; k，因此慢指针在遇到快指针之前走过的距离小于圆的周长。</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head, * slow = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面两个循环条件保证了fast指针可以指向NULL，但不能指向NULL的next，这样就不会导致空指针异常</span></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next; <span class="comment">// 快指针每次移动两位</span></span><br><span class="line">            slow = slow-&gt;next; <span class="comment">// 慢指针每次移动一位</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 快慢指针相遇，说明链表中有环</span></span><br><span class="line">            <span class="keyword">if</span> (fast == slow)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 一指针从相遇处开始移动，一指针从head处开始移动，二者相遇的位置就是环的入口，数学推导见笔记</span></span><br><span class="line">                ListNode* index1 = fast, * index2 = head;</span><br><span class="line">                <span class="keyword">while</span> (index1 != index2)</span><br><span class="line">                &#123;</span><br><span class="line">                    index1 = index1-&gt;next;</span><br><span class="line">                    index2 = index2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 若没有返回环的入口节点，则说明没有环，返回空指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我自研的另一种写法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head, * slow = head;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 判断链表中是否有环</span></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 有环，则返回环的起点，无环，则返回空指针</span></span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; fast == slow)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* index1 = head, * index2 = slow;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(index1 != index2)</span><br><span class="line">            &#123;</span><br><span class="line">                index1 = index1-&gt;next;</span><br><span class="line">                index2 = index2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> index1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意，一定要通过flag判断，只有当fast和slow相等且二者都在第一个while循环中转过时，才能确保链表中有环，若fast和slow相等，则可能是链表中只有一个节点的情况，此时fast和slow都没有在第一个循环中转过，因此二者相等且都等于head。</p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="24-两两交换链表中的节点-2"><a href="#24-两两交换链表中的节点-2" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h3><ol>
<li>注意cur应该指向哪里。</li>
<li>注意遍历的终止条件（奇数/偶数个节点）</li>
<li>若原先的两节点之间的连接被断开，则需要在断开前保存两节点中后面那个节点，否则后面的那个节点无法被访问到</li>
</ol>
<h3 id="面试题-02-07-链表相交-3"><a href="#面试题-02-07-链表相交-3" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h3><ol>
<li>本题的关键思路在于：<strong>对齐两个链表的尾部</strong>。本题的算法实际上也是（快慢）双指针算法。</li>
<li>比较链表中的两个节点是否相同，直接用 <code>cura == curb</code>即可，不能用 <code>cura-&gt;val == curb-&gt;val &amp;&amp; cura-&gt;next == curb-&gt;next</code>，因为比较两个节点除去比较val和next这两个参数外，还需要比较其本身的内存地址。</li>
<li>本题的时间复杂度分析：<br>计算两个链表的长度：O(n) + O(m)<br>调整指针以对齐两个链表：O(n - m)或O(m - n)<br>同时遍历两个链表寻找交点：O(min(n, m))<br>第一步和第三步的时间复杂度加在一起是 <code>O(n) + O(m) + O(min(n, m))</code>。但是，因为 <code>O(min(n, m))</code>在 <code>O(n) + O(m)</code>中已经被包含（总是小于或等于 <code>n</code>和 <code>m</code>），所以总的时间复杂度简化为 <code>O(n) + O(m)</code>。第二步（调整指针以对齐两个链表）的时间复杂度实际上也包含在 <code>O(n) + O(m)</code>中，因为无论是 <code>n - m</code>还是 <code>m - n</code>，它的值总是小于或等于 <code>n</code>和 <code>m</code>。因此，整个函数的总时间复杂度为 <code>O(n + m)</code>，这里 <code>n</code>和 <code>m</code>分别是两个链表的长度。这个时间复杂度已经涵盖了所有的主要操作，包括计算长度、对齐链表和寻找交点。<strong>时间复杂度的计算应当关注主要操作，省略次要操作</strong>。</li>
<li>在leetcode中调用swap，abs等函数时，不需要自行引用头文件，基本的函数和数据结构（STL）已经默认被引用了，因此直接写出来即可。</li>
</ol>
<h3 id="142-环形链表II-2"><a href="#142-环形链表II-2" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h3><ol>
<li>记住使用快慢双指针算法，有环的情况下快慢指针必然会相遇。</li>
<li>画图理解如何求环的起点的index。</li>
<li><strong>记得复习时着重看这道题</strong></li>
</ol>
<h2 id="总结：链表"><a href="#总结：链表" class="headerlink" title="总结：链表"></a>总结：链表</h2><ol>
<li>插入虚拟头节点dummyHead，可以避免空链表并避免对头节点操作的特判</li>
<li>创建一个当前节点cur，对整个链表进行遍历（<code>cur = cur-&gt;next</code>），而不用链表中原本存在的节点对链表进行遍历</li>
<li>NULL节点表示不存在的节点；虚拟节点实际上是存在的，其值为0，是人为创建的节点</li>
<li>递归时，需要先检查递归的终止条件，然后执行递归步骤</li>
<li>想要删除哪个节点，就用cur指针指向其前面的那个节点</li>
<li><strong>链表中最常用的算法是双指针算法</strong>，在206.反转链表，19.删除链表的倒数第N个节点，面试题 02.07. 链表相交，142.环形链表II中都用到了，其他题目基本不需要算法，利用链表的一些基本性质进行增删改查即可。</li>
<li><strong>记得复习142.环形链表II和24.两两交换链表中的节点</strong>，前者是链表中最独特也最难的一道题，难在数学推导和想清楚细节；后者在退出循环的条件和用tmp保存节点方面需要特别注意。</li>
</ol>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93.png" alt="img"></p>
]]></content>
      <categories>
        <category>算法（链表）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>双指针算法</tag>
        <tag>总结</tag>
        <tag>环形链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 7 | Leetcode 454, 383, 15, 18</title>
    <url>/2024/01/31/Day-7-Leetcode-454-383-15-18/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html">454.四数相加II</a><br><a href="https://programmercarl.com/0383.%E8%B5%8E%E9%87%91%E4%BF%A1.html">383. 赎金信</a><br><a href="https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html">15. 三数之和</a><br><a href="https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html">18. 四数之和</a><br><a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93.html">哈希表总结篇</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h3><p>cpp中的map中的value是支持++操作的，且value可以通过key直接索引到，就像普通的数组那样。</p>
<h3 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h3><ol>
<li><p>不仅对vector可以用范围遍历，对string类型的变量和普通的数组也可以用范围遍历的写法来简化代码。似乎范围遍历的速度要稍快于普通的for循环遍历。</p>
</li>
<li><p>cpp中，可以用erase函数来删除string类型变量的第j个字符，有两种写法：<br><code>string.erase(j, 1);</code><br><code>string.erase(s.begin() + j);</code></p>
</li>
<li><p>cpp中，如果想使用变量类型来给变量命名，需要使用std，有如下例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::set&lt;<span class="type">int</span>&gt; set; <span class="comment">// 使用 &quot;set&quot; 作为变量名</span></span><br><span class="line">    set.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    set.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>set</code>是作为<code>std::set&lt;int&gt;</code>类型的变量名使用的。由于<code>std::set</code>是在<code>std</code>命名空间中定义的，而变量<code>set</code>是在局部作用域中定义的，所以编译器能够区分这两者。</p>
</li>
</ol>
<h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><ol>
<li>将四数之和由int类型转换为long类型：<code>(long) nums[i] + nums[j] + nums[l] + nums[r] &gt; target</code></li>
</ol>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="454-四数相加II-1"><a href="#454-四数相加II-1" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h3><p>这道题肯定是要用map做哈希的，且map的key用来存储元素的值，map的value用来存储元素的索引。此题和两数之和为target有较多的相同点，但也有些不同。若四个数相加为0，则其中的数两两互为相反数。但这种想法是不对的，可以存在2, 4, -3, -3的情况。对这题的算法我暂时想不出来什么好主意。</p>
<h3 id="383-赎金信-1"><a href="#383-赎金信-1" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h3><p>看着就是242.有效的字母异位词的变式，若前面那个字符串可以由后面那个字符串中的字母构成，则返回true，否则返回false。本质就是看后面的字符串是否包含前面的字符串。因为两个字符串都只是由小写字母构成，因此用数组做哈希足矣。根据这个思路，我写出了如下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 本题的本质是判断后面的字符串是否包含前面的字符串，即后面的字符串中出现的所有字符是否在前面的字符串中出现过</span></span><br><span class="line">        <span class="type">int</span> N[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ransomNote.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            N[ransomNote[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; magazine.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            N[magazine[i] - <span class="string">&#x27;a&#x27;</span>] -- ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 数组N中有元素大于0，说明ransomNote中出现了magazine中未出现的字母</span></span><br><span class="line">        <span class="comment">// 说明前者不能完全由后者组成，返回false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (N[i] &gt; <span class="number">0</span>) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>采用范围遍历的方法，可以把上述代码写得更简洁：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ransomNote &lt; magazine return true</span></span><br><span class="line">        <span class="comment">// else return false</span></span><br><span class="line">        <span class="type">int</span> N[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> r: ransomNote)</span><br><span class="line">            N[r - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> m: magazine)</span><br><span class="line">            N[m - <span class="string">&#x27;a&#x27;</span>] -- ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: N)</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h3><p>这道题的题目我都不太理解，什么叫答案中不可以包含重复的三元组。直到我看到了示例1，明白了这个意思是可能存在情况：两个三元组，它们的索引组成的三元组可能不同，但这两个三元组本身的数值是完全相同的（忽略顺序），此时这两个三元组只能算作一个。这道题应该可以用哈希法，但需要去重。本题我认为有三个难点：</p>
<ul>
<li>枚举完一个数，怎么去寻找另外两个数</li>
<li>用什么数据结构维护另外两个数</li>
<li>如何去重</li>
</ul>
<h3 id="18-四数之和-1"><a href="#18-四数之和-1" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><p>本题应该依然是双指针算法。但需要注意去重的操作。我的思路是先对数组进行排序，然后让<code>a = i, b = i + 1, c = i + 2, d = nums.size() - 1</code>。然后一边向后移动a, b和c，一边对a,b和c去重，一边向前移动d，一边对d去重。根据以上思路，我写下了以下的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; target) <span class="keyword">return</span> res;</span><br><span class="line">            <span class="comment">// 对i去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 对j去重</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left = j + <span class="number">1</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[j] + nums[left] + nums[right] &gt; target) right -- ;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[j] + nums[left] + nums[right] &lt; target) left ++ ;</span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                    &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[left], nums[right]&#125;);</span><br><span class="line">                        <span class="comment">// 对left和right进行去重</span></span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left ++ ;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right -- ;</span><br><span class="line">                        left ++ ;</span><br><span class="line">                        right -- ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以上代码测试样例通过了229 / 294，可见思路是对的，但细节仍不完美。我将在实现部分进一步优化细节。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="454-四数相加II-2"><a href="#454-四数相加II-2" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h3><p>四数相加和四数之和题目看起来相似，但前者是哈希表中的经典题目，后者用哈希表的方法不太合适。其实只需要知道有多少对四数之和为0，不需要知道每一对的具体数值。</p>
<p><strong>本题不需要去重</strong>，因此相对简单，四数之和则需要考虑去重。举例：四个数组，每个数组中都有n个0，则返回的结果是n。</p>
<p><strong>思路</strong>：遍历数组A和B，将从这两个数组取出的元素a + b放入map中；再遍历数组C和D，求得c + d，再判断map中有无我们想要的元素-(c + d)，有则count += -(c+d)出现过的次数（即map中key为-(c+d)的元素的value）。</p>
<p>本题的数据范围很大，因此用数组来做哈希不可取，只能考虑set/map。<strong>因为不仅需要将a + b放入哈希结构中，还需要统计a + b出现过多少次，因此用map</strong>。用map的key存a + b的值，用map的value存a + b出现的次数。</p>
<p>时间复杂度：<code>O(n^2) + O(n^2)</code>，还是<code>O(n^2)</code>。如果先遍历一个数组，再遍历三个数组，则时间复杂度是O(n^3)。</p>
<p>我知道上述思路后，尝试写代码，出现一个问题：不知道如何统计数组A和数组B中各取一个元素求和后的值出现的次数。我把简单的问题想复杂了，map中的value是支持++操作的，且value可以通过key索引到，因此直接：<code>map[num1 + num2] ++ ;</code>即可，这个代码的意思是：若<code>num1 + num2</code>的值出现过，则其<code>value += 1</code>；若没出现过，则相当于：<code>map.insert(&#123;num1 + num2, 1&#125;)</code>。写出了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 遍历nums1和nums2数组，将两个数组各取一个值的和作为key，和出现的次数作为value存入map中</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; sum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num1: nums1)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num2: nums2)</span><br><span class="line">                sum[num1 + num2] ++ ; <span class="comment">// 和为num1 + num2的值的出现次数 + 1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历nums3和nums4数组，设两个数组各取一个值的和是c + d</span></span><br><span class="line">        <span class="comment">// 若map中出现了-(c + d)，则count += value</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num3: nums3)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num4: nums4)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> s = num3 + num4;</span><br><span class="line">                <span class="keyword">auto</span> it = sum.<span class="built_in">find</span>(-s);</span><br><span class="line">                <span class="keyword">if</span> (it != sum.<span class="built_in">end</span>())</span><br><span class="line">                    count += it-&gt;second; <span class="comment">// it-&gt;second也可以写作sum[-s]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>更简洁的写法：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num1: nums1)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num2: nums2)</span><br><span class="line">                map[num1 + num2] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num3: nums3)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num4: nums4)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> target = -(num3 + num4);</span><br><span class="line">                <span class="keyword">if</span> (map.<span class="built_in">find</span>(target) != map.<span class="built_in">end</span>())</span><br><span class="line">                    count += map[target];</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="383-赎金信-2"><a href="#383-赎金信-2" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h3><p>注意，本题的题干中虽然强调了<code>Each letter in magazine can only be used once in ransomNote</code>，但这个条件在写代码时实际上并不需要考虑。这应该只是生成测试样例时需要遵守的规则。</p>
<p>本题用暴力做法也可以过，但暴力做法的代码写起来似乎还更麻烦一点。暴力做法就是两重for循环，若ransomNote中出现了magazine中出现过的字符，则从ransomNote中移除该字符，最后判断ransomNote的长度是否为0即可。暴力做法的代码可以参见代码随想录。</p>
<p>至于时间复杂度为O(n)的哈希解法，我在初次尝试中写的就已经很完美了。若想进一步优化，可以加上判断：若ransomNote的长度大于magazine的长度，则可以直接return false。若在遍历字符串时就对数组中元素的正负进行判断，那需要注意：只能在ransomNote中对数组中元素的正负进行判断，为负则说明赎金信中有magazine中没有的字符。若在magazine中对数组中元素的正负进行判断，可能存在问题：数组中的元素为正不一定代表赎金信中有magazine中没有的字符，可能仅仅是因为尚未遍历完成，数组中的元素还没被减到负数。因此，下面的代码是错误的：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> N[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ransomNote.<span class="built_in">size</span>() &gt; magazine.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> r: ransomNote)</span><br><span class="line">            N[r - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> m: magazine)</span><br><span class="line">        &#123;</span><br><span class="line">            N[m - <span class="string">&#x27;a&#x27;</span>] -- ;</span><br><span class="line">            <span class="keyword">if</span> (N[m - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>可以通过测试样例轻而易举地看出上述解法的漏洞，比如<br>ransomNote =”aa”<br>magazine =”aab”<br>Output false<br>Expected true<br>而代码随想录上的哈希解法的代码是正确的。</p>
<p>若想避免上述问题，最直接的办法就是等到N数组中的元素全部计算完成后，另开一个循环来判断其中是否有为正的元素。</p>
<h3 id="15-三数之和-1"><a href="#15-三数之和-1" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h3><p>本题可以用哈希法做，但比较复杂。本题需要返回的三元组，其中的元素是数组中元素的值，而非下标。<strong>注意：三元组是去重的。本题相较于两数之和的难点就在于去重</strong>。</p>
<p>哈希法的大致思路：用两重for循环，第一重确定a，第二重确定b，然后看-(a + b)是否在map中出现过。但这里的难点在于：需要同时对a, b和c（-a - b）去重。去重的细节太多了，基本上都会遇到小问题，难以一次想周全。<strong>因此推荐使用更易于理解的双指针法</strong>。</p>
<p>双指针法的思路：<strong>使用双指针法之前需要对数组进行排序</strong>。for循环遍历数组，得到a；left指针从数组的第2个位置开始向后移动，得到b；right指针从数组的最后一个位置开始向前移动，得到c。若<code>num[i] + num[left] + num[right] &gt; 0</code>，说明三数之和大了，i是固定的（for循环从头开始遍历），因此应当让<code>right --</code>。若<code>num[i] + num[left] + num[right] &lt; 0</code>，说明三数之和小了，应该让其变大，则应当让<code>left ++</code>。若三数之和为0，则将三者放入二维数组res中。注意细节：去重。num[i], num[left], num[right]三个数都需要去重，因为res中不能有重复的三元组。</p>
<p>伪代码：（注：<code>a = num[i], b = num[left], c = num[right]</code>）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res; <span class="comment">// 存储结果</span></span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 排序后，若最小值仍大于0，说明不存在三数之和等于0的情况，返回现有的res即可</span></span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> res; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// nums[i]即a，需要对a去重</span></span><br><span class="line">    <span class="comment">// 三元组之间不可重复，但三元组内部可以有重复的数字，比如000</span></span><br><span class="line">    <span class="comment">// 去重是nums[i] == nums[i + 1] continue还是nums[i] == nums[i - 1] continue</span></span><br><span class="line">    <span class="comment">// 应该是后者。若是前者，由于left指针指向nums[i + 1]，因此若b和a相同，则会跳过这个结果集，这显然是错误的</span></span><br><span class="line">    <span class="comment">// 因为三元组内部是可以有重复的数字的</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 当前三元组的a和上一个三元组的a重复，则进入下一个循环</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> left = i + <span class="number">1</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 求三个数，因此是left &gt; right。若left = right，则三个数变为了两个数</span></span><br><span class="line">    <span class="keyword">while</span> (right &gt; left)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>) right -- ;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>) left ++ ;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;nums[i], nums[left], nums[right]&#125;); <span class="comment">// 三者之和等于0.则放入结果数组中，收获结果</span></span><br><span class="line">            <span class="comment">// 去重</span></span><br><span class="line">        		<span class="keyword">while</span> (right &gt; left &amp;&amp; right[i] == right[i - <span class="number">1</span>]) right -- ; <span class="comment">// 对c去重</span></span><br><span class="line">        		<span class="keyword">while</span> (right &gt; left &amp;&amp; left[i] == left[i + <span class="number">1</span>]) left ++  ; <span class="comment">// 对b去重</span></span><br><span class="line">            <span class="comment">// 收获一个结果后，left和right都向着数组的中间位置移动</span></span><br><span class="line">            left ++ ;</span><br><span class="line">            right -- ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>
<p>细节：</p>
<ul>
<li><p>如何对a去重：<code>if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;</code></p>
</li>
<li><p>如何对b和c去重：</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (right &gt; left &amp;&amp; right[i] == right[i - <span class="number">1</span>]) right -- ; <span class="comment">// 对c去重</span></span><br><span class="line"><span class="keyword">while</span> (right &gt; left &amp;&amp; left[i] == left[i + <span class="number">1</span>]) left ++  ; <span class="comment">// 对b去重</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对b和c去重的代码放在哪里<br> 必须先收获结果，再去重。否则若出现数组中全是0的情况，就会一直运行去重的逻辑，而不收获结果。</p>
</li>
</ul>
<p>根据上述伪代码，我独立写出了本题的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 用双指针算法前需要先排序</span></span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res; <span class="comment">// 二维数组，存放结果</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 三元组&#123;a, b, c&#125;，i指向a, left指向b, right指向c</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 若最小的a都大于0，则三数之和不可能等于0，不需要继续循环，返回现有的res即可</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> res; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对a去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>) right -- ;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>) left ++ ;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i], nums[left], nums[right]&#125;); <span class="comment">// 收获结果</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 对b和c去重</span></span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left ++ ;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right -- ;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 移动left和right指针</span></span><br><span class="line">                    left ++ ;</span><br><span class="line">                    right -- ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="18-四数之和-2"><a href="#18-四数之和-2" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><p>和三数之和思路相同，但多一重for循环。共有i, j, left, right四个指针，前三者初始时分别指向数组的前三个元素，right指向数组最后一个元素。left和right向中心靠拢，使得<code>nums[i] + nums[j] + nums[left] + nums[right] = target</code>。</p>
<p>细节：剪枝和去重。</p>
<ul>
<li>一级剪枝：不能延续三数之和的剪枝操作：<code>if(nums[i] &gt; target) return res;</code>。这没有考虑到数组中可能有负数的情况，若数组中有负数，几个元素相加是越加越小的，因此即使最小的数大于target，通过加上一些负数，四数之和依然可能为target。正确的剪枝操作应该为：<code>if (nums[i] &gt; target &amp;&amp; nums[i] &gt; 0 &amp;&amp; target &gt; 0) break;</code>。其实这里写break（即最后返回）和写return res都是可以的，并不会影响运行结果。</li>
<li>二级剪枝：<code>if (nums[i] + nums[j] &gt; target &amp;&amp; nums[i] + nums[j] &gt; 0 &amp;&amp; target &gt; 0) break;</code><strong>二级剪枝完成后只能写break，写return res会有几个测试样例无法通过</strong>。原因：一级剪枝条件时直接return res，相当于结束所有循环，返回结果，不会漏掉部分四元组；二级剪枝时直接return res，同样相当于结束所有循环，返回结果，此时就会漏掉部分四元组。<strong>正确的做法应该是结束第二重循环，继续进行第一重循环</strong>。</li>
</ul>
<p>其实还有一个细节需要注意，在求四数之和<code>nums[i] + nums[j] + nums[left] + nums[right]</code>时，若四个数都是10亿，加起来就会超过int的限制（大约21亿），因此需要把四数之和转化为<code>long</code>类型：<code>(long) nums[i] + nums[j] + nums[l] + nums[r] &gt; target</code>。如果不将int转换为long，会报错：整数溢出，同时有几个测试样例无法通过。代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a = i, b = j(i + 1), c = l(i + 2), d = r(nums.size() - 1)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; target &amp;&amp; target &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> res; <span class="comment">// 一级剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 一级去重</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] &gt; target &amp;&amp; target &gt; <span class="number">0</span> &amp;&amp; nums[i] + nums[j] &gt; <span class="number">0</span>) <span class="keyword">return</span> res; <span class="comment">// 二级剪枝</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 二级去重</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> l = j + <span class="number">1</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[l] + nums[r] &gt; target) r -- ;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">long</span>) nums[i] + nums[j] + nums[l] + nums[r] &lt; target) l ++ ;</span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                    &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[l], nums[r]&#125;);</span><br><span class="line">                        <span class="comment">// 对l和r去重</span></span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]) l ++ ;</span><br><span class="line">                        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) r -- ;</span><br><span class="line">                        l ++ ;</span><br><span class="line">                        r -- ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="454-四数相加II-3"><a href="#454-四数相加II-3" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h3><ol>
<li><p>本题的大体思路？<br>遍历前两个数组A和B，将a + b的值存入map<br>再遍历后两个数组C和D，在map中查找-(c + d)的值</p>
</li>
<li><p>为什么选择map做哈希？<br>因为不仅需要存储a + b的值，还需要存储这个值出现的次数(<code>map[a + b] ++</code>)，用于在4中统计元组的个数</p>
</li>
<li><p>map中的key放什么？value放什么？<br>map中的key放a + b的值，map中的value放这个值出现的次数</p>
</li>
<li><p>如何统计元组的个数？<br><code>count += map[-(c + d)]</code></p>
</li>
<li><p>如何统计a和b的和出现的次数？<br><code>map[a + b] ++</code></p>
</li>
</ol>
<h3 id="383-赎金信-3"><a href="#383-赎金信-3" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h3><p>代码随想录上的哈希解法不如我在初次尝试部分写的哈希解法简洁，而且代码随想录的哈希解法在颠倒遍历两个字符串的顺序时容易出错。<strong>本题的最佳解法是我在初次尝试部分写的第二个版本的代码</strong>。</p>
<h3 id="15-三数之和-2"><a href="#15-三数之和-2" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h3><ol>
<li>采用双指针法，不要用哈希法，哈希法写起来复杂，去重麻烦、难以做剪枝操作，故效率显著低于双指针法</li>
<li>双指针法思路简单，但要注意去重的细节</li>
<li>排序的目的是方便剪枝，且一个三元组只会有唯一的顺序</li>
<li><strong>双指针法只适用于返回的结果是数而不是索引的题目</strong>，因为双指针法使用前必须对数组进行排序，排序后索引会被打乱，因此返回的结果不能是索引。若两数之和要求返回的结果是数，那么也可以用双指针算法。这不禁让我思考，若本题要求返回的结果是索引，那么也只能用哈希法。但如果要求返回的结果是索引，那么就不需要有复杂的去重操作，因此实际上是简化了本题。</li>
<li>对于<code>nums[i]</code>（即a）去重的代码，可以用if判断写：<code>if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;</code>，也可以用while循环写：<code>while (i &lt; nums.size() &amp;&amp; i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) i ++ ;</code>。一般在写while循环时，都需要加上<strong>对数组索引不可越界的限制</strong>：<code>i &lt; nums.size()</code>。如果出现报错：<code>Runtime Error: AddressSanitizer</code>，大概率是因为数组索引越界了，此时需要检查是否加上了限制条件<code>i &lt; nums.size()</code>和<code>i &gt; 0</code>。</li>
</ol>
<h3 id="18-四数之和-3"><a href="#18-四数之和-3" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><ol>
<li>本题思路和三数之和相同，但需要注意剪枝的细节</li>
<li>还需要注意在求四数之和时将int类型转换为long类型，避免整数溢出。</li>
<li>若采用双指针算法，三数之和的时间复杂度是<code>O(n^2)</code>，四数之和的时间复杂度是<code>O(n^3)</code>。用暴力做法的时间复杂度则分别为<code>O(n^3)</code>和<code>O(n^4)</code>。</li>
<li>本题相比于四数相加，由于要考虑去重问题，所以更加复杂，因此无法（不推荐）使用哈希法，推荐使用双指针算法。</li>
<li>剪枝方面可以做进一步的优化，但属实没有必要。</li>
<li>本题写剪枝统一用break，不要用return res，以免方式意外的错误</li>
<li>本题如果有几个测试样例总是过不了，可以直接删去剪枝的代码，一般就可以通过了。剪枝是优化，即使不加，依然可以轻松通过。剪枝部分是易错点。</li>
</ol>
<h2 id="哈希表总结"><a href="#哈希表总结" class="headerlink" title="哈希表总结"></a>哈希表总结</h2><ol>
<li>哈希表的使用场景：快速判断一个元素是否在集合中出现过。</li>
<li>哈希的三重境界：普通数组-&gt;set-&gt;map。</li>
<li>目前哈希中用到的set和map实际上是unordered_set和unordered_map，相对于set和map中的另外两种数据结构（set, multiset, map, multimap），unordered_set和unordered_map的查询效率和增删效率都是最高的。选择set类型的三种数据结构时，若我们不需要数据有序，且需要去重，且希望效率高，则用unordered_set。选择map类型的三种数据结构时，若我们不需要key有序，且希望效率高，则用unordered_map。</li>
<li>遇到哈希问题时，首先想想能不能用数组做哈希（比如题目中提到字符串中全是小写英文字母，就果断用数组做哈希）。用数组做哈希最直接，运行速度也最快，用set做哈希速度更慢，但遇到大规模的索引，数组放不下时，只能用set。</li>
<li>什么时候用map做哈希？当对一个元素需要同时存储两个值时，就必须用map做哈希。这两个值一个作为key，一个作为value存入map中。key中一般存储的是元素的值（便于查询），value中可以存放元素的索引（如1. 两数之和），也可以存放元素出现的次数（如454.四数相加II）。</li>
<li>map可以当作普通数组一样使用，忘了STL的用法可以复习知识部分。</li>
<li>哈希表部分的八道算法题，前六道都使用的是正统的哈希法，最后两道（三树之和&amp;四数之和）并非不可以使用哈希法，但使用哈希法需要进行复杂的去重操作，代码容易写错，且运行效率低下，因此推荐使用双指针算法。</li>
<li>三数之和&amp;四数之和的易错点在于剪枝和去重。每重for循环都需要剪枝和去重，while循环进行去重即可，但其实剪枝是一种优化，并不是必须的。但去重是必须的！</li>
</ol>
]]></content>
      <categories>
        <category>算法（哈希表）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>双指针算法</tag>
        <tag>总结</tag>
        <tag>数组哈希</tag>
        <tag>map哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 6 | Leetcode 242, 349, 202, 1</title>
    <url>/2024/01/29/Day-6-Leetcode-242-349-202-1/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">哈希表理论基础</a><br><a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242.有效的字母异位词</a><br><a href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html">349. 两个数组的交集</a><br><a href="https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html">202. 快乐数</a><br><a href="https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html">1. 两数之和</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="哈希表理论基础"><a href="#哈希表理论基础" class="headerlink" title="哈希表理论基础"></a>哈希表理论基础</h3><p>哈希表-&gt;哈希函数-&gt;哈希碰撞-&gt;拉链法/线性探测法-&gt;常见的三种哈希结构-&gt;set &amp; map及如何选取-&gt;总结</p>
<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>哈希表是根据关键码的值而直接进行访问的数据结构。举例：其实数组就是一张哈希表。哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素。</p>
<p>哈希表能解决什么问题呢，一般哈希表都是用来快速判断一个元素是否出现集合里。</p>
<h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>哈希函数：哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。如果hashCode得到的数值大于哈希表的大小了，也就是大于tableSize了，此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，这样我们就保证了学生姓名一定可以映射到哈希表上了。</p>
<p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。接下来<strong>哈希碰撞</strong>登场。</p>
<h4 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h4><p>小李和小王都映射到了索引下标 1 的位置，<strong>这一现象叫做哈希碰撞</strong>。一般哈希碰撞有两种解决方法， 拉链法和线性探测法。</p>
<h4 id="拉链法-线性探测法"><a href="#拉链法-线性探测法" class="headerlink" title="拉链法/线性探测法"></a>拉链法/线性探测法</h4><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放冲突的数据了。</p>
<h4 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h4><p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p>
<ul>
<li>数组</li>
<li>set （集合）</li>
<li>map(映射)</li>
</ul>
<h4 id="set-amp-map及如何选取"><a href="#set-amp-map及如何选取" class="headerlink" title="set &amp; map及如何选取"></a>set &amp; map及如何选取</h4><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-01-29_09-29-58.png?raw=true" alt="Snipaste_2024-01-29_09-29-58.png"></p>
<p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p>
<p><img src="https://raw.githubusercontent.com/yfchenkeepgoing/image/main/image.png" alt="img"></p>
<p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。</p>
<p>两个unordered都是哈希表实现的,其他四个都是红黑树实现的。三类set和三类map性质上是类似的。</p>
<p>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p>
<p>那么再来看一下map ，在map 是一个key-value 的数据结构，map中，对key是有限制，因为key的存储方式使用红黑树实现的，对value没有限制。</p>
<p>虽然std::set、std::multiset 的底层实现是红黑树，不是哈希表，std::set、std::multiset 使用红黑树来索引和存储，不过给我们的使用方式，还是哈希法的使用方式，即key和value。所以使用这些数据结构来解决映射问题的方法，我们依然称之为哈希法。 map也是一样的道理。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下，==当我们遇到了<strong>要快速判断一个元素是否出现集合里</strong>的时候，就要考虑哈希法==。哈希法的查询速度很快：O(1)。</p>
<p>但是哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p>
<p>如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h4><ol>
<li>将一个数组中的元素全部置为0：<code>int hash[26] = &#123;0&#125;;</code>。实际上，直接写<code>int hash[26]</code>也可以，不给数组中的值赋值，数组中的值默认为0。</li>
<li>求字符串<code>string s</code>的长度，可以用<code>s.size()</code>，也可以用<code>s.length()</code>。</li>
<li><code>s[i] - &#39;a&#39;</code>：编译器会自动用ascii码进行计算，不需要手动将变量类型转换为整数。</li>
<li>一个有返回值的函数，如果执行了return语句，函数直接结束，不需要再break。</li>
<li>定义一个常量大小的数组，空间复杂度是O(1)。</li>
</ol>
<h4 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h4><ol>
<li>set, multiset, unordered_set。前两者底层实现是红黑树，最后一个的底层实现是哈希值直接映射。unordered_set就是一个可以无限存装的数组。本题用unordered_set，因为其做映射和取值时效率最高，前两者的底层实现是树，因此取值是还要有查找的过程。unordered_set中的元素不可重复，相当于自动帮我们做去重；而multiset中的元素可以重复。</li>
<li>可以直接将set类型的数据转换为vector类型：<code>return vector&lt;int&gt;(set.begin(), set.end())</code>。</li>
<li>cpp中的vector中既有insert方法，又有push_back方法，前者需要指定插入元素的具体位置，后者直接将元素插入到vector的末尾。cpp的set（包括set, multiset, unordered_set）中只有insert方法，传入的参数为要插入的值，不需要指定插入元素的具体位置。</li>
<li>将vector转换为unordered_set: <code>unordered_set&lt;int&gt; nums1_set(nums1.begin(), nums1.end())</code>。</li>
<li>在unordered_set中查找元素：<code>nums1_set.find(nums2[i])</code>，返回的结果是一个迭代器（指针）。如果找到该值，<code>find</code>返回一个指向该元素的迭代器；如果未找到，则返回一个指向<code>unordered_set</code>末尾的迭代器，即<code>end()</code>迭代器。</li>
</ol>
<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h4><ol>
<li>返回一个vector可以直接将vector的内容写入大括号中，然后返回，比如<code>return &#123;a[i], b[i]&#125;</code>，返回一个空数组可以直接写成<code>return &#123;&#125;</code>，而不用定义一个vector再利用push_back方法向其中插入数，然后再返回这个vector。</li>
<li>定义的<code>vector&lt;int&gt; a</code>，若不给其赋值，则该vector长度为0。可见vector是动态地被分配内存，如果不给其赋值，则其长度为0，不占用内存，这与普通数组需要在定义时声明长度有所不同。</li>
<li>定义unordered_map的方式：<code>unordered_map&lt;int, int&gt; map</code>；unordered_map中有insert函数和find函数，用法同unordered_set；遍历这些STL容器都要用迭代器，相当于是一种加强版的指针；访问unordered_map的key和value：<code>map-&gt;first</code>和<code>map-&gt;second</code>。</li>
</ol>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="242-有效的字母异位词-1"><a href="#242-有效的字母异位词-1" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h3><p>想到一个办法，用两个数组分别统计两个字符串中出现的字母和字母出现的频次，然后判断两个数组是否完全相同。代码如下所示，可以成功运行：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash1[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> hash2[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash1[s[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash2[t[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (hash1[i] != hash2[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>稍微麻烦了点，实际上用一个数组就够了。</p>
<h3 id="349-两个数组的交集-1"><a href="#349-两个数组的交集-1" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h3><p>暂时还不会用set做哈希，因此先尝试用数组做哈希。我写下了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash1[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> hash2[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计两个数组nums1和nums2中每个数值出现的频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash1[nums1[i]] ++ ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash2[nums2[i]] ++ ;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若一个数同时在nums1和nums2数组中出现的频次&gt;=1，则该数是两数组的重叠，放入结果数组res中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash1[i] &amp;&amp; hash2[i])</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>本题其实是使用set的好题，但是后来力扣改了题目描述和测试用例，添加了 0 &lt;= nums1[i], nums2[i] &lt;= 1000 条件，所以使用数组也可以了，不过建议大家忽略这个条件。 尝试去使用set。</p>
<h3 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h3><p>尽管说这道题和上一道题原理上差不多，只是套了快乐数的壳子，但我看不出这题怎么用set来进行哈希。直接看讲解吧。</p>
<h3 id="1-两数之和-1"><a href="#1-两数之和-1" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><p>看到的第一想法是类似滑动窗口，但滑动窗口（209.长度最小的子数组）返回的是长度最小的子数组的长度，这道题却要返回两个整数的下标，因此还是有很大不同的。如果要快速在集合中查找一个元素是否出现过，那么应该采用哈希表的方法。我产生了一个想法，将nums数组中的所有数一对一对不重不漏地取出，将每一对数的和作为索引（key），将它们的下标作为（value）存入map中，然后通过查询map的索引来找到目标对，进而返回目标对的下标。实现起来有两个难点：</p>
<ul>
<li>如何不重不漏地枚举所有的数对？</li>
<li>如何将两个下标存入一个value里？</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="242-有效的字母异位词-2"><a href="#242-有效的字母异位词-2" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h3><p><strong>判断两个字符串是否由相同的字母组成</strong>，但字母的位置可以不同。两个完全一样的字符串也是有效异位词。由于字符串中都是小写字母，因此a可以对应数组中索引为0的位置，z可以对应数组中索引为25的位置。用数组hash[26]统计第一个数组中每个字母出现的频率，然后第二个字符串中每个字母出现的频率再在hash数组中做对应的减法，若最后数组中所有元素均为0，则说明两个字符串互为有效的字母异位词。</p>
<p><strong>什么时候用数组/set/map：当哈希值较小，且范围也较小且可控；若哈希值很大，则用set；若是key-value对，则用map</strong>。</p>
<p>根据上述思路，我独立写出了代码，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 数组中的元素全部初始化为0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            hash[s[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; t.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">            hash[t[j] - <span class="string">&#x27;a&#x27;</span>] -- ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (hash[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="349-两个数组的交集-2"><a href="#349-两个数组的交集-2" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h3><p>返回两个数组的交集。注意要去重。虽然可以用数组哈希，但还是建议用set。若保持之前的题目描述，让两个数组中的数值可能非常大，比如上亿，此时就必须要用set了，因为数组下标放不下那么大的数，同时会浪费很多存储空间。</p>
<p>哈希表善于解决判断一个元素是否在一个集合中出现过的题目。<strong>集合中的数值很大时，或者集合中的元素数量很少但数值很分散时，用数组不合适，要用set</strong>。先将数组nums1中的所有数值放到哈希表中，再遍历num2，查看其中的元素的数值是否在哈希表中出现过，出现过则放入res集合中。</p>
<p>因为要<strong>去重</strong>，所以定义unordered_set来存储result。哈希表也用unordered_set。直接将nums1转化为unordered_set的存储结构。接着遍历nums2，看哈希表中是否出现了nums2中的元素，出现了则将其放入result中。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220707173513.png" alt="set哈希法"></p>
<p>代码如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存储答案的unordered_set，因为是unordered_set所以自动去重</span></span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; res; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将nums1从vector转换为unordered_set</span></span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">nums1_set</span><span class="params">(nums1.begin(), nums1.end())</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在nums1_set中查找nums2中的数据，如果出现过，则将其插入res中</span></span><br><span class="line">        <span class="comment">// 也可以用范围遍历for (int num: nums2)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1_set.<span class="built_in">find</span>(nums2[i]) != nums1_set.<span class="built_in">end</span>())</span><br><span class="line">                res.<span class="built_in">insert</span>(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将res从unordered_set类型转换回vector类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：<br>构建<code>nums_set</code>：O(n)<br>遍历<code>nums2</code>并检查元素是否在<code>nums_set</code>中：O(m)<br>构建结果向量：O(k)，其中k是结果集中元素的数量<br>综上所述，总的时间复杂度是O(n + m + k)。但是由于k（结果集的大小）是由n和m决定的，并且在大多数情况下k会小于n和m，所以可以近似地认为时间复杂度主要由n和m决定，即O(n + m)。</p>
<p>如果用数组做哈希的话，除了我在初次尝试中写的那种方式，其实还有另一种方式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; res; <span class="comment">// 存储结果，去重</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> hash[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nums1中出现过的数，则将其在哈希数组中的值标记为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums1)</span><br><span class="line">            hash[num] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若nums2中的数在nums1中出现过，则将其插入res中  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums2)</span><br><span class="line">            <span class="keyword">if</span> (hash[num] == <span class="number">1</span>)</span><br><span class="line">                res.<span class="built_in">insert</span>(num);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">// unordered_set-&gt;vector</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="202-快乐数-1"><a href="#202-快乐数-1" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h3><p>题目中说：Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.本题本来是一个数学问题，可以得到严格的数学证明，但我们不需要懂数学，可以用编程的思维去解决它。</p>
<p>因此，一个数进行如题的操作后，要么会陷入死循环，要么会在某个时刻等于1并保持。因此，可以写一个循环来持续对输入的数进行如题的操作，如果某次操作的结果在之前出现过，那么该数就不是快乐数；如果操作的结果为1，那么该数就是快乐数。要快速判断一个元素是否在集合中出现过，就应该用一个set将集合中的所有元素维护起来。代码如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 用于求一个数每一位的平方之和的函数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSumofDigits</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            s += (n % <span class="number">10</span>) * (n % <span class="number">10</span>); <span class="comment">// 求每一位的平方</span></span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; loop;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 持续循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="built_in">getSumofDigits</span>(n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 结束循环，是快乐数</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 若发现出现死循环，则立即返回不是快乐数</span></span><br><span class="line">                <span class="keyword">if</span> (loop.<span class="built_in">find</span>(s) != loop.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 尚未出现死循环，则继续</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    loop.<span class="built_in">insert</span>(s);</span><br><span class="line">                    n = s;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>可以将上述代码写得更见简练，更好理解：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            s += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="built_in">getSum</span>(n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 退出条件1，是快乐数</span></span><br><span class="line">            <span class="keyword">if</span> (set.<span class="built_in">find</span>(s) != set.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 退出条件2，不是快乐数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不满足两个退出条件，则继续循环</span></span><br><span class="line">            n = s;</span><br><span class="line">            set.<span class="built_in">insert</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里主要处理的是数字 n 的每一位，一个数字n它的位数可以认为是logn（一个d位的数大约是10的d次方，n = 10^d =&gt; d = logn）。每次进行快乐数的判断会执行一次该计算操作，但是因为快乐数的范围有限，总体来看不会超过 logn 的常数倍，因此时间复杂度是O(log n)。</p>
<p>所以随着<code>n</code>的增加，存储在<code>unordered_set</code>中的不同可能结果的数量实际上是有限的。事实上，随着<code>n</code>的增长，这个数量的增长速度接近于对数增长。换句话说，即使<code>n</code>非常大，经过<code>getSum</code>处理后的结果仍然是一个相对较小的数字集合。因此空间复杂度为<code>O(logn)</code>。至于为什么是<code>logn</code>，我认为原因是其增长速度最慢，这比<code>sqrt(n)</code>等其他形式更符合n较大时set中存储的元素的数量接近一个常数的事实。</p>
<h3 id="1-两数之和-2"><a href="#1-两数之和-2" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><p>本题需要用map解决。判断一个元素是否在一个集合中出现过：用哈希法。假设target = 9，当遍历到元素3时，我们需要去寻找元素6是否被遍历过。把遍历过的元素加到一个集合（哈希表结构）中，每次遍历新元素a时，判断(target - a)是否在集合中出现过。若出现过，我们需要知道其下标，因此集合中既要存储元素的值，又要存储元素的下标。此时想到用map，存储元素的值用map的key，存储元素的下标用map的value（因为要查找元素是否出现过，因此以元素的值作为key，map能以最快的速度找到这个key是否在这个map中出现过）。</p>
<p>看完上述思路后，我独立写出了以下的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; store;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有元素的值作为key，索引作为value存入map中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">            store.<span class="built_in">insert</span>(&#123;nums[i], i&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每遍历到一个元素nums[i]，查找target - nums[i]是否在map中</span></span><br><span class="line">        <span class="comment">// 是则返回结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = target - nums[i];</span><br><span class="line">            <span class="keyword">auto</span> it = store.<span class="built_in">find</span>(t);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注意除去第一个条件外，还需要保证查找到的元素并非当前元素本身</span></span><br><span class="line">            <span class="comment">// 否则会出现target = 两倍当前元素而导致的误判</span></span><br><span class="line">            <span class="keyword">if</span> (it != store.<span class="built_in">end</span>() &amp;&amp; it-&gt;second != i)</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">                res.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>继续听讲解，<strong>map用于存放遍历过的元素的值和索引</strong>。本题使用unordered_map，其存和读的效率是最高的。因此写出了以下的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; store;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每遍历到一个元素nums[i]，查找target - nums[i]是否在map中</span></span><br><span class="line">        <span class="comment">// 是则返回结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = target - nums[i];</span><br><span class="line">            <span class="keyword">auto</span> it = store.<span class="built_in">find</span>(t);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若找到了target - nums[i]，则将其索引和当前遍历的元素的索引返回</span></span><br><span class="line">            <span class="keyword">if</span> (it != store.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">                res.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将已经遍历过的元素的值作为key，索引作为value存入map中</span></span><br><span class="line">            store.<span class="built_in">insert</span>(&#123;nums[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我的第一版代码在store中存储了数组中所有元素的值和索引，因此需要保证查找到的元素并非当前元素本身。第二版代码在store中存储的是已经遍历过的元素，故天然满足查找到的元素并非当前元素本身的条件。两版代码都是对的，但后者更为简洁。最简洁版本的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map; <span class="comment">// 用于存储已遍历过的元素的值和索引</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 用于查找map中是否有目标元素</span></span><br><span class="line">            <span class="keyword">auto</span> it = map.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="comment">// 有，则返回两个索引构成的vector</span></span><br><span class="line">            <span class="keyword">if</span> (it != map.<span class="built_in">end</span>()) <span class="keyword">return</span> &#123;i, it-&gt;second&#125;;</span><br><span class="line">            <span class="comment">// 无，则将当前元素的值和索引插入map中，然后开始循环的下一轮</span></span><br><span class="line">            map.<span class="built_in">insert</span>(&#123;nums[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 完成循环后还没找到两个索引，则返回空vector</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="242-有效的字母异位词-3"><a href="#242-有效的字母异位词-3" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h3><ol>
<li>本题的本质是判断两个字符串是否由相同的字母组成。</li>
<li>本题用数组实现哈希。</li>
<li>遇到哈希问题时，首先想想能不能用数组做哈希。用数组做哈希最直接，运行速度也最快，用set做哈希速度更慢，但遇到大规模的索引，数组放不下时，只能用set。</li>
</ol>
<h3 id="349-两个数组的交集-3"><a href="#349-两个数组的交集-3" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h3><ol>
<li>本题本来不改测试数据，数组中的数值可能很大时，只能用set做哈希。现在对数组中的数值做了限制，最大不超过1000，则可以用数组做哈希。</li>
<li>用数组做哈希比用set做哈希效率更高，因为用set的话每次往里Insert一个值，都需要对这个值做一次哈希运算，同时还要开辟一个新的空间。用数组的下标做哈希映射永远是最快的。</li>
<li>本题适合用来衔接用数组做哈希和用set做哈希。</li>
<li>本题用set做哈希时，要记住set的各种用法：vector和unordered_set互相转化，在unordered_set中查找元素。这些用法归纳在知识中。</li>
<li>本题有三种解法：一种是用set哈希，另外两种是用数组做哈希。用数组做哈希建议采用我在初次尝试中的做法，只需要用到数组，不需要用到unordered_set去重。</li>
<li>采用范围遍历的写法可以简化代码。</li>
</ol>
<h3 id="202-快乐数-2"><a href="#202-快乐数-2" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h3><p>这道题的逻辑其实非常简单。若各个位上的平方和为1，则退出循环，返回是快乐数；若平方和之前出现过，则说明进入了死循环，也退出循环，返回不是快乐数；其他情况下，继续循环。由于本题的<code>1 &lt;= n &lt;= 2^31 - 1</code>，各个位的平方和的数据范围非常大，因此必须用set做哈希，不能再用数组做哈希。注意本题时间复杂度和空间复杂度的分析。时间复杂度和空间复杂度不存在<code>sqrt(n)</code>等表达式，要么是1, 要么是logn，要么是n，要么nlogn或者更大。</p>
<h3 id="1-两数之和-3"><a href="#1-两数之和-3" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><p>四个重要问题：</p>
<ol>
<li>为什么用哈希法：快速查找一个元素（目标元素）是否在集合（unordered_map存放已遍历过的元素）中出现过。</li>
<li>为什么要用map（unordered_map）：因为既需要存储元素的值，也需要存储元素的索引。这道题目中并不需要key有序，选择unordered_map 效率更高。</li>
<li>map的作用：存储<strong>已遍历过</strong>的元素的值和索引。</li>
<li>map中的key存了元素的值（便于查询），value存了元素的索引（作为结果返回）。</li>
</ol>
]]></content>
      <categories>
        <category>算法（哈希表）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>数组哈希</tag>
        <tag>map哈希</tag>
        <tag>set哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 8 | Leetcode 344, 541, k54, 151, k55</title>
    <url>/2024/02/01/Day-8-Leetcode-344-541-k54-151-k55/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html">344.反转字符串</a><br><a href="https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html">541. 反转字符串II</a><br><a href="https://programmercarl.com/kama54.%E6%9B%BF%E6%8D%A2%E6%95%B0%E5%AD%97.html">卡码网：54.替换数字</a><br><a href="https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html">151.翻转字符串里的单词</a><br><a href="https://programmercarl.com/kama55.%E5%8F%B3%E6%97%8B%E5%AD%97%E7%AC%A6%E4%B8%B2.html">卡码网：55.右旋转字符串</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h3><p>一般来说，编程语言自己实现的库函数都是左闭右开的，因此<code>reverse(s, i, i + k)</code>表示的是反转字符串s的第i位到第i + k位，不包含第i + k位。</p>
<h3 id="卡码网：54-替换数字"><a href="#卡码网：54-替换数字" class="headerlink" title="卡码网：54.替换数字"></a>卡码网：54.替换数字</h3><ol>
<li>注意，cpp中比较大小不能写作<code>48 &lt;= s[i] &lt;= 57</code>，而是要写作<code>s[i] &gt;= 48 &amp;&amp; s[i] &lt;= 57</code>。表达式<code>48 &lt;= s[i] &lt;= 57</code>实际上会先计算<code>48 &lt;= s[i]</code>，这个表达式的结果是一个布尔值<code>true</code>或<code>false</code>，在C++中，这个布尔值会被隐式转换为整数，<code>true</code>转换为<code>1</code>，<code>false</code>转换为<code>0</code>。然后，该整数（<code>0</code>或<code>1</code>）会与<code>57</code>进行比较，所以条件几乎总是为真（除非<code>s[i]</code>是字符<code>&#39;0&#39;</code>）。</li>
<li>扩容字符串的函数为<code>resize</code>函数。</li>
<li>cpp中是可以不遍历字符串中的每个字符，就直接cout输出整个字符串的。</li>
<li>字符串和数组的区别（摘自代码随想录）：<br>字符串是若干字符组成的有限序列，也可以理解为是一个字符数组，但是很多语言对字符串做了特殊的规定，接下来我来说一说C/C++中的字符串。<br>在C语言中，把一个字符串存入一个数组时，也把结束符 ‘\0’存入数组，并以此作为该字符串是否结束的标志。<br>在C++中，提供一个string类，string类会提供 size接口，可以用来判断string类字符串是否结束，<strong>就不用’\0’来判断是否结束</strong>。<br>那么vector&lt; char &gt; 和 string 又有什么区别呢？<br>其实在基本操作上没有区别，但是<strong>string提供更多的字符串处理的相关接口</strong>，例如string 重载了+，而vector却没有。所以想处理字符串，我们还是会定义一个string类型。</li>
<li>若要求某个字符在0-9之间，既可以写<code>s[i] &gt;= 48 &amp;&amp; s[i] &lt;= 57</code>（’0’的ascii码是48，’1’的ascii码是57），也可以写<code>s[i] &gt;= &#39;0&#39; &amp;&amp; s[i] &lt;= &#39;9&#39;</code>。</li>
</ol>
<h3 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h3><ol>
<li>erase函数的时间复杂度是O(n)</li>
<li>本题可以用split函数来从字符串中分割出单词，但那样就失去了意义</li>
<li>若给一个函数传入的参数加上引用<code>&amp;</code>，那么在函数中对这个参数进行了修改，调用该函数后该参数也会被修改。</li>
</ol>
<h3 id="卡码网：55-右旋转字符串"><a href="#卡码网：55-右旋转字符串" class="headerlink" title="卡码网：55.右旋转字符串"></a>卡码网：55.右旋转字符串</h3><ol>
<li>注意：若在ACM模式中调用<code>reverse</code>函数，必须<code>#include &lt;algorithm&gt;</code>，否则会报错。但若调用<code>swap</code>函数，不需要引用任何头文件，直接使用即可。</li>
</ol>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h3><p>先尝试用reverse函数秒杀，顺便复习reverse函数的用法：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>reverse函数相当于把字符串反转以后，将新的字符串存入了旧的字符串中。</p>
<p>我曾经做过反转链表的题，猜测用双指针可以解决这道题。写下了以下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>, r = s.<span class="built_in">size</span>() - <span class="number">1</span>; l &lt; r; l ++ , r -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// swap(s[l], s[r]);</span></span><br><span class="line">            <span class="type">int</span> tmp = s[l];</span><br><span class="line">            s[l] = s[r];</span><br><span class="line">            s[r] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>直接用swap函数或者手写swap函数都是可以的。<code>l &lt; r</code>或者<code>l &lt;= r</code>都可以。因为字符串中字符的个数为奇数时，中间那个字符交换不交换都一样；字符个数为偶数时，交换最后两个成对的字符即可。</p>
<h3 id="541-反转字符串II-1"><a href="#541-反转字符串II-1" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h3><p>拿到这道题，我的第一想法是分类讨论。设字符串的长度是<code>len</code>。若<code>len &lt; k</code>，则全部反转；若<code>k &lt;= len &lt; 2k</code>，则反转前k个字母；若<code>len &gt;= 2k</code>，则按照题意反转。本题在反转的逻辑上没有困难，但问题在于如何分割出需要反转的子字符串。我没想出来什么好办法，写的逻辑太复杂又容易出错。</p>
<h3 id="卡码网：54-替换数字-1"><a href="#卡码网：54-替换数字-1" class="headerlink" title="卡码网：54.替换数字"></a>卡码网：54.替换数字</h3><p>我先输入字符串s，然后定义每个元素由char类型变量组成的vector。遍历字符串s，若其中的某个字符的ascii码在48-57之间，说明该字符是数字0-9，那么向vector中依次插入number这6个字符。其他情况下，向vector中插入原始字符即可。据此思路写下以下的代码，可以通过评测。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="number">48</span> &amp;&amp; s[i] &lt;= <span class="number">57</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            out.<span class="built_in">push_back</span>(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">            out.<span class="built_in">push_back</span>(<span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">            out.<span class="built_in">push_back</span>(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">            out.<span class="built_in">push_back</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">            out.<span class="built_in">push_back</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">            out.<span class="built_in">push_back</span>(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            out.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; out.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        cout &lt;&lt; out[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="151-翻转字符串里的单词-1"><a href="#151-翻转字符串里的单词-1" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h3><p>这道题yxc应该讲过,要么通过流的方式读入为一个个单词，样例代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span> <span class="comment">// 引入 stringstream</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string line;</span><br><span class="line">    <span class="built_in">getline</span>(cin, line); <span class="comment">// 使用 getline 读取一整行</span></span><br><span class="line"></span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(line)</span></span>; <span class="comment">// 使用 stringstream 来分割字符串</span></span><br><span class="line">    string word;</span><br><span class="line">    <span class="keyword">while</span> (ss &gt;&gt; word) &#123; <span class="comment">// 从 stringstream 中读取单词，直到结束</span></span><br><span class="line">        cout &lt;&lt; word &lt;&lt; endl; <span class="comment">// 输出单个单词</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>要么通过双指针算法找出一个个单词并存储之。然后再将一个个单词逆序拼接为字符串并输出。我先尝试后一种方法。但没有做出来。</p>
<h3 id="卡码网：55-右旋转字符串-1"><a href="#卡码网：55-右旋转字符串-1" class="headerlink" title="卡码网：55.右旋转字符串"></a>卡码网：55.右旋转字符串</h3><p>本题我下意识地使用substr来写，得到如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    string s1 = s.<span class="built_in">substr</span>(s.<span class="built_in">size</span>() - k, s.<span class="built_in">size</span>()); <span class="comment">// 后面k个字符</span></span><br><span class="line">    string s2 = s.<span class="built_in">substr</span>(<span class="number">0</span>, s.<span class="built_in">size</span>() - k); <span class="comment">// 字符串在后面k个字符前的字符</span></span><br><span class="line">    cout &lt;&lt; s1 + s2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>向substr中传入的区间是左闭右开的。</p>
<p>若不借助库函数，我还有一个想法。先拿一个字符串保存输入字符串的后面k个字符。然后在输入字符串的基础上，从尾部倒着插入前面的那些字符，最后再将另一个字符串保存的原字符串的后面k个字符插到新字符串的前面去。其实倒着插入和顺着插入也没什么区别。</p>
<p>我还想到一种做法。受到151. 翻转字符串里的单词启发，首先反转整个字符串，然后反转字符串的前k位，最后反转字符串的后(n - k)位。由此写出了两个版本的代码，第一版是直接调用reverse函数，第二版是手动实现reverse函数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + k);</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + k, s.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动实现reverse函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(string &amp;s, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = i, b = j; a &lt; b; a ++ , b -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp = s[a];</span><br><span class="line">        s[a] = s[b];</span><br><span class="line">        s[b] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">reverseString</span>(s, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverseString</span>(s, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverseString</span>(s, k, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="344-反转字符串-1"><a href="#344-反转字符串-1" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h3><p>在算法的思路上，字符串和数组非常类似。本题应用双指针法即可：首尾交换，再次一级交换，以此类推。因此首尾各有一个指针，两指针交换，然后两指针同时向中间移动。若库函数直接把题目解决了，就不要用库函数。若库函数是题目的一部分，且我们知道库函数的大体实现逻辑和时间复杂度，那就可以用。代码如下所示：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>() / <span class="number">2</span>; i ++ , j -- )</span><br><span class="line">            <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>swap函数有两种方法，一种是常见的交换数值，另一种是位运算，可参见代码随想录。</p>
<h3 id="541-反转字符串II-2"><a href="#541-反转字符串II-2" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h3><p>模拟题，模拟复杂的规则下，如何反转字符串。题意：每2k段的前k个字符进行反转，尾部如果剩下的字符超过长度超过k，则反转k个字符，剩下的不动。尾部如果剩下的字符长度小于k，则全部反转。本题的代码可以很简洁。</p>
<p>本题每次取2k段，因此按照2k来遍历：<code>for (int i = 0; i &lt; s.size(); i += 2k)</code>。然后在for循环中操作前k个字符即可。边界条件想不明白可以带一个具体的例子来试。代码和注释如下所示：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 每隔2k个字符跳转一次，即每次取出2k个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += <span class="number">2</span> * k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 对2k个字符的前k个字符进行反转</span></span><br><span class="line">            <span class="comment">// 由于每次取2k，取若干次后。字符串的尾部剩下的字符长度l可能l &lt; k 或 k &lt;= l &lt; 2k</span></span><br><span class="line">            <span class="comment">// 对前一种情况，需要将尾部全部反转，对后一种情况，需要反转尾部剩下字符的前k个字符</span></span><br><span class="line">            <span class="comment">// 先处理后一种情况，注意加上条件i + k &lt;= s.size()，这可以避免对索引超出范围的元素进行反转</span></span><br><span class="line">            <span class="comment">// 至于i + k是否能取到s.size()，可以举例子：k = 3, s = &#123;a, b, c&#125;，由此可见可以取等于</span></span><br><span class="line">            <span class="comment">// 也可以从理论上分析，由于reverse的区间是左闭右开的，因此s.begin() + i + k实际上取不到，因此可以让i + k = s.size() </span></span><br><span class="line">            <span class="comment">// 处理完后continue即可，除去反转2k个字符中的前k个字符的一般情况，尾部剩下的字符的长度的第一种情况和第二种情况只可能有一种发生</span></span><br><span class="line">            <span class="keyword">if</span> (i + k &lt;= s.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k); <span class="comment">// 左闭右开</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 再处理前一种情况，当剩余的字符长度l &lt; k时，反转剩余的全部字符</span></span><br><span class="line">            <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>也可以不用continue，直接采用if-else写法，参见代码随想录的写法（代码随线录的注释也更加简洁明了）：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += (<span class="number">2</span> * k)) &#123;</span><br><span class="line">            <span class="comment">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span></span><br><span class="line">            <span class="comment">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</span></span><br><span class="line">            <span class="keyword">if</span> (i + k &lt;= s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 3. 剩余字符少于 k 个，则将剩余字符全部反转</span></span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">end</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="卡码网：54-替换数字-2"><a href="#卡码网：54-替换数字-2" class="headerlink" title="卡码网：54.替换数字"></a>卡码网：54.替换数字</h3><p>本题的最佳解法不需要额外的辅助空间。首先扩充原字符串到每个数字字符替换成 “number” 之后的大小。然后用<strong>双指针算法</strong>，指针i指向旧字符串的末尾，指针j指向新字符串的末尾。用指针i遍历旧字符串，若遇到字母，则原样填入指针j指向的位置；若遇到数字，则从后往前将number填入到指针j指向的位置。直到i和j都指向新旧字符串的开头为止。这里的新旧字符串其实是扩容之后和扩容之前的同一字符串，只是为了方便区分称它们为新旧字符串。根据这个思路，我写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// count为字符串中数字的数量</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="number">48</span> &amp;&amp; s[i] &lt;= <span class="number">57</span>)</span><br><span class="line">            count ++ ;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> oldSize = s.<span class="built_in">size</span>();</span><br><span class="line">    s.<span class="built_in">resize</span>(oldSize + count * <span class="number">5</span>); <span class="comment">// 字符串扩容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 双指针算法，i指向旧字符串，j指向新字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = oldSize - <span class="number">1</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &lt; <span class="number">48</span> || s[i] &gt; <span class="number">57</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            s[j] = s[i];</span><br><span class="line">            i -- ;</span><br><span class="line">            j -- ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s[j] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">            s[j - <span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">            s[j - <span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">            s[j - <span class="number">3</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">            s[j - <span class="number">4</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">            s[j - <span class="number">5</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">            i -- ;</span><br><span class="line">            j -= <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以直接写作cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">        cout &lt;&lt; s[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码随想录的代码本质上和我写的是一样的，但他写的更见简洁一些，我写的更易于理解一些。</p>
<p>我的写法中，必须让<code>i &gt;= 0</code>，不能写成<code>i &gt; 0</code>，否则答案错误。例子，输入1，输出本来应该为number，若for循环的条件为<code>i &gt; 0</code>，则不会进入for循环，直接输出1，这显然是不对的。但对于代码随想录的写法：<code>for (int i = sNewSize - 1, j = sOldSize - 1; j &lt; i; i--, j--)</code>，则<code>j &lt; i</code>是正确的，若首字符为字母，则j = i时两指针均以指向首字符，首字符保留即可，不需要处理；若首字符为数字，则逻辑也可以正确执行。若<code>j &lt;= i</code>，则反而会出现越界的问题，因为当j和i都指向首字符后，for循环的条件依然满足，此时完成当前循环后，i和j继续-1，再次判断时，i依然等于j，再次进入循环，此时s[i]和s[j]就不存在了（s[-1]不存在）。</p>
<h3 id="151-翻转字符串里的单词-2"><a href="#151-翻转字符串里的单词-2" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h3><p>是字符串中操作比较复杂的题目，给的字符串中在开头、中间、结尾都可能有空格。反转字符串里的单词后，要将多余的空格都删掉。</p>
<p>整体思路：先让单词的顺序和目标相同，即将整个字符串都反转。再对每个单词做反转，就得到了目标字符串。<strong>将原字符串整体反转，再将每一个单词反转</strong>。</p>
<p>难点：如何删去多余的空格。要求空间复杂度O(1)，即不能申请新的字符串来放置删去多余空格后的字符串。且不能使用库函数。使用快慢双指针算法，删除多余空格的时间复杂度为O(n)。<strong>快指针用于遍历旧字符串，慢指针用于依次指向新字符串中的各个元素</strong>。（新字符串在旧字符串的基础上修改，并不需要另外创建字符串来存储新字符串）。双指针的用法同数组章节的移除元素。</p>
<p>根据上述思路，我写出了如下的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeExtraSpace</span><span class="params">(string &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> fast = <span class="number">0</span>; fast &lt; s.<span class="built_in">size</span>(); fast ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[fast] != <span class="string">&#x27; &#x27;</span>) <span class="comment">// 去除字符串开头的空格</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 每复制完一个单词后，加一个空格</span></span><br><span class="line">                <span class="comment">// 这句话不可以放在while循环后，否则会在最后一个单词后面增加一个多余的空格</span></span><br><span class="line">                <span class="keyword">if</span> (slow != <span class="number">0</span>) s[slow ++ ] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将旧字符串的非空部分复制到新字符串中</span></span><br><span class="line">                <span class="keyword">while</span> (fast &lt; s.<span class="built_in">size</span>() &amp;&amp; s[fast] != <span class="string">&#x27; &#x27;</span>) s[slow ++ ] = s[fast ++ ];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">resize</span>(slow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">removeExtraSpace</span>(s); <span class="comment">// 删去所有多余的空格</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()); <span class="comment">// 反转整个字符串，注意reverse函数是左开右闭的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转每个单词</span></span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>) i ++ ; <span class="comment">// 找到空格</span></span><br><span class="line">            <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + start, s.<span class="built_in">begin</span>() + i); <span class="comment">// 反转start到空格之间的单词</span></span><br><span class="line">            start = i + <span class="number">1</span>; <span class="comment">// 更新start</span></span><br><span class="line">            i = start; <span class="comment">// 更新i</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>代码随想录中的反转每个单词的写法和我的略有不同，他用的是for循环，但本质是一样的。</p>
<h3 id="卡码网：55-右旋转字符串-2"><a href="#卡码网：55-右旋转字符串-2" class="headerlink" title="卡码网：55.右旋转字符串"></a>卡码网：55.右旋转字符串</h3><p>我在初次尝试中已经给出了空间复杂度为O(1)的最优解法，下面两幅图（对应两种等效的方法）可以帮助理解：</p>
<ol>
<li><p>先反转整个字符串，再反转两个子串</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20231106172058.png" alt="img"></p>
</li>
<li><p>先反转子串，再反转整个字符串</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20231106172534.png" alt="img"></p>
</li>
</ol>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="344-反转字符串-2"><a href="#344-反转字符串-2" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h3><p>两种for循环的写法：<code>for (int i = 0, j = s.size() - 1; i &lt; s.size() / 2; i ++ , j -- )</code>和<code>for (int l = 0, r = s.size() - 1; l &lt; r; l ++ , r -- )</code>都可以。</p>
<h3 id="541-反转字符串II-3"><a href="#541-反转字符串II-3" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h3><ol>
<li>for循环每次以2k为长度去跳转</li>
<li><p>本题反转字符的<strong>三种情况</strong>：</p>
<ul>
<li>每隔 2k 个字符的前 k 个字符进行反转</li>
<li>剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</li>
<li>剩余字符少于 k 个，则将剩余字符全部反转</li>
</ul>
<p>三种情况每次只可能出现一种，即出现了一种情况，另外两种情况就不会出现了。据此，我写出了<strong>结构分明的三段式代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += <span class="number">2</span> * k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 情况1</span></span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">2</span> * k &lt;= s.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k);</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 可以省略</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 情况2</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i + k &lt;= s.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k);</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 可以省略</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 情况3</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>情况1和情况2可以合并（即剩余字符的长度l满足l &gt;= k时，都是反转剩下字符的前k个；只有当l满足l &lt; k时，才要反转剩下的所有字符），因此产生了实现部分中的第二版代码。每次思考时应该先想到三种情况，再写出结构分明的三段式代码，然后对其进行简化。<strong>能够写出三段式代码即可，虽然不简洁但思路清晰简单、不容易出错</strong>。</p>
</li>
<li>如果要求一段段地操作字符串或数组，那么for循环中的i变量是可以一段段增加的，而没必要每次+1</li>
</ol>
<h3 id="卡码网：54-替换数字-3"><a href="#卡码网：54-替换数字-3" class="headerlink" title="卡码网：54.替换数字"></a>卡码网：54.替换数字</h3><ol>
<li>本题注意使用<strong>双指针做法</strong>。代码推荐参考我在实现中的写法，虽然和代码随想录的代码略有差别，但本质是完全一样的。</li>
<li>本题注意考虑边界条件，在我的写法中，是<code>i &gt;= 0</code>而非<code>i &gt; 0</code>；在代码随想录的写法中，是<code>j &lt; i</code>而非<code>j &lt;= i</code>。如果边界条件写得不对会导致发生指针异常或者部分样例无法通过。考虑边界条件时，可以举特例，也可以让代码先运行，若发生错误则修改相应的边界条件。</li>
<li><p><strong>很多数组填充类的问题，其做法都是先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong>对于线性数据结构，填充或者删除，后序处理会高效的多。</p>
<p>这么做有两个好处：</p>
<ol>
<li>不用申请新数组。算法的空间复杂度从O(N)降到了O(1)。</li>
<li>从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。算法的时间复杂度从O(n^2)降到了O(n)。</li>
</ol>
</li>
</ol>
<h3 id="151-翻转字符串里的单词-3"><a href="#151-翻转字符串里的单词-3" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h3><ol>
<li>本题的总体思路：移除多余的空格-&gt;反转整个字符串-&gt;反转字符串中的每个单词</li>
<li>利用快慢双指针移除多余的空格有两种写法，一种较为复杂，需要分别移除字符串前面的空格和字符串中间和最后的连续的不止一个的空格，最后再移除字符串最后可能存在的一个空格。<strong>另一种较为简单，思路和<a href="https://programmercarl.com/0027.移除元素.html">27.移除元素</a>是相同的</strong>。<strong>快指针用于遍历旧字符串，慢指针用于依次指向新字符串中的各个元素</strong>。时间复杂度O(n)</li>
<li><strong>推荐使用较为简单的双指针写法</strong>。除去从旧字符串中复制每个单词到新字符串中的代码，还需要加上用于在新字符串中添加每个单词尾部的空格的代码。<strong>注意这两行代码的顺序不能写反，必须是先有添加空格的代码，再有复制单词的代码，否则会导致在新字符串的末尾多添加一个空格</strong>。</li>
<li>上面提到的新旧字符串只是有时间上的先后，没有空间上的拷贝。新字符串就是在旧字符串的基础上利用双指针算法通过删除和改动部分元素得到的。因此空间复杂度为O(1)。</li>
</ol>
<h3 id="卡码网：55-右旋转字符串-3"><a href="#卡码网：55-右旋转字符串-3" class="headerlink" title="卡码网：55.右旋转字符串"></a>卡码网：55.右旋转字符串</h3><ol>
<li>本题加上限制条件：不能申请额外空间，只能在本串上操作（对cpp）。</li>
<li>可以先反转总串，再反转子串；也可以先反转子串，再反转总串。</li>
<li>右旋转字符串和左旋转字符串方法完全相同，就是反转的区间不同。</li>
</ol>
]]></content>
      <categories>
        <category>算法（字符串）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>双指针算法</tag>
        <tag>花式反转字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 9 | Leetcode 28, 459, summary</title>
    <url>/2024/02/03/Day-9-Leetcode-28-459-summary/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html">28. 实现 strStr()</a><br><a href="https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html">459.重复的子字符串</a><br><a href="https://programmercarl.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%BB%E7%BB%93.html">字符串：总结篇</a><br><a href="https://programmercarl.com/%E5%8F%8C%E6%8C%87%E9%92%88%E6%80%BB%E7%BB%93.html">双指针总结篇</a></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="KMP算法理论"><a href="#KMP算法理论" class="headerlink" title="KMP算法理论"></a>KMP算法理论</h3><h4 id="KMP与解决的问题"><a href="#KMP与解决的问题" class="headerlink" title="KMP与解决的问题"></a>KMP与解决的问题</h4><p>KMP：发明本算法的三位学者的英文名首字母</p>
<p>应用：字符串匹配问题</p>
<p>经典例子：</p>
<ul>
<li><p>给出文本串: aabaabaaf</p>
</li>
<li><p>给出模式串: aabaaf<br>求在文本串中是否出现过模式串</p>
</li>
</ul>
<h4 id="暴力方法与KMP"><a href="#暴力方法与KMP" class="headerlink" title="暴力方法与KMP"></a>暴力方法与KMP</h4><p>暴力解法：两重for循环，先遍历文本串，再遍历模式串，挨个匹配。从文本串的首位开始，若模式串不匹配文本串，则将模式串后移一位，直到匹配上。时间复杂度O(m * n)，m和n分别是文本串和模式串的长度。</p>
<p>KMP算法：跳到之前已匹配的地方，继续匹配。</p>
<h4 id="前缀表的由来"><a href="#前缀表的由来" class="headerlink" title="前缀表的由来"></a>前缀表的由来</h4><p>KMP算法如何知道我们之前已匹配过哪些，且跳到已匹配的内容后面继续匹配？</p>
<p>前缀表有什么特性，可以让我们找到之前已匹配过的内容？</p>
<p>在f处不匹配，找到f前面子串的后缀是aa，找到与该后缀相等的前缀的后面开始匹配。故我们要求一个字符串中的最长相等前后缀，重新匹配时跳到最长前缀之后开始匹配。</p>
<h4 id="前缀与后缀"><a href="#前缀与后缀" class="headerlink" title="前缀与后缀"></a>前缀与后缀</h4><p>前缀：包含首字母，不包含尾字母的所有子串。</p>
<p>后缀：包含尾字母，不包含首字母的所有子串。</p>
<h4 id="最长相等前后缀"><a href="#最长相等前后缀" class="headerlink" title="最长相等前后缀"></a>最长相等前后缀</h4><p>最长相等的前缀和后缀的长度。以模式串aabaaf为例。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>子串</th>
<th>前缀</th>
<th>后缀</th>
<th>最长相等的前缀和后缀的长度</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>无</td>
<td>无</td>
<td>0</td>
</tr>
<tr>
<td>aa</td>
<td>a</td>
<td>a</td>
<td>1</td>
</tr>
<tr>
<td>aab</td>
<td>a, aa</td>
<td>b, ab</td>
<td>0</td>
</tr>
<tr>
<td>aaba</td>
<td>a, aa, aab</td>
<td>a, ba, aba</td>
<td>1</td>
</tr>
<tr>
<td>aabaa</td>
<td>a, aa, aab, aaba</td>
<td>a, aa, baa, abaa</td>
<td>2</td>
</tr>
<tr>
<td>aabaaf</td>
<td>a, aa, aab, aaba, aabaa</td>
<td>f, af, aaf, baaf, abaaf</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p>得到模式串的前缀表：010120。</p>
<h4 id="使用前缀表的匹配过程"><a href="#使用前缀表的匹配过程" class="headerlink" title="使用前缀表的匹配过程"></a>使用前缀表的匹配过程</h4><p>模式串 aabaaf<br>前缀表 010120<br>发现f不匹配，要找f前的最长相等前后缀，由前缀表得到最长相等前后缀为2。2意味着有一个后缀aa，前面也有一个与之相等的前缀aa。在后缀aa的后面不匹配了，就要从与后缀相等的前缀的后面继续开始匹配。最长相等前后缀为2，故从<code>s[2] = &#39;b&#39;</code>处开始重新匹配。</p>
<h4 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h4><p>next/prefix都可以用来表示前缀表。在遇到不匹配的地方，next数组告诉我们要回退到哪里。前缀表为010120，对其的处理包括：右移/统一减一。不处理前缀表，就将其作为next数组，依然可以完成KMP算法。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>KMP算法-&gt;能解决哪些问题-&gt;为什么KMP算法匹配失败后可以跳到某个位置-&gt;前缀表-&gt;前缀表的特性及如何求取前缀表-&gt;用前缀表完成一次匹配的操作-&gt;实现KMP算法时，有时对前缀表统一减一，有时右移，这不设计KMP算法原理性的东西，只是实现上方法不同而已。</p>
<h3 id="KMP算法的代码实现"><a href="#KMP算法的代码实现" class="headerlink" title="KMP算法的代码实现"></a>KMP算法的代码实现</h3><h4 id="next数组不同的实现方式"><a href="#next数组不同的实现方式" class="headerlink" title="next数组不同的实现方式"></a>next数组不同的实现方式</h4><p>模式串：aabaaf</p>
<p>文本串：aabaabaaf</p>
<p>前缀表：010120，用next数组表示。</p>
<p>如何求next数组？</p>
<ul>
<li>有人会把前缀表右移，第一位放上-1，得到-101012，作为next数组。</li>
<li>有人会把前缀表整体-1，得到-10-101-1，作为next数组。</li>
<li>有人会直接拿前缀表做Next数组。<br>上述实现方式都可以，但具体处理逻辑会略有差别。</li>
</ul>
<p>模式串与文本串在模式串的最后一位f处发生了冲突，<strong>看f的前一位的前缀表的值是多少</strong>，发现是2，于是跳转到下标为2的位置，即b。如果next数组是前缀表右移得到，<strong>就直接比较f对应的next数组的值</strong>，发现是2，于是也跳转到b的位置。若next数组是前缀表-1得到，那么就把f的前一位的next数组的值+1，依然跳转到b的位置。</p>
<p>next数组的核心：遇到冲突向前回退。<strong>本节我们就拿前缀表作为next数组</strong>。</p>
<h4 id="求Next数组的具体代码"><a href="#求Next数组的具体代码" class="headerlink" title="求Next数组的具体代码"></a>求Next数组的具体代码</h4><p>共4步：</p>
<ol>
<li>初始化</li>
<li>处理前后缀不相同的情况</li>
<li>处理前后缀相同的情况</li>
<li>更新next数组的值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入的参数：next数组，我们需要对其进行赋值，模式串s</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(vector&lt;<span class="type">int</span>&gt; next, string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="comment">// 指针i：指向后缀末尾位置</span></span><br><span class="line">    <span class="comment">// 指针j：指向前缀末尾位置，还代表着i之前（包括i）的子串的最长相等前后缀的长度</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">// 前缀从0开始</span></span><br><span class="line">    <span class="type">int</span> next[N]; </span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// next数组初始位置为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 比较前后缀所对应的字符是否相等，故i从1开始，这样i和j才能进行比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理前后缀末尾不相同的情况</span></span><br><span class="line">        <span class="comment">// 因为在一次循环中，i相当于是固定不动的，所以此时j回退</span></span><br><span class="line">        <span class="comment">// j回退到next[j - 1]指向的位置，即遇见冲突，就看next数组（即前缀表）的前一位</span></span><br><span class="line">        <span class="comment">// 不止回退一步，而要连续回退，不能写if，而要写while</span></span><br><span class="line">        <span class="keyword">while</span> ( j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) j = next[j - <span class="number">1</span>]; <span class="comment">// 因为要求j - 1 &gt;= 0，因此要求j &gt; 0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理前后缀相同的情况</span></span><br><span class="line">        <span class="comment">// j代表着i之前（包括i）的子串的最长相等前后缀的长度</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j]) j ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新next数组，在其中存储i之前（包括i）的子串的最长相等前后缀的长度</span></span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="模拟运行过程"><a href="#模拟运行过程" class="headerlink" title="模拟运行过程"></a>模拟运行过程</h4><p>当j指向s[1]，i指向s[2]时，前后缀不匹配，此时next[j - 1] = next[0] = 0，j回退到s[0]，再次比较前后缀是否匹配，发现仍不相同，此时j无法继续回退，我们就更新next数组的值，next[2] = 0，这就代表i = 2之前包括i的子串的最长相等前后缀为0，这与表格中的结果相同。此时i后移一位，指向s[3]，有s[3] == s[0]，j ++，j = 1，next[3] = 1，说明aaba的最长相等前后缀长度是1，这与表格中的结果相同。进入下一轮循环，i = 4，同理。最终用getNext函数完成了对next数组的求值。</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>用上述函数，求得了next数组，即前缀表。</p>
<h3 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h3><p>求next数组的代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入的参数：next数组，我们需要对其进行赋值，模式串s</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(vector&lt;<span class="type">int</span>&gt; next, string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">// 前缀从0开始</span></span><br><span class="line">    <span class="type">int</span> next[N]; </span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// next数组初始位置为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 比较前后缀所对应的字符是否相等，故i从1开始，这样i和j才能进行比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ( j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) j = next[j - <span class="number">1</span>]; <span class="comment">// 因为要求j - 1 &gt;= 0，因此要求j &gt; 0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j]) j ++ ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新next数组，在其中存储i之前（包括i）的子串的最长相等前后缀的长度</span></span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用next数组做匹配的代码（文本串s，模式串t）：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j = <span class="number">0</span>; <span class="comment">// 因为next数组里记录的起始位置为0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// i从0开始，遍历文本串</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s[i] != t[j]) &#123; <span class="comment">// 不匹配, j - 1 &gt;= 0 =&gt; j &gt; 0</span></span><br><span class="line">        j = next[j - <span class="number">1</span>]; <span class="comment">// j 寻找之前匹配的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[i] == t[j]) &#123; <span class="comment">// 匹配，j和i同时向后移动</span></span><br><span class="line">        j++; <span class="comment">// i的增加在for循环里</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// j指向了模式串t的末尾，那么就说明模式串t完全匹配文本串s里的某个子串了</span></span><br><span class="line">    <span class="keyword">if</span> (j == t.<span class="built_in">size</span>()) &#123; <span class="comment">// 文本串s里出现了模式串t</span></span><br><span class="line">        <span class="comment">// 返回当前在文本串匹配模式串的位置i-模式串的长度 + 1，就是文本串字符串中出现模式串的第一个位置（位置从0开始）</span></span><br><span class="line">        <span class="keyword">return</span> (i - t.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>完整代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span>* next, <span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 特殊情况，模式串长度为0，则返回0，本处是一个易错点</span></span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义next数组</span></span><br><span class="line">        <span class="type">int</span> next[needle.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="comment">// 填充next数组</span></span><br><span class="line">        <span class="built_in">getNext</span>(next, needle);</span><br><span class="line">        <span class="comment">// 用next数组做匹配</span></span><br><span class="line">        <span class="comment">// j指向模式串，i指向文本串</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == needle.<span class="built_in">size</span>() ) &#123;</span><br><span class="line">                <span class="keyword">return</span> (i - needle.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模式串匹配不上文本串，则返回-1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>n为文本串长度，m为模式串长度</p>
<ul>
<li>时间复杂度: 生成next数组，时间复杂度是O(m)；根据前缀表不断调整匹配的位置，可以看出匹配的过程是O(n)。所以总共的时间复杂度为O(n + m)</li>
<li>空间复杂度: 开辟空间用于存储next数组，即模式串的前缀表，因此是O(m)</li>
</ul>
<h3 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459.重复的子字符串"></a>459.重复的子字符串</h3><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><p>枚举所有的子串，看能否构成字符串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 子串结束位置</span><br><span class="line">	<span class="keyword">for</span> 子串与主串比较</span><br></pre></td></tr></table></figure>
<p>时间复杂度O(n^2)。目标子串的开始位置必然是主串最前面的元素，因此只需要枚举子串的结束位置即可。</p>
<h4 id="移动匹配"><a href="#移动匹配" class="headerlink" title="移动匹配"></a>移动匹配</h4><p>设一个可由重复的子串构成的字符串为s，那么两个s拼接起来，前一个s的后半部分和后一个s的前半部分又可以构成一个新的字符串s。s由重复子串构成的判据：两个s相加起来，若其中出现了s，那么s就是由重复子串构成的。</p>
<p>注意：在(s + s)中去搜索s时，一定要把(s + s)的首元素和尾元素删去。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string ss = s + s;</span><br><span class="line">        ss.<span class="built_in">erase</span>(ss.<span class="built_in">begin</span>());</span><br><span class="line">        ss.<span class="built_in">erase</span>(ss.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// string::npos 是 std::string 类型的一个静态成员常量，表示字符串中不存在匹配的位置。在 find() 函数中，如果没有找到匹配的子串，则返回 string::npos。这个值通常是一个很大的无符号整数，表示找不到匹配的位置。</span></span><br><span class="line">        <span class="keyword">if</span> (ss.<span class="built_in">find</span>(s) != string::npos)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>find函数的实现其实就是28. 实现strStr()。若用KMP实现find函数，那么时间复杂度是O(m + n)，find函数的其他实现方法时间复杂度大抵也是O(m + n)。</p>
<h4 id="KMP解法"><a href="#KMP解法" class="headerlink" title="KMP解法"></a>KMP解法</h4><p>KMP算法的应用场景：模式串是否在文本串中出现过，即上面的find函数的一种实现方式。</p>
<p>前缀：不包含尾字母，一定包含首字母的所有子串。<br>后缀：包含尾字母，不包含首字母的所有子串。</p>
<p>结论：若s由重复子串组成，那么它的最小重复单位就是它的最长相等前后缀不包含的那个子串。后缀不包含和前缀不包含的部分是相同的，都是最小重复子串。</p>
<p>举例：abababab，最长相等前缀是ababab，最长相等后缀是ababab，剩余的部分ab即为最小重复子串。<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220728205249.png" alt="图三"></p>
<p>推导：设原字符串是s，标出其下标；设最长相等前缀是t，最长相等后缀是f，也分别标出下标。利用最长相等前缀和最长相等后缀的下标之间的对应关系和最长相等前后缀和原字符串下标之间的对应关系推导即可。</p>
<p>实现：设s存在最小重复单位，len为s的长度，则<code>next[len - 1]</code>为s的最长相等前后缀的长度，最小重复单位的长度为：<code>len - next[len - 1]</code>，若该长度能被原字符串的长度整除：<code>len % (len - next[len - 1]) == 0</code>，那么return true。有如下代码：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 求next数组</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getNext</span> <span class="params">(<span class="type">int</span>* next, <span class="type">const</span> string&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="comment">// 处理前后缀不相同的情况</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理前后缀相同的情况</span></span><br><span class="line">            <span class="keyword">if</span>(s[i] == s[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新next数组</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span> <span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> next[s.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="built_in">getNext</span>(next, s);</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 核心代码</span></span><br><span class="line">        <span class="keyword">if</span> (next[len - <span class="number">1</span>] != <span class="number">0</span> &amp;&amp; len % (len - (next[len - <span class="number">1</span>] )) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><h3 id="28-实现-strStr-1"><a href="#28-实现-strStr-1" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h3><p>直接听卡尔讲，尝试去理解，不要求独立写出代码。</p>
<h3 id="459-重复的子字符串-1"><a href="#459-重复的子字符串-1" class="headerlink" title="459.重复的子字符串"></a>459.重复的子字符串</h3><p>直接听卡尔讲，尝试去理解，不要求独立写出代码。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="28-实现-strStr-2"><a href="#28-实现-strStr-2" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h3><p>因为KMP算法很难，大家别奢求一次就把kmp全理解了，大家刚学KMP一定会有各种各样的疑问，先留着，别期望立刻啃明白，第一遍了解大概思路，二刷的时候，再看KMP会懂很多。或者说大家可以放弃一刷可以不看KMP，今天来回顾一下之前的算法题目就可以。</p>
<p>因为大家算法能力还没到，细扣很难的算法，会把自己绕进去，就算别人给解释，只会激发出更多的问题和疑惑。所以大家先了解大体过程，知道这么回事， 等自己有算法基础和思维了，在看多看几遍视频，慢慢就理解了。</p>
<h3 id="459-重复的子字符串-2"><a href="#459-重复的子字符串-2" class="headerlink" title="459.重复的子字符串"></a>459.重复的子字符串</h3><p>本题算是KMP算法的一个应用，不过对KMP了解不够熟练的话，理解本题就难很多。 </p>
<p>建议是 <strong>KMP和本题，一刷的时候 ，可以适当放过，了解怎么回事就行，二刷的时候再来硬啃</strong></p>
<h2 id="心得与备忘录"><a href="#心得与备忘录" class="headerlink" title="心得与备忘录"></a>心得与备忘录</h2><h3 id="28-实现-strStr-3"><a href="#28-实现-strStr-3" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h3><ol>
<li>我觉得KMP算法很想一种特殊的双指针算法。一个指针i用于遍历文本串，另一个指针j用于根据next数组的指引在模式串中移动。这种双指针算法可以把时间复杂度从暴力算法的O(n * m)优化为O(n + m)。</li>
<li>代码分为独立的两部分，第一部分是求next数组（即前缀表），第二部分是同时在两个字符串中移动指针并使用next数组。</li>
<li>当模式串为空时，应当返回0。因为空字符串被认为是任何字符串的子串，所以文本串中最开始与模式串匹配的字符的索引就是0。如果文本串中不存在与之匹配的模式串，则返回 -1。</li>
</ol>
<h3 id="459-重复的子字符串-3"><a href="#459-重复的子字符串-3" class="headerlink" title="459.重复的子字符串"></a>459.重复的子字符串</h3><ol>
<li>本题有两种解法：移动匹配和KMP解法。如果忘记了KMP算法的next数组怎么写，可以使用移动匹配方法（最难写的KMP部分可以用find函数来代劳）。</li>
<li>注意string中find函数的用法：在 find() 函数中，如果没有找到匹配的子串，则返回 string::npos。</li>
<li>本题的KMP解法的关键在于结论：若s由重复子串组成，那么它的最小重复单位就是它的最长相等前后缀不包含的那个子串。</li>
</ol>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><h3 id="字符串总结"><a href="#字符串总结" class="headerlink" title="字符串总结"></a>字符串总结</h3><p>常见题型和常用方法：</p>
<ol>
<li>花式反转字符串（整体&amp;局部反转，有时还要搭配双指针算法删除空格）</li>
<li>后续处理字符串</li>
<li>KMP算法（匹配模式串和文本串）</li>
<li>移动匹配（核心也是KMP算法，只不过核心由库函数find实现）</li>
</ol>
<p>小知识：</p>
<ol>
<li>substr，split，reverse, erase这四个库函数的时间复杂度都是O(n)，在循环中使用会使得程序的时间复杂度达到O(n^2)。此时需要双指针算法等进行优化。</li>
<li>字符串本质为字符数组，数据结构基本等用于普通数组，因此普通数组中常用的双指针算法也常用于字符串中。</li>
</ol>
<h3 id="双指针总结"><a href="#双指针总结" class="headerlink" title="双指针总结"></a>双指针总结</h3><p>双指针应用于：</p>
<ol>
<li>数组：移除元素</li>
<li>字符串：反转字符串、替换数字、翻转字符串里的单词</li>
<li>链表：反转链表、环形链表II</li>
<li><p>哈希表章节：三数之和、四数之和，两数之和若要求返回两数的值而非索引，也可以用双指针做，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res; <span class="comment">// 存储结果</span></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 先排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] + nums[right] &gt; target) right -- ;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] &lt; target) left ++ ;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;nums[left], nums[right]&#125;); <span class="comment">// 收获答案</span></span><br><span class="line">            <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left ++ ;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right -- ;</span><br><span class="line">            <span class="comment">// 寻找新的答案</span></span><br><span class="line">            left ++ ;</span><br><span class="line">            right -- ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码本质上就是三数之和、四数之和的一部分（for循环中的while循环）。相比于两数之和的哈希写法，新增了值去重的功能。</p>
<p>双指针的题目中，以三数、四数之和以及反转链表最容易写错，一定要多复习。三数、四数之和的易错点在于剪枝、去重和求四数之和时的int类型变量的溢出。反转链表的易错点在于搞错了tmp, cur-&gt;next, prev和cur更新的先后顺序。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>算法（字符串）</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Leetcode</tag>
        <tag>C++</tag>
        <tag>总结</tag>
        <tag>KMP算法</tag>
        <tag>find函数</tag>
        <tag>移动匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Project Summary</title>
    <url>/2024/01/21/Django-Project-Summary/</url>
    <content><![CDATA[<h1 id="Django项目总结"><a href="#Django项目总结" class="headerlink" title="Django项目总结"></a>Django项目总结</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>Game based on Django framework, developed by yifanChen</p>
<h3 id="Website"><a href="#Website" class="headerlink" title="Website"></a>Website</h3><p><a href="https://app5894.acapp.acwing.com.cn/">https://app5894.acapp.acwing.com.cn/</a></p>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p><a href="https://github.com/yfchenkeepgoing/Django_app">https://github.com/yfchenkeepgoing/Django_app</a></p>
<h3 id="Gameplay"><a href="#Gameplay" class="headerlink" title="Gameplay"></a>Gameplay</h3><ol>
<li>Right-click to move</li>
<li>Left-click plus ‘Q’ for the skill: Fireball, with a cooldown of 3 seconds</li>
<li>Left-click plus ‘F’ for the skill: Flash, with a cooldown of 5 seconds</li>
<li>In multiplayer mode, the winning player gains 10 points, and the losing player loses 5 points</li>
</ol>
<h3 id="Technology-Stack"><a href="#Technology-Stack" class="headerlink" title="Technology Stack"></a>Technology Stack</h3><ol>
<li>Frontend: JQuery</li>
<li>Backend: Django</li>
<li>Database: SQLite, Redis</li>
<li>Network Protocols: HTTPS, WSS</li>
<li>RPC: Thrift</li>
<li>Authorization Protocol: OAuth</li>
<li>Authentication: JWT</li>
</ol>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ol>
<li>Complete menu interface and game interface</li>
<li>Frontend and backend separation, with AcApp and Web versions on the frontend</li>
<li>Deployed with Nginx to interface with the AcApp</li>
<li>Comprehensive account system, username and password login, and one-click login with AcWing &amp; GitHub OAuth</li>
<li>Online multiplayer and chat system implemented via WSS protocol</li>
<li>Matchmaking system implemented through Thrift service</li>
<li>Cross-origin issues resolved through Rest Framework and JWT authentication, achieving complete frontend-backend separation</li>
<li>The ranking board displays the top ten players ranked by score</li>
</ol>
<h2 id="Django项目的框架"><a href="#Django项目的框架" class="headerlink" title="Django项目的框架"></a>Django项目的框架</h2><p>一个Django项目，大致由以下六部分组成：</p>
<ol>
<li>templates目录：管理html文件</li>
<li>urls目录：管理路由，即链接与函数的对应关系，即每个链接交给哪个函数处理的信息，存储在urls文件夹中。</li>
<li>views目录：视图，管理http函数（函数实现在views目录中）</li>
<li>models目录：管理数据库数据。</li>
<li>consumers目录：管理websocket函数（views管理http函数，即负责单向连接的函数；consumers管理双向连接的函数，比如联机对战和聊天的逻辑）</li>
<li>static目录：管理静态文件，比如：</li>
</ol>
<ul>
<li>css文件：对象的格式（网页每部分的格式），比如位置、长宽、颜色、背景、字体大小等</li>
<li>js：对象的逻辑（项目的核心），比如对象的创建与销毁、事件函数、移动、变色等，渲染html也会在js部分（前端）</li>
<li>image：图片</li>
<li>audio：声音</li>
</ul>
<p>urls文件夹、views文件夹、models文件夹和consumers文件夹都由python文件组成，如果想通过import将文件导入，则需要在文件夹下创建 <code>__init__.py</code>文件（即索引文件，内容为空即可）。在所有python文件夹中都需要创建这样的函数，否则在import时就无法进去，会报错。</p>
<h2 id="项目核心逻辑"><a href="#项目核心逻辑" class="headerlink" title="项目核心逻辑"></a>项目核心逻辑</h2><p>本项目由于是一个小游戏，因此前端的js代码占比较大。游戏单人模式的实现纯粹由前端完成，我用js代码实现了一个简易的游戏引擎。游戏的单人模式不需要前后端交互。</p>
<p>需要前后端交互的部分有：</p>
<ol>
<li>注册与登录：涉及到写入、读取、查询数据库</li>
<li>acwing和GitHub一键登录：即OAuth授权登录</li>
<li>实现联机对战和聊天系统：涉及到在多名玩家之间同步五个事件（函数）：create_player, move_to, shoot_fireball, attack, message。前四个用于实现联机对战，最后一个用于实现聊天系统。</li>
<li>Rest Framework与JWT身份验证：是对第一点和第二点的补充。</li>
</ol>
<ul>
<li>JWT（json web token）相比于django自带的登录验证方式（通过session_id）安全性更高。</li>
<li>方便实现真正意义上的前后端分离，即后端只需要提供实现好的api给前端调用，而Rest Framework为这些api的调试提供了可视化界面。</li>
<li>JWT可以解决跨域产生的问题。</li>
<li>可以使用http的四大类请求方法：get, post, delete, put，而不像之前仅仅使用get方法，这又提高了令牌的安全性。</li>
</ul>
<p>纯后端的部分只有匹配系统的实现。匹配系统的实现涉及到两个后端（即django web server和match system）之间的通信，匹配系统本身涉及到多线程和锁等方面的知识。</p>
<p>我认为本项目的重点主要在于前后端交互的部分，前后端交互其实有一套统一的范式：先在views中实现后端的函数；然后在urls中为后端的函数定义url链接；再在前端代码中利用ajax技术通过url获得后端传来的数据（前后端一般以json的格式传递数据）；最后通过前端使用或展示数据。如果给用户设计了一套通过点击鼠标或者使用键盘向后端请求数据的模式，那么还需要在前端进行按键索引和绑定监听函数等操作。</p>
<h2 id="改进项目"><a href="#改进项目" class="headerlink" title="改进项目"></a>改进项目</h2><ol>
<li>使用功能更强大的前端框架，比如Vue或者React，取代简单的JQuey。</li>
<li>使用更多种类型的数据库，比如关系型数据库MySQL，文档数据库MongoDB，对象存储服务等等。</li>
<li>使用另外几种实现前后端通信的技术取代ajax，比如Fetch API，Server-Sent Events (SSE)，GraphQL和WebRTC，以提高系统的性能。</li>
<li>学习并尝试使用Springboot框架和Go语言的后端框架。</li>
<li>使用k8s来自动化部署、扩展和管理容器化应用程序。</li>
</ol>
<h2 id="漫谈"><a href="#漫谈" class="headerlink" title="漫谈"></a>漫谈</h2><h3 id="后端的主要分类"><a href="#后端的主要分类" class="headerlink" title="后端的主要分类"></a>后端的主要分类</h3><p>算法与推荐系统、开发各种服务、数据库</p>
<h3 id="对于实现客户端与服务器之间的通信功能的技术的选择"><a href="#对于实现客户端与服务器之间的通信功能的技术的选择" class="headerlink" title="对于实现客户端与服务器之间的通信功能的技术的选择"></a>对于实现客户端与服务器之间的通信功能的技术的选择</h3><p>除了AJAX，现代Web开发中还有几种其他技术可以实现类似的客户端与服务器之间的通信功能。一些技术在特定场景下比AJAX更高效。以下是一些常用的技术：</p>
<ol>
<li><strong>Fetch API</strong>： Fetch API提供了一种更简洁和强大的方式来发起网络请求。它基于Promise，使得写异步代码更加简洁和直观。Fetch API是AJAX的现代替代方案，被广泛支持和使用。</li>
<li><strong>WebSocket</strong>： WebSocket提供了全双工通信渠道，使得客户端和服务器可以实时、双向地通信。它非常适用于需要频繁和即时数据更新的应用，如在线游戏、聊天应用和实时数据流。</li>
<li><strong>Server-Sent Events (SSE)</strong>： SSE允许服务器主动向客户端发送新数据。它是单向的，只有服务器可以发送消息给客户端。SSE适合实现如股票行情、新闻订阅等场景，其中服务器定期推送更新。</li>
<li><strong>GraphQL</strong>： GraphQL是一种数据查询和操作语言，它允许客户端以更灵活的方式请求数据。与REST相比，GraphQL可以减少数据传输量，因为它允许客户端精确指定所需的数据。</li>
<li><strong>WebRTC</strong>： WebRTC（Web Real-Time Communication）允许在不需要安装插件的情况下在Web应用中实现实时通信功能，常用于视频聊天和点对点数据共享。</li>
</ol>
<p>每种技术都有其特定的应用场景和优势。选择哪一种技术取决于应用的具体需求：</p>
<ul>
<li>对于简单的异步数据请求，AJAX和Fetch API都是不错的选择。</li>
<li>对于需要高实时性的应用，WebSocket或WebRTC可能更合适。</li>
<li>对于服务器主动推送数据的场景，SSE是一个好的选择。</li>
<li>对于需要更灵活数据交互的场景，GraphQL提供了更好的解决方案。</li>
</ul>
<p>在性能方面，WebSocket和WebRTC通常在需要频繁和快速通信的场景下比AJAX更高效，因为它们建立了持久的连接，而不是像AJAX那样为每个请求创建新的连接。</p>
<h3 id="如何使用MySQL，MongoDB，对象存储服务等外置的数据库（它们不像sqlite，不集成于后端框架内）"><a href="#如何使用MySQL，MongoDB，对象存储服务等外置的数据库（它们不像sqlite，不集成于后端框架内）" class="headerlink" title="如何使用MySQL，MongoDB，对象存储服务等外置的数据库（它们不像sqlite，不集成于后端框架内）"></a>如何使用MySQL，MongoDB，对象存储服务等外置的数据库（它们不像sqlite，不集成于后端框架内）</h3><ul>
<li>租一台数据库服务器</li>
<li>在框架中负责数据库的部分配置数据库服务器的连接/登录</li>
<li>下载该框架下使用该种数据库的包</li>
<li>在框架中负责数据库的部分调用包中的api完成对数据库的各种操作，比如读、写、删除等。</li>
</ul>
<p>在 Django 中，通常不需要直接使用 SQL 语句来操作 MySQL 数据库，因为 Django 提供了一个强大的 ORM（对象关系映射）系统，允许你通过 Python 代码来操作数据库。这意味着你可以使用 Django 的模型和查询 API 来查询和操作数据，而无需直接编写 SQL 语句。</p>
<p>Django 本身不直接支持 MongoDB，因为它是一个 NoSQL 数据库，与 Django 的 ORM 系统设计理念不同。如果你想在 Django 项目中使用 MongoDB，可以采取以下方法：</p>
<ul>
<li>使用 Djongo： Djongo 是一个将 Django ORM 映射到 MongoDB 的工具。通过 Djongo，你可以在一定程度上使用 Django ORM 的风格来操作 MongoDB。</li>
<li>使用 PyMongo： PyMongo 是 MongoDB 的官方 Python 驱动程序。使用 PyMongo，你可以直接以 Python 代码与 MongoDB 交互，但这意味着你需要手动编写数据库操作逻辑，而不是使用 Django ORM。</li>
</ul>
<p>对于对象存储服务（如 Amazon S3），通常使用的是 RESTful API 而非传统的数据库查询语言。在 Django 项目中使用对象存储通常涉及以下步骤：</p>
<ul>
<li>选择合适的库： 例如，对于 Amazon S3，你可以使用 boto3，这是 AWS 的官方 Python SDK。</li>
<li>进行配置和认证： 通常需要设置认证凭据和相关配置。</li>
<li>使用 SDK 提供的 API： 使用 SDK 提供的方法来上传、下载、列出文件等。</li>
</ul>
<h3 id="JWT可以存放在内存、local-storage和cookie中，这三个存放地各自有优缺点"><a href="#JWT可以存放在内存、local-storage和cookie中，这三个存放地各自有优缺点" class="headerlink" title="JWT可以存放在内存、local storage和cookie中，这三个存放地各自有优缺点"></a>JWT可以存放在内存、local storage和cookie中，这三个存放地各自有优缺点</h3><p>Cookie：<br>优点：自动由浏览器管理，并且可以设置为HttpOnly（无法通过JavaScript访问，增加安全性），支持跨域访问控制（SameSite属性）。<br>缺点：容易受到CSRF（跨站请求伪造）攻击，尽管可以通过适当的防范措施（如使用CSRF Token）来缓解。</p>
<p>LocalStorage：<br>优点：易于使用，可以在浏览器会话间持久存储。<br>缺点：容易受到XSS（跨站脚本攻击）攻击，因为恶意脚本可以访问LocalStorage并窃取令牌。</p>
<p>内存（JavaScript变量）：<br>优点：在浏览器关闭时自动清除，不容易受到XSS攻击（只要不将令牌暴露给恶意脚本）。<br>缺点：不持久，用户刷新页面或关闭浏览器时会丢失，可能需要重新认证。</p>
<p>最佳实践：<br>安全性考虑：通常推荐将JWT存储在HttpOnly的Cookie中，因为这样可以防止JavaScript访问令牌，从而减少XSS攻击的风险。</p>
<p>CSRF防范：如果使用Cookie，应结合CSRF保护机制。</p>
<p>易用性：如果需要在会话间持久保存用户的登录状态，LocalStorage可能更为方便。但是，务必注意XSS攻击的风险，并采取适当的安全措施。</p>
<p>短期使用：对于需要高安全性且可接受在会话结束后用户需要重新登录的场景，可以考虑仅将JWT存储在内存中。</p>
<p>在实践中，选择哪种方式取决于应用的安全需求、用户体验需求以及开发者对相关安全风险的管理能力。在处理任何形式的认证信息时，安全总是首要考虑的因素。<strong>在本项目中，出于安全性和短期使用的考量，我将JWT存储在了内存，即js变量中</strong>。如果没有明确地将JWT存储在Local Storage或Cookie中，那么它们就是存储在内存中。这意味着令牌只在当前页面会话中有效，一旦页面被关闭或刷新，令牌就会丢失。</p>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>Backend</tag>
        <tag>Django</tag>
        <tag>Frontend</tag>
        <tag>JQuery</tag>
        <tag>Ajax</tag>
        <tag>Database</tag>
        <tag>SQLite</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Experiences of OAs</title>
    <url>/2024/02/27/Experiences-of-OAs/</url>
    <content><![CDATA[<h2 id="Amazon-SDE-OA"><a href="#Amazon-SDE-OA" class="headerlink" title="Amazon SDE OA"></a>Amazon SDE OA</h2><ol>
<li>题目不难，简单的算法</li>
<li>第二题涉及到链表的增加头、尾节点和删去头节点，但用最简单直接的做法会超时</li>
<li>第二题的优化做法没有完全实现（出现报错），导致第二题没有完美地做出来，应该会被拒</li>
<li>时间一共70分钟，乍一看很充裕，但是如果碰到要优化的地方，时间就不够用了，因此下次做OA一定要做快一些，留出充足的时间给可能需要的优化和debug。</li>
</ol>
]]></content>
      <categories>
        <category>找工记录</category>
      </categories>
      <tags>
        <tag>OA</tag>
        <tag>经验与教训</tag>
      </tags>
  </entry>
  <entry>
    <title>Full Stack Netflix Clone</title>
    <url>/2024/02/22/Full-Stack-Netflix-Clone/</url>
    <content><![CDATA[<h1 id="Netflix-Clone"><a href="#Netflix-Clone" class="headerlink" title="Netflix Clone"></a>Netflix Clone</h1><h2 id="tech-stack"><a href="#tech-stack" class="headerlink" title="tech stack"></a>tech stack</h2><ul>
<li>Frontend: React</li>
<li>Server-side Rendering: Next.js</li>
<li>Styling: Tailwind CSS</li>
<li>Data abstraction layer: Prisma</li>
<li>Storage: MongoDB</li>
<li>Authentication: NextAuth</li>
<li>Deploy: Vercel</li>
<li>Typescript</li>
<li>the entire website fully</li>
</ul>
<p>The entire website fully responsive across all devices.</p>
<h2 id="function-overview"><a href="#function-overview" class="headerlink" title="function overview"></a>function overview</h2><p>credential login: username + password<br>profile: automatically generated once we register<br>homepage: loaded with a random movie-billboard<br>movies: load from database<br>favourites: add movies as favourites<br>botton:  shows more information about the movie<br>play the movie<br>Google oauth login</p>
<p>How to initialize next.js and Tailwind which is going to be crucial for our styling.</p>
<h2 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h2><h3 id="create-project"><a href="#create-project" class="headerlink" title="create project"></a>create project</h3><p>terminal:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-next-app --typescript</span><br></pre></td></tr></table></figure></p>
<p>set everything as default</p>
<p>open folder netflix-clone, enter command:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p>
<p>The website is running on: <a href="http://localhost:1689/">http://localhost:1689/</a></p>
<p>clean up the project:<br>remove pages/_document.tsx<br>remove everything in pages/index.tsx except the main function:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Netflix Clone<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>remove all the content in styles/globals.css. Get a white page with Netflix Clone.</p>
<p>add <code>test.tsx</code> in pages folder. Add the below content in <code>test.tsx</code><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyPage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello New Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyPage</span>;</span><br></pre></td></tr></table></figure></p>
<p>I can visit Hello New Page in <a href="http://localhost:1689/test">http://localhost:1689/test</a>.<br>Delete <code>test.tsx</code>, it is just a demonstration of how easy it is to use Next.js.</p>
<h3 id="setup-tailwind"><a href="#setup-tailwind" class="headerlink" title="setup tailwind"></a>setup tailwind</h3><p>tailwind tutorial: <a href="https://tailwindcss.com/docs/guides/nextjs">https://tailwindcss.com/docs/guides/nextjs</a></p>
<p>run the following commands in terminal:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure></p>
<p>Now we have <code>tailwind.config.js</code> and <code>postcss.config.js</code>. Open <code>tailwind.config.js</code> and write the below code (according to tailwind tutorial above):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [</span><br><span class="line">    <span class="string">&quot;./app/**/*.&#123;js,ts,jsx,tsx&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./pages/**/*.&#123;js,ts,jsx,tsx&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./components/**/*.&#123;js,ts,jsx,tsx&#125;&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Write code in <code>styles/globals.css</code> to import tailwind styles:<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure></p>
<p>enter the command <code>npm run dev</code> again and we can see a different web page, because the content in <code>globals.css</code> reset the css.</p>
<p>Try to change the color of netflix clone to green in the web page, just write the following code in <code>index.tsx</code>:<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;text-2xl text-green-500&quot;</span>&gt;</span>Netflix Clone<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Auth-Screen-UI"><a href="#Auth-Screen-UI" class="headerlink" title="Auth Screen UI"></a>Auth Screen UI</h2><p>In styles/globals.css, write:<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="keyword">@apply</span> bg-zinc-<span class="number">900</span> h-full overflow-x-hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>the web page turned to black. Add some code in globals.css:<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#__next</span> &#123;</span><br><span class="line">    <span class="keyword">@apply</span> h-full;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="keyword">@apply</span> h-full;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>create <code>images</code> folder in <code>public</code> folder and download <code>hero.jpg</code> and <code>logo.png</code> from github repository.  </p>
<p>Create <code>auth.tsx</code> in pages. It is the auth page. Write the following code in it:<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Auth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// first div: add background pictures in auth page</span></span><br><span class="line">        <span class="comment">// second dic: make the picture a bit darker in the large screen</span></span><br><span class="line">        <span class="comment">// img: set logo (NETFLIX) className=&quot;h-12&quot; makes it smaller</span></span><br><span class="line">        <span class="comment">// third div: container</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative h-full w-full bg-[url(&#x27;/images/hero.jpg&#x27;)] bg-no-repeat bg-center bg-fixed bg-cover&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bg-black w-full h-full lg: bg-opacity-50&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&quot;px-12 py-5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">alt</span> = <span class="string">&quot;Logo&quot;</span> <span class="attr">className</span>=<span class="string">&quot;h-12&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex justify-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bg-black bg-opacity-70 px-16 py-16 self-center mt-2 lg: w-2/5 lg: max-w-md rounded-md w-full&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-4xl mb-8 font-semibold&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            Sign in</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col gap-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            </span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Auth</span>;</span><br></pre></td></tr></table></figure></p>
<p>create components folder and create <code>Input.tsx</code>. Write some codes in it:<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Input</span>;</span><br></pre></td></tr></table></figure></p>
<p>Now add the Input in <code>auth.tsx</code> :<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Input&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col gap-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>Now add some floating labels in <code>Input.tsx</code>:<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    block</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    rounded-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    px-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pt-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pb-1</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    bg-neutral-700</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    appearance-none</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    focus: outline-none</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    focus: ring-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    peer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">placeholder</span>=<span class="string">&quot; &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Input</span>;</span><br></pre></td></tr></table></figure></p>
<p>现在我们想在sign in之下的第一个输入框加上Email字样，当点击输入框时，Email变小，不点击输入框时，Email变大，这是一种浮动的特效。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// duration-150: duration for animation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">id</span> = <span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    block</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    rounded-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    px-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pt-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pb-1</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    bg-neutral-700</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    appearance-none</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    focus: outline-none</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    focus: ring-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    peer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">placeholder</span>=<span class="string">&quot; &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">label</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                absolute</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                text-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                text-zinc-400</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                duration-150 </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                transform</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                -translate-y-3</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                scale-75</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                top-4</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                z-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                origin-[0]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                left-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-placeholder-shown:scale-100</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-placeholder-shown:translate-y-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-focus:scale-75</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-focus:-translate-y-3   </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">htmlFor</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                Email</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Input</span>;</span><br></pre></td></tr></table></figure></p>
<p>接下来让输入框模块化。加入react的一些特性：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InputProps</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">onChange</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">type</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// duration-150: duration for animation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Input</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">InputProps</span>&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    id,</span></span></span><br><span class="line"><span class="params"><span class="function">    onChange,</span></span></span><br><span class="line"><span class="params"><span class="function">    value,</span></span></span><br><span class="line"><span class="params"><span class="function">    label,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">type</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">type</span>=<span class="string">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">id</span>=<span class="string">&#123;id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    block</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    rounded-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    px-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pt-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pb-1</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    bg-neutral-700</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    appearance-none</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    focus: outline-none</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    focus: ring-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    peer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">placeholder</span>=<span class="string">&quot; &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">label</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                absolute</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                text-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                text-zinc-400</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                duration-150 </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                transform</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                -translate-y-3</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                scale-75</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                top-4</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                z-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                origin-[0]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                left-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-placeholder-shown:scale-100</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-placeholder-shown:translate-y-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-focus:scale-75</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                peer-focus:-translate-y-3   </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">htmlFor</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;label&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Input</span>;</span><br></pre></td></tr></table></figure></p>
<p>此时发现auth.tsx报错，在input处加入以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Input</span></span><br><span class="line">    label=<span class="string">&quot;Email&quot;</span></span><br><span class="line">    onChange=&#123;<span class="function">() =&gt;</span> &#123;&#125;&#125;</span><br><span class="line">    id=<span class="string">&quot;email&quot;</span></span><br><span class="line">    <span class="keyword">type</span>=<span class="string">&quot;email&quot;</span></span><br><span class="line">    value=<span class="string">&quot;&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>我们发现网页上的输入框无法输入内容，在<code>auth.tsx</code>中加入以下代码来解决这个问题：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Input&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Auth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [email, setEmail] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    label=<span class="string">&quot;Email&quot;</span></span><br><span class="line">    onChange=&#123;<span class="function">(<span class="params">ev</span>) =&gt;</span> <span class="title function_">setEmail</span>(ev.<span class="property">target</span>.<span class="property">value</span>)&#125;</span><br><span class="line">    id=<span class="string">&quot;email&quot;</span></span><br><span class="line">    <span class="keyword">type</span>=<span class="string">&quot;email&quot;</span></span><br><span class="line">    value=&#123;email&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在就可以在网页端的输入框内打字了。然后将上述内容复制两次，制造出username和password的输入框。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> [password, setPassword] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">label</span>=<span class="string">&quot;Username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onChange</span>=<span class="string">&#123;(ev:</span> <span class="attr">any</span>) =&gt;</span> setName(ev.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">    id=&quot;name&quot;</span></span><br><span class="line"><span class="language-xml">    value=&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">label</span>=<span class="string">&quot;Password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onChange</span>=<span class="string">&#123;(ev:</span> <span class="attr">any</span>) =&gt;</span> setPassword(ev.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">    id=&quot;password&quot;</span></span><br><span class="line"><span class="language-xml">    type=&quot;password&quot;</span></span><br><span class="line"><span class="language-xml">    value=&#123;password&#125;</span></span><br><span class="line"><span class="language-xml">/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接下来写按钮login botton：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;button className=<span class="string">&quot;bg-red-600 py-3 text-white rounded-md w-full mt-10 hover:bg-red-700 transition&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">Login</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>
<p>产生了一个红色的按钮，点击按钮颜色会变深。</p>
<p>接着<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;p className=<span class="string">&quot;text-neutral-500 mt-12&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">First</span> time using <span class="title class_">Netflix</span>?</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;text-white ml-1 hover:underline cursor-pointer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Create account</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>接着在login和register之间产生一个跳转。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [variant, setVariant] = <span class="title function_">useState</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toggleVariant = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setVariant</span>(<span class="function">(<span class="params">currentVarient</span>) =&gt;</span> currentVarient === <span class="string">&#x27;login&#x27;</span> ? <span class="string">&#x27;register&#x27;</span>: <span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line">&lt;span onClick=&#123;toggleVariant&#125; className=<span class="string">&quot;text-white ml-1 hover:underline cursor-pointer&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">Create</span> account</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
<p>接着再将原本的login改为<code>&#123;variant === &#39;login&#39; ? &#39;Sign in&#39;: &#39;Register&#39;&#125;</code>。这样点击create account就会在sign in和register之间切换。由于在sign in时不需要看到username，而在register时要输入username，因此将username包裹在register中：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&#123;variant === <span class="string">&#x27;register&#x27;</span> &amp;&amp; (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">label</span>=<span class="string">&quot;Username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onChange</span>=<span class="string">&#123;(ev:</span> <span class="attr">any</span>) =&gt;</span> setName(ev.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">    id=&quot;name&quot;</span></span><br><span class="line"><span class="language-xml">    value=&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">/&gt;</span></span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着让按钮在sign in时显示为login，在register时显示为sign up。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;button className=<span class="string">&quot;bg-red-600 py-3 text-white rounded-md w-full mt-10 hover:bg-red-700 transition&quot;</span>&gt;</span><br><span class="line">    &#123;variant === <span class="string">&#x27;login&#x27;</span> ? <span class="string">&#x27;Login&#x27;</span>: <span class="string">&#x27;Sign up&#x27;</span>&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>
<p>接着让login界面中显示提示语：First time using Netflix. Create account。在register页面中显示提出语：Already have an account?Login.<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;p className=<span class="string">&quot;text-neutral-500 mt-12&quot;</span>&gt;</span><br><span class="line">    &#123;variant === <span class="string">&#x27;login&#x27;</span> ? <span class="string">&#x27;First time using Netflix?&#x27;</span> : <span class="string">&#x27;Already have an account?&#x27;</span>&#125;</span><br><span class="line">    &lt;span onClick=&#123;toggleVariant&#125; className=<span class="string">&quot;text-white ml-1 hover:underline cursor-pointer&quot;</span>&gt;</span><br><span class="line">        &#123;variant === <span class="string">&#x27;login&#x27;</span> ? <span class="string">&#x27;Create account&#x27;</span> : <span class="string">&#x27;Login&#x27;</span>&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="NextAuth-Prisma-Mongo-Setup"><a href="#NextAuth-Prisma-Mongo-Setup" class="headerlink" title="NextAuth, Prisma, Mongo Setup"></a>NextAuth, Prisma, Mongo Setup</h2><p>将上述登录注册的UI界面通过prisma连接到mongodb。先在vscode中安装扩展prisma，其可以帮助对prisma文件进行格式化和高亮。接着在终端输入命令：<code>npm install -D prisma</code></p>
<p>再输入命令：<code>npx prisma init</code>，本命令可以产生一个<code>schema.prisma</code>文件。将其中的数据库修改为mongodb:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">generator client &#123;</span><br><span class="line">  provider = &quot;prisma-client-js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datasource db &#123;</span><br><span class="line">  provider = &quot;mongodb&quot;</span><br><span class="line">  url      = env(&quot;DATABASE_URL&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着在终端输入：<code>npm install @prisma/client</code>。接着再创建新的文件夹lib。在其中创建<code>prismadb.ts</code>文件，写入以下代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaClient</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@prisma/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="variable language_">global</span>.<span class="property">prismadb</span> || <span class="keyword">new</span> <span class="title class_">PrismaClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) <span class="variable language_">global</span>.<span class="property">prismadb</span> = client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> client;</span><br></pre></td></tr></table></figure></p>
<p>next.js具有特性：hot reloading。每次代码改变时，我们的项目自动更新并重新运行。对prisma而言，每次会产生若干个PrismaClient实例，就会得到报错：已经有若干个Prisma Client正在运行。我们将PrismaClient存储在一个全局文件中，而全局文件并不会被hot reloading影响，因此就不会产生上面的报错。接着来解决prismadb标红的错误。</p>
<p>根目录下创建文件<code>global.d.ts</code>，在其中定义prismadb，写入以下内容：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaClient</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@prisma/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">namespace</span> globalThis &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="attr">prismadb</span>: <span class="title class_">PrismaClient</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着进入<code>schema.prisma</code>文件，填入DATABASE_URL。需要先进入.env文件，将其中的database url换成有效的url。在谷歌中搜索mongodb atlas，注册并登录。点击build a database。我的database的username是cyf，密码是20001017。IP地址点击add my current IP address即可。接着在overview页面点击connect，选择mongodb for vscode。复制它给出的URL并粘贴到.env文件中。需要将URL中的<code>&lt;password&gt;</code>替换为自己真实的密码。并在URL的末尾加上我的实际数据库的名字：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATABASE_URL=&quot;mongodb+srv://cyf:20001017@cluster0.38xordg.mongodb.net/Cluster0&quot;</span><br></pre></td></tr></table></figure></p>
<p>接着，在<code>schema.prisma</code>文件中一次性定义好所有的models（数据模型）。因为反复修改数据模型和运行项目可能会导致一些麻烦和报错。<code>schema.prisma</code>文件内容如下所示：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// This is your Prisma schema file,</span><br><span class="line">// learn more about it in the docs: https://pris.ly/d/prisma-schema</span><br><span class="line"></span><br><span class="line">// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?</span><br><span class="line">// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init</span><br><span class="line"></span><br><span class="line">generator client &#123;</span><br><span class="line">  provider = &quot;prisma-client-js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datasource db &#123;</span><br><span class="line">  provider = &quot;mongodb&quot;</span><br><span class="line">  url      = env(&quot;DATABASE_URL&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model User &#123;</span><br><span class="line">  id String @id @default(auto()) @map(&quot;_id&quot;) @db.ObjectId // 每个model都需要这一行，因为mongodb的model一定需要定义id</span><br><span class="line">  name String</span><br><span class="line">  image String? // ?表示可选，可要可不要</span><br><span class="line">  email String? @unique // 非必须，可能用到oauth login</span><br><span class="line">  emailVerified DateTime?</span><br><span class="line">  hashedPassword String? // 密码登录所需要</span><br><span class="line">  createAt DateTime @default(now())</span><br><span class="line">  updateAt DateTime @updatedAt // 自动更新 更新时间</span><br><span class="line">  favoriteIds String[] @db.ObjectId // 用户最喜欢的电影</span><br><span class="line">  sessions Session[]</span><br><span class="line">  accounts Account[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用于Google Account或者GitHub Account</span><br><span class="line">model Account &#123;</span><br><span class="line">  id String @id @default(auto()) @map(&quot;_id&quot;) @db.ObjectId</span><br><span class="line">  userId String @db.ObjectId // account和userid之间的关系</span><br><span class="line">  type String</span><br><span class="line">  provider String</span><br><span class="line">  providerAccountId String</span><br><span class="line">  refresh_token String? @db.String</span><br><span class="line">  access_token String? @db.String</span><br><span class="line">  expires_at Int?</span><br><span class="line">  token_type String?</span><br><span class="line">  scope String?</span><br><span class="line">  id_token String? @db.String</span><br><span class="line">  session_state String?</span><br><span class="line"></span><br><span class="line">  // 将account model和user model之间通过userId连接, onDelate表示二者的删除是同步的(user被删除了，account也被删除)</span><br><span class="line">  user User @relation(fields: [userId], references: [id], onDelete: Cascade)</span><br><span class="line"></span><br><span class="line">  @@unique([provider, providerAccountId]) // 独一无二，不允许重复</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model Session &#123;</span><br><span class="line">  id String @id @default(auto()) @map(&quot;_id&quot;) @db.ObjectId</span><br><span class="line">  sessionToken String @unique</span><br><span class="line">  userId String @db.ObjectId</span><br><span class="line">  expires DateTime</span><br><span class="line"></span><br><span class="line">  user User @relation(fields: [userId], references: [id], onDelete: Cascade)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model VerificationToken &#123;</span><br><span class="line">  id String @id @default(auto()) @map(&quot;_id&quot;) @db.ObjectId</span><br><span class="line">  identifier String</span><br><span class="line">  token String @unique</span><br><span class="line">  expires DateTime</span><br><span class="line"></span><br><span class="line">  @@unique([identifier, token])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model Movie &#123;</span><br><span class="line">  id String @id @default(auto()) @map(&quot;_id&quot;) @db.ObjectId</span><br><span class="line">  title String</span><br><span class="line">  description String</span><br><span class="line">  videoUrl String</span><br><span class="line">  thumbnailUrl String // 缩略网址</span><br><span class="line">  genre String // 类型</span><br><span class="line">  duration String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着在终端运行命令：<code>npx prisma db push</code>，将<code>schema.prisma</code>文件中定义的数据模型上传到云端，在mongodb的网页端选择database-browse collections，即可看到定义的5个数据模型。这说明prisma已经成功和mongodb连接起来了。</p>
<p>接着进入pages/api/hello.ts，可以通过链接：<a href="http://localhost:1689/api/hello访问到其中的内容。删除hello.ts，新建`[...nextauth].ts`文件，其会被next">http://localhost:1689/api/hello访问到其中的内容。删除hello.ts，新建`[...nextauth].ts`文件，其会被next</a> app识别。我们在这个文件中写next auth的middleware。通过命令<code>npm install next-auth</code>安装next-auth。还需要运行命令：<code>npm install bcrypt</code>。这个包用于用户名密码登录。在<code>[...nextauth].ts</code>文件中写下以下的内容：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NextAuth</span> <span class="keyword">from</span> <span class="string">&#x27;next-auth&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Credentials</span> <span class="keyword">from</span> <span class="string">&#x27;next-auth/providers/credentials&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; compare &#125; <span class="keyword">from</span> <span class="string">&#x27;bcrypt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NextAuth</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">        <span class="title class_">Credentials</span>(&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;credentials&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Credentials&#x27;</span>,</span><br><span class="line">            <span class="attr">credentials</span>: &#123;</span><br><span class="line">                <span class="attr">email</span>: &#123;</span><br><span class="line">                    <span class="attr">label</span>: <span class="string">&#x27;Email&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">password</span>: &#123;</span><br><span class="line">                    <span class="attr">label</span>: <span class="string">&#x27;Password&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">async</span> <span class="title function_">authorize</span>(<span class="params">credentials</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!credentials?.<span class="property">email</span> || !credentials?.<span class="property">password</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Email and password required&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 通过email找到用户，需要import prismadb</span></span><br><span class="line">                <span class="keyword">const</span> user = <span class="keyword">await</span> prismadb.<span class="property">user</span>.<span class="title function_">findUnique</span>(&#123;</span><br><span class="line">                    <span class="attr">where</span>: &#123;</span><br><span class="line">                        <span class="attr">email</span>: credentials.<span class="property">email</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断找到的user是否存在</span></span><br><span class="line">                <span class="keyword">if</span> (!user || !user.<span class="property">hashedPassword</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Email does not exist&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断用户输入的密码是否正确</span></span><br><span class="line">                <span class="keyword">const</span> isCorrectPassword = <span class="keyword">await</span> <span class="title function_">compare</span>(</span><br><span class="line">                    credentials.<span class="property">password</span>, </span><br><span class="line">                    user.<span class="property">hashedPassword</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!isCorrectPassword) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Incorrect password&quot;</span>); </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> user; <span class="comment">// 用户密码输入正确，则返回由email找到的唯一user</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="attr">pages</span>: &#123;</span><br><span class="line">        <span class="attr">signIn</span>: <span class="string">&#x27;/auth&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// debug on</span></span><br><span class="line">    <span class="attr">debug</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">session</span>: &#123;</span><br><span class="line">        <span class="attr">strategy</span>: <span class="string">&#x27;jwt&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>在<code>.env</code>文件中加入以下两个环境变量：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NEXTAUTH_JWT_SECRET = &quot;NEXT-JWT-SECRET&quot;</span><br><span class="line">NEXTAUTH_SECRET = &quot;NEXT-SECRET&quot;</span><br></pre></td></tr></table></figure></p>
<p>在<code>[...nextauth].ts</code>文件中添加以下的内容：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">    <span class="attr">jwt</span>: &#123;</span><br><span class="line">        <span class="attr">secret</span>: process.<span class="property">env</span>.<span class="property">NEXTAUTH_JWT_SECRET</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">secret</span>: process.<span class="property">env</span>.<span class="property">NEXTAUTH_SECRET</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>接下来修复<code>bcrypt</code>标红的报错。在终端输入命令：<code>npm i -D @types/bcrypt</code>。安装了<code>bcrypt</code>后，不再标红报错。</p>
<p>进入<code>pages/auth.tsx</code>。在其中添加login和register的函数。首先通过命令行安装<code>axios</code>: <code>npm i axios</code>。然后在<code>auth.tsx</code>中引入<code>axios</code>并定义register函数：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register function</span></span><br><span class="line"><span class="keyword">const</span> register = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;, []); <span class="comment">// dependency: []</span></span><br></pre></td></tr></table></figure></p>
<p>接着写下完整的register函数：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// register function</span></span><br><span class="line"><span class="keyword">const</span> register = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/register&#x27;</span>, &#123;</span><br><span class="line">            email,</span><br><span class="line">            name,</span><br><span class="line">            password</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, []); <span class="comment">// dependency: []</span></span><br></pre></td></tr></table></figure></p>
<p>接着在<code>pages/api</code>中定义<code>register</code>。在<code>register.ts</code>中写下了如下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bcrypt <span class="keyword">from</span> <span class="string">&#x27;bcrypt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span>, <span class="title class_">NextApiResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> !== <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">405</span>).<span class="title function_">end</span>(); <span class="comment">// we only want to allow post calls to /api/register</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="comment">// try: extract some values from request.body</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; email, name, password &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if an email is already in use</span></span><br><span class="line">        <span class="keyword">const</span> existinguser = <span class="keyword">await</span> prismadb.<span class="property">user</span>.<span class="title function_">findUnique</span>(&#123;</span><br><span class="line">            <span class="attr">where</span>: &#123;</span><br><span class="line">                email,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// email in use, return Email taken</span></span><br><span class="line">        <span class="keyword">if</span> (existinguser) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">422</span>).<span class="title function_">json</span>(&#123;<span class="attr">error</span>: <span class="string">&#x27;Email taken&#x27;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hash the password</span></span><br><span class="line">        <span class="keyword">const</span> hashedPassword = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(password, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将user信息存入数据库</span></span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">await</span> prismadb.<span class="property">user</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                email,</span><br><span class="line">                name,</span><br><span class="line">                hashedPassword,</span><br><span class="line">                <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">emailVerified</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就完成了<code>/api/register</code>。在<code>auth.tsx</code>中填入dependency的具体内容：<code>[email, name, password]); // dependency in []</code>。</p>
<p>接着，我们需要在点击sign up按钮时呼叫<code>/api/register</code>。先不管按钮上写的是login还是register，将按钮统一绑定到register函数：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;register&#125; className=<span class="string">&quot;bg-red-600 py-3 text-white rounded-md w-full mt-10 hover:bg-red-700 transition&quot;</span>&gt;</span><br><span class="line">    &#123;variant === <span class="string">&#x27;login&#x27;</span> ? <span class="string">&#x27;Login&#x27;</span>: <span class="string">&#x27;Sign up&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>打开网页，F12打开调试模式，选择network，输入用户名、邮箱和密码，可以看到register函数被成功调用。接着打开mongodb atlas的网站，选择database-browse collections-user，可以看到其中添加了一条用户信息的数据，成功！到此，用户名密码注册部分完成了。</p>
<p>现在开始做Login部分。在<code>auth.tsx</code>中添加以下login函数：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// login function</span></span><br><span class="line"><span class="keyword">const</span> login = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 需要用到[..nextauth].ts中的Credentials</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">signIn</span>(<span class="string">&#x27;credentials&#x27;</span>, &#123;</span><br><span class="line">            email,</span><br><span class="line">            password,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">callbackUrl</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [email, password]); <span class="comment">// login only need email and password</span></span><br></pre></td></tr></table></figure></p>
<p>接着在按钮处调用login函数：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;variant === <span class="string">&#x27;login&#x27;</span> ? login : register&#125; className=<span class="string">&quot;bg-red-600 py-3 text-white rounded-md w-full mt-10 hover:bg-red-700 transition&quot;</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>这样就可以在点击login按钮时调用login函数，在点击sign up按钮时调用register函数。点击login按钮，网页并没有产生预期的跳转，打印出错误信息：Error: This action with HTTP GET is not supported by NextAuth.js。尝试修复这个问题。在api文件夹中再创建auth文件夹，将<code>[...nextauth].ts</code>文件拖拽到其中。然后这个问题就被修复了。接着继续在login函数中添加router：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// login function</span></span><br><span class="line"><span class="keyword">const</span> login = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 需要用到[..nextauth].ts中的Credentials</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">signIn</span>(<span class="string">&#x27;credentials&#x27;</span>, &#123;</span><br><span class="line">            email,</span><br><span class="line">            password,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">callbackUrl</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [email, password, router]); <span class="comment">// login only need email and password, and then we add router</span></span><br></pre></td></tr></table></figure></p>
<p>接着在register函数中添加login部分，一旦注册成功后就自动登录。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// register function</span></span><br><span class="line"><span class="keyword">const</span> register = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/register&#x27;</span>, &#123;</span><br><span class="line">            email,</span><br><span class="line">            name,</span><br><span class="line">            password</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">login</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [email, name, password, login]); <span class="comment">// dependency in []</span></span><br></pre></td></tr></table></figure></p>
<p>同时注意调整login和register函数的顺序，让login定义在register之前（因为register中需要调用login函数）。现在再次尝试输入邮箱和密码并点击login按钮，发现可以成功跳转到根目录。</p>
<h2 id="Google-and-Github-OAuth"><a href="#Google-and-Github-OAuth" class="headerlink" title="Google and Github OAuth"></a>Google and Github OAuth</h2><p>加入Google and Github OAuth非常简单。首先在终端中运行命令：<code>npm install react-icons</code>。通过这个包可以向项目中添加Google, Github和其他炫酷的icon。接下来写google和github一键登录的UI界面。在<code>auth.tsx</code>中加入以下代码。首先是引入react中包含icons的包，然后在login/sign up按钮下定义一个div，用于空出更大的空间。再定义一个div，用于存放按钮。在这个div中定义按钮的各种属性（居中、圆角等）。最后再通过<code>FcGoogle</code>引入Google的图标。接着，我们复制上面的代码，将图标改为Github。以上的代码如下所示：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FcGoogle</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-icons/fc&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FaGithub</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-icons/fa&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row items-center gap-4 mt-8 justify-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            w-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            h-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            bg-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            rounded-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            justify-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            hover:opacity-80</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FcGoogle</span> <span class="attr">size</span>=<span class="string">&#123;30&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            w-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            h-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            bg-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            rounded-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            justify-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            hover:opacity-80</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FaGithub</span> <span class="attr">size</span>=<span class="string">&#123;30&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>接着进入<code>.env</code>文件中增加一些环境变量。如下所示：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GITHUB_ID=</span><br><span class="line">GITHUB_SECRET=</span><br><span class="line"></span><br><span class="line">GOOGLE_CLIENT_ID=</span><br><span class="line">GOOGLE_CLIENT_SECRET=</span><br></pre></td></tr></table></figure></p>
<p>接着在<code>[...nextauth].ts</code>文件中添加包和GithubProvider、GoogleProvider。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">GithubProvider</span> <span class="keyword">from</span> <span class="string">&#x27;next-auth/providers/github&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GoogleProvider</span> <span class="keyword">from</span> <span class="string">&#x27;next-auth/providers/google&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">GithubProvider</span>(&#123;</span><br><span class="line">    <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">GITHUB_ID</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">GITHUB_SECRET</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="title class_">GoogleProvider</span>(&#123;</span><br><span class="line">    <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_ID</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">GOOGLE_CLIENT_SECRET</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p>
<p>接着执行命令：<code>npm install @next-auth/prisma-adapter</code>。接着在<code>[...nextauth].ts</code>文件中添加以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaAdapter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@next-auth/prisma-adapter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">adapter</span>: <span class="title class_">PrismaAdapter</span>(prismadb),</span><br></pre></td></tr></table></figure></p>
<p>接下来填入.env文件中的GITHUB_ID和GITHUB_SECRET。去到GITHUB-SETTINGS-DEVELOPER SETTINGS-OAUTH APPS-NEW OAUTH APP，填入以下内容：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Register a new OAuth application</span><br><span class="line">Application name</span><br><span class="line">netflix-clone</span><br><span class="line"></span><br><span class="line">Homepage URL</span><br><span class="line">http://localhost:1689</span><br><span class="line"></span><br><span class="line">Authorization callback URL</span><br><span class="line">http://localhost:1689</span><br></pre></td></tr></table></figure></p>
<p>接着点击register application，然后将生成的GITHUB_ID和GITHUB_SECRET复制到<code>.env</code>文件中。</p>
<p>现在我们在<code>auth.tsx</code>中给github一键登录写一个函数:<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">signIn</span>(<span class="string">&#x27;github&#x27;</span>, &#123; <span class="attr">callbackUrl</span>: <span class="string">&#x27;/&#x27;</span> &#125;)&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>并在<code>.env</code>文件中指定重定向URL的路径：<code>NEXTAUTH_URL=http://localhost:10564/</code></strong><br>进行上述操作后，github一键登录成功，一键登录成功后被导航回到了根目录。然后可以在mongodb的account中看到一条新的数据。本来应该在user中也看到一条新的数据，但我的user中没有github一键登录产生的新user的数据。这个问题在github的issues中有解释：<a href="https://github.com/AntonioErdeljac/next-netflix-tutorial/issues/13。这个问题应该不是一个问题，不用担心。">https://github.com/AntonioErdeljac/next-netflix-tutorial/issues/13。这个问题应该不是一个问题，不用担心。</a></p>
<p>现在开始完成google一键登录。相比于github，Google会更麻烦些。进入google cloud console: <a href="https://console.cloud.google.com/welcome?pli=1&amp;project=advance-proton-400620。新建项目并填入项目名称，点创建。选中该项目，搜索apis">https://console.cloud.google.com/welcome?pli=1&amp;project=advance-proton-400620。新建项目并填入项目名称，点创建。选中该项目，搜索apis</a> &amp; services。选择oauth权限请求页面，选择外部，点击创建。填入应用名称、用户支持电子邮件、开发者联系信息，然后保存并继续。然后一路点击保存并继续。点击凭据-创建凭据-创建 OAuth 客户端 ID。选择web应用-添加URL：<a href="http://localhost:10564/api/auth/callback/google。我们就可以得到client">http://localhost:10564/api/auth/callback/google。我们就可以得到client</a> ID和client secret。将它们复制到<code>.env</code>文件中。然后在<code>auth.tsx</code>中给google一键登录写一个函数:<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">signIn</span>(<span class="string">&#x27;google&#x27;</span>, &#123; <span class="attr">callbackUrl</span>: <span class="string">&#x27;/&#x27;</span> &#125;)&#125;</span><br></pre></td></tr></table></figure></p>
<p>在网页端尝试点击google一键登录，成功！</p>
<h2 id="Protecting-routes-Profiles-screen"><a href="#Protecting-routes-Profiles-screen" class="headerlink" title="Protecting routes, Profiles screen"></a>Protecting routes, Profiles screen</h2><p>如何通过授权登录保护client路径和api路径。在lib文件夹中创建<code>serverAuth.ts</code>。在其中写下如下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getSession &#125; <span class="keyword">from</span> <span class="string">&#x27;next-auth/react&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; error &#125; <span class="keyword">from</span> <span class="string">&#x27;console&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">serverAuth</span> = <span class="keyword">async</span> (<span class="params">req: NextApiRequest</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// fetch log in user session</span></span><br><span class="line">    <span class="keyword">const</span> session = <span class="keyword">await</span> <span class="title function_">getSession</span>(&#123; req &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use serverAuth in api controller</span></span><br><span class="line">    <span class="comment">// req parameter  will hold jwt token to get logged in user</span></span><br><span class="line">    <span class="comment">// use session to get other fields</span></span><br><span class="line">    <span class="keyword">if</span> (!session?.<span class="property">user</span>?.<span class="property">email</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not signed in&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过email找到不同的user</span></span><br><span class="line">    <span class="keyword">const</span> currentUser = <span class="keyword">await</span> prismadb.<span class="property">user</span>.<span class="title function_">findUnique</span>(&#123;</span><br><span class="line">        <span class="attr">where</span>: &#123;</span><br><span class="line">            <span class="attr">email</span>: session.<span class="property">user</span>.<span class="property">email</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无currentUser, 说明jwt token或者session不正确或者过期了</span></span><br><span class="line">    <span class="keyword">if</span> (!currentUser) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not signed in&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; currentUser &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> serverAuth;</span><br></pre></td></tr></table></figure></p>
<p>用上述文件可以在所有的api routes中检查我们是否登录。进入<code>pages/api</code>中，创建<code>current.ts</code>，在其中写上以下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span>, <span class="title class_">NextApiResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> serverAuth <span class="keyword">from</span> <span class="string">&#x27;@/lib/serverAuth&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">405</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; currentUser &#125; = <span class="keyword">await</span> <span class="title function_">serverAuth</span>(req); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(currentUser);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面开始写用于front end fetching的部分，在<code>libs/fetcher.ts</code>，在其中写下代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url: <span class="built_in">string</span></span>) =&gt; axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> fetcher;</span><br></pre></td></tr></table></figure></p>
<p>在前端写用于载入当前用户的代码。在根目录下新建hooks文件夹，在其中新建文件<code>useCurrentUser.ts</code>。然后在终端中运行命令：<code>npm install swr</code>。然后在<code>useCurrentUser.ts</code>中写入：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&#x27;swr&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fetcher <span class="keyword">from</span> <span class="string">&#x27;@/lib/fetcher&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// svr: versal developed package, which is good at fetching data</span></span><br><span class="line"><span class="comment">// If the data already exists, we are not going to fetch the data again</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCurrentUser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, error, isLoading, mutate &#125; = <span class="title function_">useSWR</span>(<span class="string">&#x27;/api/current&#x27;</span>, fetcher)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        data,</span><br><span class="line">        error,</span><br><span class="line">        isLoading,</span><br><span class="line">        mutate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCurrentUser;</span><br></pre></td></tr></table></figure></p>
<p>下面我们来展示如何保护client routes。我们想让用户在不登陆的情况下访问不到我们的网站。在<code>pages/index.tsx</code>中首先创建一个sign out按钮。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;button className=<span class="string">&quot;h-10 w-full bg-white&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">signOut</span>()&#125;&gt;<span class="title class_">Logout</span>!&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>
<p>接下来我们来演示如何在<code>pages/index.tsx</code>中保护家路径。在其中写下以下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextPageContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getSession, signOut &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth/react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch our session from client side</span></span><br><span class="line"><span class="comment">// cannot use serverAuth</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params">context: NextPageContext</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> session = <span class="keyword">await</span> <span class="title function_">getSession</span>(context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// session不存在，则返回登录界面</span></span><br><span class="line">  <span class="keyword">if</span> (!session) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">redirect</span>: &#123;</span><br><span class="line">        <span class="attr">destination</span>: <span class="string">&#x27;/auth&#x27;</span>,</span><br><span class="line">        <span class="attr">permanent</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// session存在，则返回空</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;text-4xl text-green-500&quot;</span>&gt;</span>Netflix Clone<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;h-10 w-full bg-white&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> signOut()&#125;&gt;Logout!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在实现了功能：用户不能在未登录的情况下直接访问家目录。现在的问题：登出以后无法登录并进入到家目录。进入mongodb-network access。点击add ip address，选择allow access from anywhere。目前项目仍然不能正常登录。报错信息显示：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[next-auth][error][CLIENT_FETCH_ERROR] </span><br><span class="line">https://next-auth.js.org/errors#client_fetch_error fetch failed &#123;</span><br><span class="line">  error: &#123;</span><br><span class="line">    message: &#x27;fetch failed&#x27;,</span><br><span class="line">    stack: &#x27;TypeError: fetch failed\n&#x27; +</span><br><span class="line">      &#x27;    at node:internal/deps/undici/undici:12443:11\n&#x27; +</span><br><span class="line">      &#x27;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#x27;,</span><br><span class="line">    name: &#x27;TypeError&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  url: &#x27;http://localhost:10564/api/auth/session&#x27;,</span><br><span class="line">  message: &#x27;fetch failed&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我尝试了若干种解决办法，最后是这样解决的：<br>由于在默认情况下，port和forwarded address是不同的，这样就会导致上面的报错，<strong>我猜测是产生了跨域问题，导致port和forwarded address之间的信息转发失败了</strong>。我们需要将port和forwarded address的端口号改成相同的，并在<code>.env</code>文件和<code>package.json</code>文件中做出相应的修改。以我在本项目中的实际操作为例。我将port改为10564，将forwarded address也改为10564（vscode-PORTS中会自动补全为<code>localhost:10564</code>），然后在<code>.env</code>文件中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NEXTAUTH_URL=&quot;http://localhost:10564&quot;</span><br></pre></td></tr></table></figure>
<p>在<code>package.json</code>文件中添加：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next dev -p 10564&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next start -p 10564&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></p>
<p>然后重启项目，就可以成功地通过用户名密码/github/google登入登出根页面了。</p>
<p>接下来关注如何通过<code>useCurrentUser.ts</code>中的hook来获取用户信息。在<code>index.tsx</code>中加入以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useCurrentUser <span class="keyword">from</span> <span class="string">&quot;@/hooks/useCurrentUser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; data : user &#125; = <span class="title function_">useCurrentUser</span>();</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white&quot;</span>&gt;</span>Logged in as : &#123;user?.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这样在根页面就会显示Logged in as + 登录用户邮箱的信息。现在我们来创建用户档案页面。在pages文件夹下创建<code>profiles.tsx</code>文件，在其中加入以下框架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Profiles</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-4xl&quot;</span>&gt;</span>Profiles<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Profiles</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着访问<a href="http://localhost:10564/profiles，就可以看到白色的Profiles字样。接着在`profiles.tsx`文件中写`fetch">http://localhost:10564/profiles，就可以看到白色的Profiles字样。接着在`profiles.tsx`文件中写`fetch</a> session`的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fetch our session from client side, just like  what we do in index.tsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params">context: NextPageContext</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> session = <span class="keyword">await</span> <span class="title function_">getSession</span>(context); <span class="comment">// get session</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!session) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">redirect</span>: &#123;</span><br><span class="line">                <span class="attr">destination</span>: <span class="string">&#x27;/auth&#x27;</span>,</span><br><span class="line">                <span class="attr">permanent</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">props</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着在<code>auth.tsx</code>中，将三个登录处的重定向URL重定向到profiles页面并删除<code>router</code>。现在产生了效果：在未登录时访问profiles页面会被重定向到auth页面。在auth页面登录后会被重定向到profiles页面。从github仓库中下载default blue图片，作为用户的默认头像。在<code>profiles.tsx</code>中写下了如下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Profiles</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: user &#125; = <span class="title function_">useCurrentUser</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center h-full justify-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;text-3xl md:text-6xl text-white text-center&quot;</span> &gt;</span>Who is watching?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center gap-8 mt-10&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;group flex-row w-44 mx-auto&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                w-44</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                h-44</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                rounded-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                justify-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                border-2</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                border-transparent</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                group-hover:cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                group-hover:border-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                overflow-hidden</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            &gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/default-blue.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Profile&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                mt-4</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                text-gray-400</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                text-2xl</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                text-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                group-hover:text-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            &gt;</span></span></span><br><span class="line"><span class="language-xml">                                &#123;user?.name&#125;</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>产生了如下的效果：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-02-25_04-32-09.png?raw=true" alt="Snipaste_2024-02-25_04-32-09.png"></p>
<p>然后让点击图片会重定向回到根网页。增加以下代码即可：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line">&lt;div onClick=&#123;<span class="function">() =&gt;</span> router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)&#125;&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Navagation-Component"><a href="#Navagation-Component" class="headerlink" title="Navagation Component"></a>Navagation Component</h2><p>清理<code>index.tsx</code>文件，只剩下骨架即可（不需要按钮和sign out功能）：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextPageContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getSession &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth/react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch our session from client side</span></span><br><span class="line"><span class="comment">// cannot use serverAuth</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params">context: NextPageContext</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> session = <span class="keyword">await</span> <span class="title function_">getSession</span>(context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// session不存在，则返回登录界面</span></span><br><span class="line">  <span class="keyword">if</span> (!session) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">redirect</span>: &#123;</span><br><span class="line">        <span class="attr">destination</span>: <span class="string">&#x27;/auth&#x27;</span>,</span><br><span class="line">        <span class="attr">permanent</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// session存在，则返回空</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们需要在上述文件中添加<code>Navbar</code>，但目前<code>Navbar</code>尚不存在，因此需要在<code>components</code>文件夹中添加<code>Navbar.tsx</code>。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Navbar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Navbar</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Navbar</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>index.tsx</code>中import并添加<code>Navbar</code>。接下来在<code>Navbar.tsx</code>中写入具体的内容。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Navbar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// navigation type</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&quot;w-full fixed z-40&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    px-4</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    md:px-16</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    py-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    flex-row</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    duration-500</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    bg-zinc-900</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    bg-opacity-90</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;h-4 lg:h-7&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    flex-row</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    ml-8</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    gap-7</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    hidden</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    lg:flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">NavbarItem</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Navbar</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着在<code>components</code>中定义<code>NavbarItem.tsx</code>，写出其骨架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">NavbarItem</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NavbarItem</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着丰满其中的细节：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NavbarItemProps</span> &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NavbarItem</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">NavbarItemProps</span>&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    label</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;text-white cursor-pointer hover:text-gray-300 trasition&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;label&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NavbarItem</span>;</span><br></pre></td></tr></table></figure></p>
<p>需要从<code>Navbar.tsx</code>中传入label: <code>&lt;NavbarItem label=&quot;Home&quot; /&gt;</code>，并依照同样的方式创建另外几个导航组件：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">NavbarItem</span> label=<span class="string">&quot;Home&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavbarItem</span> <span class="attr">label</span>=<span class="string">&quot;Series&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavbarItem</span> <span class="attr">label</span>=<span class="string">&quot;Films&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavbarItem</span> <span class="attr">label</span>=<span class="string">&quot;New &amp; Popular&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavbarItem</span> <span class="attr">label</span>=<span class="string">&quot;My List&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavbarItem</span> <span class="attr">label</span>=<span class="string">&quot;Browse by languages&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;lg:hidden flex flex-row items-center gap-2 ml-8 cursor-pointer relative&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-sm&quot;</span>&gt;</span>Browse<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>小屏幕时，只出现Browse，不出现其他<code>navagation component</code>。接着去查找icons: <a href="https://react-icons.github.io/react-icons/。找到一个向下展开的小箭头，在`Navbar.tsx`中引入并使用这个小箭头：">https://react-icons.github.io/react-icons/。找到一个向下展开的小箭头，在`Navbar.tsx`中引入并使用这个小箭头：</a><br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BsChevronDown</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-icons/bs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">BsChevronDown</span> <span class="attr">className</span>=<span class="string">&quot;text-white transition&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>接着创建手机端（小屏幕）的菜单。先在<code>components</code>中创建<code>MobileMenu.tsx</code>，在其中写以下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MobileMenuProps</span> &#123;</span><br><span class="line">    visible?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MobileMenu</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">MobileMenuProps</span>&gt; = <span class="function">(<span class="params">&#123; visible &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!visible) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bg-black w-56 absolute top-8 left-0 py-5 flex-col border-2 border-gray-800 flex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;flex flex-col gap-4&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;px-3 text-center text-white hover:underline&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    Home</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MobileMenu</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>Navbar.tsx</code>中引入<code>MobileMenu</code>。并<strong>实现手机（小屏幕）上点击browse展开出home的功能</strong>。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [showMobileMenu, setShowMobileMenu] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toggleMobileMenu = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setShowMobileMenu</span>(<span class="function">(<span class="params">current</span>) =&gt;</span> !current);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MobileMenu</span> <span class="attr">visible</span>=<span class="string">&#123;showMobileMenu&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>对于上述代码的解释：这段代码是使用React Hooks编写的，主要用于在React组件中管理和切换移动设备菜单的显示状态。具体来说，这段代码定义了一个状态变量<code>showMobileMenu</code>和一个切换该状态的函数<code>toggleMobileMenu</code>。下面是这段代码的详细解释：</p>
<p><code>useState</code> 钩子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [showMobileMenu, setShowMobileMenu] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>useState</code>是一个React Hook，允许在函数组件中添加状态。这里，它被用来定义一个名为<code>showMobileMenu</code>的状态变量，用于跟踪移动菜单是否显示。该状态的初始值为<code>false</code>，意味着菜单默认是不显示的。</li>
<li><code>setShowMobileMenu</code>是一个函数，用于更新<code>showMobileMenu</code>状态的值。当调用这个函数并传入一个新的值时，组件会重新渲染，并且<code>showMobileMenu</code>的值会更新为传入的新值。</li>
</ul>
<p><code>useCallback</code> 钩子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toggleMobileMenu = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setShowMobileMenu</span>(<span class="function">(<span class="params">current</span>) =&gt;</span> !current);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>useCallback</code>是另一个React Hook，它返回一个记忆化的回调函数。这个回调函数只会在依赖项数组（这里是空数组<code>[]</code>）中的值发生变化时才会更新。在这个例子中，由于依赖项数组为空，<code>toggleMobileMenu</code>函数在组件的整个生命周期内保持不变。</li>
<li><code>toggleMobileMenu</code>函数的作用是调用<code>setShowMobileMenu</code>来切换<code>showMobileMenu</code>状态的值。它通过传递一个函数给<code>setShowMobileMenu</code>，这个函数接收当前的状态值<code>current</code>作为参数，并返回其相反值<code>!current</code>。这样，如果菜单当前是显示的（<code>true</code>），调用<code>toggleMobileMenu</code>会将其隐藏（设为<code>false</code>），反之亦然。</li>
</ul>
<p>总结</p>
<p>这段代码的主要目的是控制移动菜单的显示状态。通过点击或触发某个事件来调用<code>toggleMobileMenu</code>函数，可以在显示和隐藏移动菜单之间切换，从而为用户提供一个响应式的导航体验。这种模式在开发响应式Web应用时非常常见，特别是在需要改进移动设备上的用户界面和交互时。</p>
<p>进入<code>MobileMenu.tsx</code>中，加入一些新的class。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&#x27;px-3 text-center text-white hover:underline&#x27;</span>&gt;</span><br><span class="line">    <span class="title class_">Home</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;px-3 text-center text-white hover:underline&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Series</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;px-3 text-center text-white hover:underline&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Films</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;px-3 text-center text-white hover:underline&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    New &amp; Popular</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;px-3 text-center text-white hover:underline&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    My List</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;px-3 text-center text-white hover:underline&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Browse by Languages</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这样点开browse就会展开上述的内容。接下来是<code>profile menu</code>。首先在导航组件中添加一个search（即一个放大镜形状的图标）。再添加一个铃铛，最后添加用户的默认头像，然后在用户头像处也添加一个向下展开的箭头。在<code>Navbar.tsx</code>中使用如下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;flex flex-row ml-auto gap-7 items-center&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;text-gray-200 hover:text-gray-300 cursor-pointer transition&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">BsSearch</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;text-gray-200 hover:text-gray-300 cursor-pointer transition&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">BsBell</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row items-center gap-2 cursor-pointer relative&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;w-6 h-6 lg:w-10 lg:h-10 rounded-md overflow-hidden&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/default-blue.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">BsChevronDown</span> <span class="attr">className</span>=<span class="string">&quot;text-white transition&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>再添加<code>AccountMenu</code>。先在components中定义<code>AccountMenu.tsx</code>，在其中写一个骨架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AccountMenu</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AccountMenu</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后再在<code>Navbar.tsx</code>中引入<code>AccountMenu</code>。在<code>AccountMenu.tsx</code>中写入具体的内容：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; signOut &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AccountMenuProps</span> &#123;</span><br><span class="line">    <span class="attr">visible</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AccountMenu</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">AccountMenuProps</span>&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    visible</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!visible) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bg-black w-56 absolute top-14 right-0 py-5 flex-col border-2 border-gray-800 flex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col gap-3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;px-3 group/item flex flex-row gap-3 items-center w-full&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;w-8 rounded-md&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/default-blue.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-sm group-hover/item:underline&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        Username</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AccountMenu</span>;</span><br></pre></td></tr></table></figure></p>
<p>在<code>Navbar.tsx</code>中加入<code>&lt;AccountMenu visible/&gt;</code>，让<code>AccountMenu</code>。接下来再在<code>AccountMenu.tsx</code>中加入signOut按钮。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bg-black w-56 absolute top-14 right-0 py-5 flex-col border-2 border-gray-800 flex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col gap-3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;px-3 group/item flex flex-row gap-3 items-center w-full&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;w-8 rounded-md&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/default-blue.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-sm group-hover/item:underline&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    Username</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">className</span>=<span class="string">&quot;bg-gray-600 border-0 h-px my-4&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> signOut()&#125; className=&quot;px-3 text-center text-white text-sm hover:underline&quot;&gt;</span></span><br><span class="line"><span class="language-xml">                Sign out of Netflix</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>然后还需要加入展开<code>AccountMenu</code>和收起<code>AccountMenu</code>的功能。在<code>Navbar.tsx</code>中加入代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [showAccountMenu, setShowAccountMenu] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toggleAccountMenu = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setShowAccountMenu</span>(<span class="function">(<span class="params">current</span>) =&gt;</span> !current);</span><br><span class="line">    &#125;, []);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleAccountMenu&#125;</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row items-center gap-2 cursor-pointer relative&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;w-6 h-6 lg:w-10 lg:h-10 rounded-md overflow-hidden&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/default-blue.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BsChevronDown</span> <span class="attr">className</span>=<span class="string">&quot;text-white transition&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">AccountMenu</span> <span class="attr">visible</span>=<span class="string">&#123;showAccountMenu&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>然后加入旋转 控制<code>AccountMenu</code>展开和收起的箭头的功能。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">BsChevronDown</span> className=&#123;<span class="string">`text-white transition <span class="subst">$&#123;showAccountMenu ? <span class="string">`rotate-180`</span> : <span class="string">`rotate-0`</span>&#125;</span>`</span>&#125; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>同理，对控制<code>browse</code>的箭头也做相同的处理。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">BsChevronDown</span> className=&#123;<span class="string">`text-white transition <span class="subst">$&#123;showMobileMenu ? <span class="string">`rotate-180`</span> : <span class="string">`rotate-0`</span>&#125;</span>`</span>&#125; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>现在想加一个特效：向下滑动时页面变黑，其他情况下页面透明。在<code>Navbar.tsx</code>中加入以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [showBackground, setShowBackground] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleScroll</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">scrollY</span> &gt;= <span class="variable constant_">TOP_OFFSET</span>) &#123;</span><br><span class="line">            <span class="title function_">setShowBackground</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">setShowBackground</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll); <span class="comment">// listen to scroll event</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll); <span class="comment">// remove listener</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line">    &lt;nav className=&quot;w-full fixed z-40&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">            className=&#123;`</span><br><span class="line">                px-4</span><br><span class="line">                md:px-16</span><br><span class="line">                py-6</span><br><span class="line">                flex</span><br><span class="line">                flex-row</span><br><span class="line">                items-center</span><br><span class="line">                transition</span><br><span class="line">                duration-500</span><br><span class="line">                $&#123;showBackground ? &#x27;bg-zinc-900 bg-opacity-90&#x27; : &#x27;&#x27;&#125;</span><br><span class="line"></span><br><span class="line">            `&#125;</span><br></pre></td></tr></table></figure></p>
<p>加上这些代码后，当滚动页面时，导航组件都是透明的，但当开始滑动鼠标滚轮时，导航组件的背景变为黑色。<br>可以在<code>index.sh</code>中添加代码来测试这个功能：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Navbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bg-gray-500&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-96&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加完上述代码后，页面可以滚动，发现功能是正常的。</p>
<h2 id="Billboard-Component-Random-Movie-Endpoint"><a href="#Billboard-Component-Random-Movie-Endpoint" class="headerlink" title="Billboard Component, Random Movie Endpoint"></a>Billboard Component, Random Movie Endpoint</h2><p>每次会随机加载一部电影。进入github仓库，打开<code>movies.json</code>。将其中的电影全部加入到数据库中。<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">   <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;Big Buck Bunny&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;Three rodents amuse themselves by harassing creatures of the forest. However, when they mess with a bunny, he decides to teach them a lesson.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;videoUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;thumbnailUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://upload.wikimedia.org/wikipedia/commons/7/70/Big.Buck.Bunny.-.Opening.Screen.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;genre&quot;</span><span class="punctuation">:</span><span class="string">&quot;Comedy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="string">&quot;10 minutes&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;Sintel&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;A lonely young woman, Sintel, helps and befriends a dragon, whom she calls Scales. But when he is kidnapped by an adult dragon, Sintel decides to embark on a dangerous quest to find her lost friend Scales.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;videoUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;thumbnailUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://uhdtv.io/wp-content/uploads/2020/10/Sintel-3.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;genre&quot;</span><span class="punctuation">:</span><span class="string">&quot;Adventure&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="string">&quot;15 minutes&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;Tears of Steel&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;In an apocalyptic future, a group of soldiers and scientists takes refuge in Amsterdam to try to stop an army of robots that threatens the planet.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;videoUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;thumbnailUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://mango.blender.org/wp-content/uploads/2013/05/01_thom_celia_bridge.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;genre&quot;</span><span class="punctuation">:</span><span class="string">&quot;Action&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="string">&quot;12 minutes&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;Elephant&#x27;s Dream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;Friends Proog and Emo journey inside the folds of a seemingly infinite Machine, exploring the dark and twisted complex of wires, gears, and cogs, until a moment of conflict negates all their assumptions.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;videoUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;thumbnailUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://download.blender.org/ED/cover.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;genre&quot;</span><span class="punctuation">:</span><span class="string">&quot;Sci-Fi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="string">&quot;15 minutes&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></p>
<p>上述json文件中的数据格式和<code>schema.prisma</code>中的movies数据类型中定义的内容相同，除了缺少由mongodb产生的id。在mongodb网站中选择database-browse collections-movie-insert document，将json文件中的内容粘贴进去即可。现在就完成了对数据模型movie的修改。</p>
<p>现在创建一条新的路径：<code>random</code>。在<code>pages/api/random.ts</code>中写下以下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// random movie will be loaded every time we refresh the page</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span>, <span class="title class_">NextApiResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> serverAuth <span class="keyword">from</span> <span class="string">&quot;@/lib/serverAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="comment">// limit request method to GET</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">405</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// check if the user log in</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">serverAuth</span>(req);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> movieCount = <span class="keyword">await</span> prismadb.<span class="property">movie</span>.<span class="title function_">count</span>();</span><br><span class="line">        <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * movieCount); <span class="comment">// a random integar</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> randomMovies = <span class="keyword">await</span> prismadb.<span class="property">movie</span>.<span class="title function_">findMany</span>(&#123;</span><br><span class="line">            <span class="attr">take</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">skip</span>: randomIndex</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(randomMovies[<span class="number">0</span>]); <span class="comment">// take only one movies</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>hooks/useBillboard.ts</code>中写下以下的代码，避免对首页推荐电影的重复加载：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fetcher <span class="keyword">from</span> <span class="string">&quot;@/lib/fetcher&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useBillboard</span> =(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useSWR</span>(<span class="string">&#x27;/api/random&#x27;</span>, fetcher, &#123;</span><br><span class="line">        <span class="comment">// static data only load once the user visits the page</span></span><br><span class="line">        <span class="comment">// not every time they lose focus out of the window</span></span><br><span class="line">        <span class="attr">revalidateIfStale</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnFocus</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnReconnect</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        data,</span><br><span class="line">        error,</span><br><span class="line">        isLoading,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useBillboard;</span><br></pre></td></tr></table></figure></p>
<p>在<code>components</code>中新建<code>Billboard.tsx</code>，并在其中搭建一个骨架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Billboard</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Billboard</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>index.tsx</code>中引入<code>Billboard</code>。接着在<code>Billboard.tsx</code>中填入具体的内容，目的是fetch the data for a random movie。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useBillboard <span class="keyword">from</span> <span class="string">&quot;@/hooks/useBillboard&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Billboard</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useBillboard</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Billboard</span>;</span><br></pre></td></tr></table></figure></p>
<p>可以打开网页的调试界面：network-random-preview，就可以看到随机选择的电影的信息。接着继续写<code>Billboard.tsx</code>，在Billboard中添加随机的电影、电影名、电影介绍和More info按钮：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useBillboard <span class="keyword">from</span> <span class="string">&quot;@/hooks/useBillboard&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AiOutlineInfoCircle</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/ai&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Billboard</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useBillboard</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative h-[56.25vw]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">video</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    h-[56.25vw]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    object-cover</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    brightness-[60%]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">autoPlay</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">muted</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">loop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">poster</span>=<span class="string">&#123;data?.thumbnailUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">src</span>=<span class="string">&#123;data?.videoUrl&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;absolute top-[30%] md:top-[40%] ml-4 md:ml-16&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-1xl </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    md:text-5xl </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    h-full </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-[50%] </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    lg:text-6xl </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    font-bold </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    drop-shadow-xl</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    &quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;data?.title&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    text-[8px]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    md:text-lg</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    mt-3</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    md:mt-8</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-[90%]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    md:w-[80%]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    lg:w-[50%]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    drop-shadow-xl</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;data?.description&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row items-center mt-3 md:mt-4 gap-3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            bg-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            text-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            bg-opacity-30</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            rounded-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            py-1 md:py-2</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            px-2 md:px-4</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            w-auto</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            text-xs lg:text-lg</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            font-semibold</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            flex-row</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            hover:bg-opacity-20</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">AiOutlineInfoCircle</span> <span class="attr">className</span>=<span class="string">&quot;mr-1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        More Info</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Billboard</span>;</span><br></pre></td></tr></table></figure></p>
<p>本节到此结束，效果图如下所示：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-02-27_04-40-46.png?raw=true" alt="Snipaste_2024-02-27_04-40-46.png"></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>await和async的区别和联系：在TypeScript中，<code>async</code>和<code>await</code>关键字一起使用，作为处理异步操作的一种方式，主要用于替代传统的回调函数和Promise。它们两者之间有着明确的区别和各自的用途：</p>
<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><ul>
<li><code>async</code>关键字用于声明一个异步函数，它让函数自动返回一个Promise。这意味着，当你在一个函数声明前加上<code>async</code>，这个函数就会返回一个Promise，而不是直接返回值。</li>
<li>使用<code>async</code>，你可以在函数内部使用<code>await</code>表达式。</li>
<li><code>async</code>函数可以包含零个或多个<code>await</code>表达式。</li>
</ul>
<p>例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数返回一个Promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;data&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>fetchData</code>函数返回一个解析为字符串”data”的Promise。</p>
<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><ul>
<li><code>await</code>关键字用于等待一个Promise解析，它只能在<code>async</code>函数内部使用。</li>
<li>当<code>await</code>前面的Promise被解析后，函数执行会继续，<code>await</code>表达式的结果就是Promise解析的值。</li>
<li>使用<code>await</code>可以让异步代码看起来像是同步代码，这使得代码更容易理解和维护。</li>
</ul>
<p>例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">showData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 等待fetchData解析</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>showData</code>函数内部调用了<code>fetchData</code>函数，并在其Promise解析之后继续执行，打印出解析后的数据。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><code>async</code>是一个使函数返回Promise的修饰符，而<code>await</code>是用于等待Promise解析的操作符。</li>
<li><code>await</code>只能在<code>async</code>函数内部使用。</li>
<li>它们一起使用提供了一种更简洁和直观的方式来处理JavaScript中的异步操作，避免了回调地狱（Callback Hell）的问题。</li>
</ul>
<h2 id="Movie-List-amp-Movie-Card-Components-Movies-Endpoint-Cool-hover-effect"><a href="#Movie-List-amp-Movie-Card-Components-Movies-Endpoint-Cool-hover-effect" class="headerlink" title="Movie List &amp; Movie Card Components, Movies Endpoint, Cool hover effect"></a>Movie List &amp; Movie Card Components, Movies Endpoint, Cool hover effect</h2><p>在pages/api中创建一个新的movies文件夹。在其中创建<code>index.ts</code>，并在其中写入这个api的具体内容：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span>, <span class="title class_">NextApiResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> serverAuth <span class="keyword">from</span> <span class="string">&#x27;@/lib/serverAuth&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="comment">// this api call only get request method</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">405</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">serverAuth</span>(req); <span class="comment">// authenticate this route</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// load all the movies</span></span><br><span class="line">        <span class="keyword">const</span> movies = <span class="keyword">await</span> prismadb.<span class="property">movie</span>.<span class="title function_">findMany</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(movies);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着再创建一个hook。在hook文件夹中创建<code>useMovieList.ts</code>。并写入以下代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fetcher <span class="keyword">from</span> <span class="string">&quot;@/lib/fetcher&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useMovieList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, error, isLoading &#125;  = <span class="title function_">useSWR</span>(<span class="string">&#x27;api/movies&#x27;</span>, fetcher, &#123;</span><br><span class="line">        <span class="comment">// 不需要重新验证</span></span><br><span class="line">        <span class="attr">revalidateIfStale</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnFocus</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnReconnect</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        data,</span><br><span class="line">        error,</span><br><span class="line">        isLoading</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useMovieList;</span><br></pre></td></tr></table></figure></p>
<p>接着进入<code>pages/index.tsx</code>，加入以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;pb-40&quot;</span>&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">MovieList</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>由于我们有多个MovieList，因此需要将MovieList包裹在div中。接着我们创建MovieList。在<code>components</code>中创建<code>MovieList.tsx</code>，并在其中搭建一个骨架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MovieList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MovieList</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着丰满其中的细节：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; isEmpty &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MovieListProps</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;[]; <span class="comment">// type: array</span></span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MovieList</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">MovieListProps</span>&gt; = <span class="function">(<span class="params">&#123; data, title &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do not render empty data</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isEmpty</span>(data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;px-4 md:px-12 mt-4 space-y-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-md md:text-xl lg:text-2xl font-semibold mb-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;title&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;grid grid-cols-4 gap-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;data.map((movie) =&gt; (</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;movie.id&#125;</span>&gt;</span>movie<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    ))&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MovieList</span>;</span><br></pre></td></tr></table></figure></p>
<p>记得安装必要的库：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install lodash</span><br><span class="line">npm install -D @types/lodash</span><br></pre></td></tr></table></figure></p>
<p>接着在<code>pages/index.tsx</code>中给<code>MovieList</code>传入必要的参数：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: movies = [] &#125; = <span class="title function_">useMovieList</span>(); <span class="comment">// use the newly created hook</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;pb-40&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MovieList</span> <span class="attr">title</span>=<span class="string">&quot;Trending Now&quot;</span> <span class="attr">data</span>=<span class="string">&#123;movies&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>产生了如下效果：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-02-28_23-51-30.png?raw=true" alt="Snipaste_2024-02-28_23-51-30.png"></p>
<p>现在将黑色的movies小字转换成实际的电影，并用上炫酷的Tailwind hover效果。在<code>MovieList.tsx</code>中加入下面的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MovieCard</span> key=&#123;movie.<span class="property">id</span>&#125; data=&#123;movie&#125; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>接着在<code>components</code>文件夹中创建<code>MovieCard.tsx</code>文件。填入以下的骨架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MovieCardProps</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MovieCard</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">MovieCardProps</span>&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    data</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MovieCard</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着继续丰满上述代码的细节：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BsFillPlayFill</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/bs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MovieCardProps</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MovieCard</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">MovieCardProps</span>&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    data</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;group bg-zinc-900 col-span relative h-[12vw]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            object-cover</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            duration</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            shadow-xl</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            rounded-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            group-hover:opacity-90</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            sm:group-hover:opacity-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            delay-300</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            h-[12vw]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">src</span>=<span class="string">&#123;data.thumbnailUrl&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;Thumbnail&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    opacity-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    absolute</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    top-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    duration-200</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    z-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    invisible</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    sm:visible</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    delay-300</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    scale-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    group-hover:scale-110</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    group-hover:-translate-y-[6vw]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    group-hover:translate-x-[2vw]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    group-hover:opacity-100</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    object-cover</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    duration</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    shadow-xl</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    rounded-t-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    h-[12vw]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">src</span>=<span class="string">&#123;data.thumbnailUrl&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;Thumbnail&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        z-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        bg-zinc-800</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        p-2</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        lg:p-4</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        absolute</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        shadow-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                        rounded-b-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row items-center gap-3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            w-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            h-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            lg:w-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            lg:h-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            bg-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            rounded-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            justify-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            hover:bg-neutral-300</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">BsFillPlayFill</span> <span class="attr">size</span>=<span class="string">&#123;30&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-green-400 font-semibold mt-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        New <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;text-white&quot;</span>&gt;</span>2024<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row mt-4 gap-2 items-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-[10px] lg:text-sm&quot;</span>&gt;</span>&#123;data.duration&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row mt-4 gap-2 items-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-[10px] lg:text-sm&quot;</span>&gt;</span>&#123;data.genre&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MovieCard</span>;</span><br></pre></td></tr></table></figure></p>
<p>最后实现的效果图如下所示：</p>
<p><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-02-29_02-48-28.png?raw=true" alt="Snipaste_2024-02-29_02-48-28.png"></p>
<h2 id="Favourites-My-List-functionality"><a href="#Favourites-My-List-functionality" class="headerlink" title="Favourites / My List functionality"></a>Favourites / My List functionality</h2><p>本节我们将实现favourite按钮，其在播放按钮的旁边。我们还将在Trending List下面实现My List，其中将只展示我们favourite的电影。在<code>pages/api/favorite.ts</code>中写下以下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// can handle both post request and delete request</span></span><br><span class="line"><span class="comment">// api to add and remove favourite ID in our list</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span>, <span class="title class_">NextApiResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; without &#125; <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> serverAuth <span class="keyword">from</span> <span class="string">&quot;@/lib/serverAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// handle post request</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; currentUser &#125; = <span class="keyword">await</span> <span class="title function_">serverAuth</span>(req); <span class="comment">// get curent user</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; movieId &#125; = req.<span class="property">body</span>; <span class="comment">// get movieId</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// check if the movieId is correct</span></span><br><span class="line">            <span class="keyword">const</span> existingMovie = <span class="keyword">await</span> prismadb.<span class="property">movie</span>.<span class="title function_">findUnique</span>(&#123;</span><br><span class="line">                <span class="attr">where</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: movieId,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!existingMovie) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid ID&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update user and push movieId to their favoriteIds defined in schema.prisma</span></span><br><span class="line">            <span class="keyword">const</span> user = <span class="keyword">await</span> prismadb.<span class="property">user</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">                <span class="attr">where</span>: &#123;</span><br><span class="line">                    <span class="attr">email</span>: currentUser.<span class="property">email</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">favoriteIds</span>: &#123;</span><br><span class="line">                        <span class="attr">push</span>: movieId,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// handle delete request when a user want to unfavorite a movie</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;DELETE&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; currentUser &#125; = <span class="keyword">await</span> <span class="title function_">serverAuth</span>(req);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; movieId &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> existingMovie = <span class="keyword">await</span> prismadb.<span class="property">movie</span>.<span class="title function_">findUnique</span>(&#123;</span><br><span class="line">                <span class="attr">where</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: movieId,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!existingMovie) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid ID&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// a list of our current favorite IDs without the above movie id</span></span><br><span class="line">            <span class="keyword">const</span> updateFavoriteIds = <span class="title function_">without</span>(currentUser.<span class="property">favoriteIds</span>, movieId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update User information</span></span><br><span class="line">            <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> prismadb.<span class="property">user</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">                <span class="attr">where</span>: &#123;</span><br><span class="line">                    <span class="attr">email</span>: currentUser.<span class="property">email</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">favoriteIds</span>: updateFavoriteIds,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(updatedUser);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">405</span>).<span class="title function_">end</span>(); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来创建一个<code>api route</code>，其将只加载我们最喜欢的电影列表。在<code>pages/api/favorites.ts</code>，写下如下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fetch all of our favorite movies</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span>, <span class="title class_">NextApiResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> serverAuth <span class="keyword">from</span> <span class="string">&quot;@/lib/serverAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req:NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="comment">// limit this route only to get method</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">405</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; currentUser &#125; = <span class="keyword">await</span> <span class="title function_">serverAuth</span>(req);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find all movies which have a relation to current user favorite IDs</span></span><br><span class="line">        <span class="keyword">const</span>  favoriteMovies  = <span class="keyword">await</span> prismadb.<span class="property">movie</span>.<span class="title function_">findMany</span>(&#123;</span><br><span class="line">            <span class="attr">where</span>: &#123;</span><br><span class="line">                <span class="attr">id</span>: &#123;</span><br><span class="line">                    <span class="attr">in</span>: currentUser?.<span class="property">favoriteIds</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(favoriteMovies);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着再写一个hook，用于加载最喜欢的电影列表。在<code>hooks/useFavorites.ts</code>中写入以下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fetcher <span class="keyword">from</span> <span class="string">&quot;@/lib/fetcher&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useFavorites</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, error, isLoading, mutate &#125; = <span class="title function_">useSWR</span>(<span class="string">&#x27;/api/favorites&#x27;</span>, fetcher, &#123;</span><br><span class="line">        <span class="attr">revalidateIfStale</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnFocus</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnReconnect</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        data,</span><br><span class="line">        error,</span><br><span class="line">        isLoading,</span><br><span class="line">        mutate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useFavorites;</span><br></pre></td></tr></table></figure></p>
<p>再写一个组件：<code>components/FavoriteButton.tsx</code>，作为按钮：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> useCurrentUser <span class="keyword">from</span> <span class="string">&quot;@/hooks/useCurrentUser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useFavorites <span class="keyword">from</span> <span class="string">&quot;@/hooks/useFavorites&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FavoriteButtonProps</span> &#123;</span><br><span class="line">    <span class="attr">movieId</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only one parameter: movieId</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FavoriteButton</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">FavoriteButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; movieId &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FavoriteButton</span>;</span><br></pre></td></tr></table></figure></p>
<p>将该按钮加在MovieCard中。在<code>components.MovieCard.tsx</code>中的播放按钮之后加入：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">FavoriteButton</span> movieId=&#123;data?.<span class="property">id</span>&#125; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>补充知识：在JavaScript和TypeScript中，<code>?</code>操作符在这个上下文中被用作可选链（Optional Chaining）操作符。当你在一个对象后面加上<code>?</code>后跟属性名或方法，这意味着如果这个对象存在（即不是<code>null</code>或<code>undefined</code>），则会尝试访问该属性或方法；如果对象是<code>null</code>或<code>undefined</code>，则不会尝试访问该属性或方法，而是直接返回<code>undefined</code>。这避免了在访问深层嵌套对象属性时可能出现的类型错误。</p>
<p>接着<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AiOutlinePlus</span>  &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/ai&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> useCurrentUser <span class="keyword">from</span> <span class="string">&quot;@/hooks/useCurrentUser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useFavorites <span class="keyword">from</span> <span class="string">&quot;@/hooks/useFavorites&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FavoriteButtonProps</span> &#123;</span><br><span class="line">    <span class="attr">movieId</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only one parameter: movieId</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FavoriteButton</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">FavoriteButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; movieId &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            group/item</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            w-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            h-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            lg:w-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            lg:h-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            border-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            border-2</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            rounded-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            justify-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            hover:border-neutral-300</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        &quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">AiOutlinePlus</span> <span class="attr">className</span>=<span class="string">&quot;text-white&quot;</span> <span class="attr">size</span> =<span class="string">&#123;25&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FavoriteButton</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后在Trending Now列表以外再创建一个My Favorites列表。进入<code>pages/index.tsx</code>中，增加以下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: favorites = [] &#125; = <span class="title function_">useFavorites</span>(); <span class="comment">// use hook to get favorite movies</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MovieList</span> <span class="attr">title</span>=<span class="string">&quot;My List&quot;</span> <span class="attr">data</span>=<span class="string">&#123;favorites&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>由于目前还没有最喜欢的电影，因此My List为空。在<code>FavoriteButton.tsx</code>中添加以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">mutate</span>: mutateFavorites &#125; = <span class="title function_">useFavorites</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: currentUser, mutate &#125; = <span class="title function_">useCurrentUser</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// check if the favorite list of current user includes movieId</span></span><br><span class="line"><span class="keyword">const</span> isFavorite = useMemo (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> list = currentUser?.<span class="property">favoriteIds</span> || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list.<span class="title function_">include</span>(movieId);</span><br><span class="line">&#125;, [currentUser, movieId]); <span class="comment">// dependency in []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// once we click the favorite, we will check if the current movie is favorited</span></span><br><span class="line"><span class="comment">// if yes, trigger the delete request</span></span><br><span class="line"><span class="comment">// if no, add the movie in the favorite list</span></span><br><span class="line"><span class="keyword">const</span> toggleFavorites = <span class="title function_">useCallback</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFavorite) &#123;</span><br><span class="line">        response = <span class="keyword">await</span> axios.<span class="title function_">delete</span>(<span class="string">&#x27;/api/favorite&#x27;</span>, &#123; <span class="attr">data</span>: &#123; movieId &#125;&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/favorite&#x27;</span>, &#123; movieId &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update the favorite list of current user</span></span><br><span class="line">    <span class="keyword">const</span> updatedFavoriteIds = response?.<span class="property">data</span>?.<span class="property">favoriteIds</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mutate用于更新currentUser数据</span></span><br><span class="line">    <span class="title function_">mutate</span>(&#123;</span><br><span class="line">        ...currentUser, <span class="comment">// 复制了currentUser对象中的所有属性到一个新对象中</span></span><br><span class="line">        <span class="comment">// 如果currentUser对象中已经存在favoriteIds属性，这一操作将会覆盖原有的值。如果不存在，就会添加一个新的favoriteIds属性</span></span><br><span class="line">        <span class="attr">favoriteIds</span>: updatedFavoriteIds,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mutateFavorites</span>(); <span class="comment">// 来自useFavorites中的mutate，每次更新currentUser的favoriteIds的数据后，立即刷新</span></span><br><span class="line">&#125;, [movieId, isFavorite, currentUser, mutate, mutateFavorites]);</span><br></pre></td></tr></table></figure></p>
<p>实现了上述函数后，我们要让favorite按钮变得可交互。添加以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Icon</span> = isFavorite ? <span class="title class_">AiOutlineCheck</span> : <span class="title class_">AiOutlinePlus</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;toggleFavorites&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        cursor-pointer</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        group/item</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        w-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        h-6</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        lg:w-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        lg:h-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        border-white</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        border-2</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        rounded-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        justify-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        hover:border-neutral-300</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">    &quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">className</span>=<span class="string">&quot;text-white&quot;</span> <span class="attr">size</span> =<span class="string">&#123;25&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>这样点击Trending Now列表上的电影上的加号时，其就会被添加到My List，然后加号会变成勾。这样一部电影就被选择为favorite了。同理，在My List中点击打勾符号，电影就会被取消选中，从My List里面消失。但目前该功能还是有bug。解决方法似乎是：<a href="https://github.com/nextauthjs/next-auth/issues/7199，需要将getSession替换为getServerSession。替换后问题得到了解决。">https://github.com/nextauthjs/next-auth/issues/7199，需要将getSession替换为getServerSession。替换后问题得到了解决。</a></p>
<p>详细解决步骤：在<code>[..nextauth].ts</code>中添加<code>AuthOptions</code>，然后在<code>serverAuth.ts</code>中使用getServerSession替换getSession，并给getServerSession传入三个参数：req, res, authOptions，最后在所有用到serverAuth的api中将<code>const &#123; currentUser &#125; = await serverAuth(req)</code>替换为<code>const &#123; currentUser &#125; = await serverAuth(req, res);</code>。即可以修复上述bug。</p>
<h2 id="Play-Button-Video-Player-Single-Movie-Endpoint"><a href="#Play-Button-Video-Player-Single-Movie-Endpoint" class="headerlink" title="Play Button, Video Player, Single Movie Endpoint"></a>Play Button, Video Player, Single Movie Endpoint</h2><p>在billboard中加入播放按钮。还要创建player route。</p>
<p>首先创建<code>pages/api/movies/[movieId].ts</code>，在其中写入代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextApiRequest</span>, <span class="title class_">NextApiResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prismadb <span class="keyword">from</span> <span class="string">&#x27;@/lib/prismadb&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> serverAuth <span class="keyword">from</span> <span class="string">&quot;@/lib/serverAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="comment">// limit to get request</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">405</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try and catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">serverAuth</span>(req, res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; movieId &#125; = req.<span class="property">query</span>; <span class="comment">// search for movie Id</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> movieId !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid ID&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!movieId) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid ID&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find movie using movieId</span></span><br><span class="line">        <span class="keyword">const</span> movie = <span class="keyword">await</span> prismadb.<span class="property">movie</span>.<span class="title function_">findUnique</span>(&#123;</span><br><span class="line">            <span class="attr">where</span>: &#123;</span><br><span class="line">                <span class="attr">id</span>: movieId</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!movie) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid ID&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(movie);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着创建一个hook。创建<code>hooks/useMovie.ts</code>，在其中写入代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fetcher <span class="keyword">from</span> <span class="string">&quot;@/lib/fetcher&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parameter: id，该id会被/api/movies/[movieId].ts中的[movieId]解析</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useMovie</span> = (<span class="params">id?: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; </span><br><span class="line">        data, </span><br><span class="line">        error, </span><br><span class="line">        isLoading </span><br><span class="line">    &#125; = <span class="title function_">useSWR</span>(id ? <span class="string">`/api/movies/<span class="subst">$&#123;id&#125;</span>`</span> : <span class="literal">null</span>, fetcher, &#123;</span><br><span class="line">        <span class="attr">revalidateIfStale</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnFocus</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">revalidateOnReconnect</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        data,</span><br><span class="line">        error,</span><br><span class="line">        isLoading,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useMovie;</span><br></pre></td></tr></table></figure></p>
<p>接着创建一个play按钮的component。创建<code>components/PlayButton.tsx</code>，在其中写入骨架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BsFillPlayFill</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/bs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PlayButtonProps</span> &#123;</span><br><span class="line">    <span class="attr">movieId</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PlayButton</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">PlayButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; movieId &#125;</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PlayButton</span>;</span><br></pre></td></tr></table></figure></p>
<p>接着在<code>components/Billboard.tsx</code>中加入上述组件。在写有more info字样的按钮前加入：<code>&lt;PlayButton movieId=&#123;data?.id&#125; /&gt;</code>。接着继续丰满<code>components/PlayButton.tsx</code>中的细节：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BsFillPlayFill</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/bs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PlayButtonProps</span> &#123;</span><br><span class="line">    <span class="attr">movieId</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PlayButton</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">PlayButtonProps</span>&gt; = <span class="function">(<span class="params">&#123; movieId &#125;</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> router.push(`/watch/$&#123;movieId&#125;`)&#125;</span></span><br><span class="line"><span class="language-xml">            className=&quot;</span></span><br><span class="line"><span class="language-xml">                bg-white</span></span><br><span class="line"><span class="language-xml">                rounded-md</span></span><br><span class="line"><span class="language-xml">                py-1 md:py-2</span></span><br><span class="line"><span class="language-xml">                px-2 md:px-4</span></span><br><span class="line"><span class="language-xml">                w-auto</span></span><br><span class="line"><span class="language-xml">                text-xs lg:text-lg</span></span><br><span class="line"><span class="language-xml">                font-semibold</span></span><br><span class="line"><span class="language-xml">                flex</span></span><br><span class="line"><span class="language-xml">                flex-row</span></span><br><span class="line"><span class="language-xml">                items-center</span></span><br><span class="line"><span class="language-xml">                hover:bg-neutral-300</span></span><br><span class="line"><span class="language-xml">                transition</span></span><br><span class="line"><span class="language-xml">            &quot;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">BsFillPlayFill</span> <span class="attr">size</span>=<span class="string">&#123;25&#125;</span> <span class="attr">className</span>=<span class="string">&quot;mr-1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            Play</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PlayButton</span>;</span><br></pre></td></tr></table></figure></p>
<p>现在就实现了点击播放按钮，跳转到另一个页面。接着在MovieCard组件中也实现上述点击播放然后跳转的功能。进入<code>components/MovieCard.tsx</code>，在其中添加代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line">onClick=&#123;<span class="function">() =&gt;</span> router.<span class="title function_">push</span>(<span class="string">`/watch/<span class="subst">$&#123;data?.id&#125;</span>`</span>)&#125;&gt;</span><br></pre></td></tr></table></figure></p>
<p>现在需要具体写跳转到的页面。开始写<code>/watch</code>页面。创建<code>pages/watch/[movieId].tsx</code>，在其中写入以下的骨架：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of api folder, so this is a client route</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> useMovie <span class="keyword">from</span> <span class="string">&quot;@/hooks/useMovie&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&quot;next/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Watch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; movieId &#125; = router.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useMovie</span>(movieId <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Watch</span>;</span><br></pre></td></tr></table></figure></p>
<p>现在点击播放按钮，会跳转到一个空白页面。继续丰满上述代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outside of api folder, so this is a client route</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AiOutlineArrowLeft</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/ai&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useMovie <span class="keyword">from</span> <span class="string">&quot;@/hooks/useMovie&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&quot;next/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Watch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; movieId &#125; = router.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useMovie</span>(movieId <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;h-screen w-screnn bg-black&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">nav</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    fixed</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    p-4</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    z-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    flex-row</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    gap-8</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    bg-black</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    bg-opacity-70</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">AiOutlineArrowLeft</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> router.push(&#x27;/&#x27;)&#125; className=&quot;text-white cursor-pointer&quot; size=&#123;40&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-1xl md:text-3xl font-bold&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;font-light&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        Watching:</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;data?.title&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">video</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">autoPlay</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">controls</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;h-full w-full&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">src</span>=<span class="string">&#123;data?.videoUrl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Watch</span>;</span><br></pre></td></tr></table></figure></p>
<p>现在就实现了功能：点击播放按钮，跳转到播放视频的页面，播放视频的页面会自动加载视频的名字，并有一个返回按钮，点击之可以返回到homepage。播放视频的页面中的视频可以播放、暂停、拖动时间条。</p>
<h2 id="Info-Modal-Component"><a href="#Info-Modal-Component" class="headerlink" title="Info Modal Component"></a>Info Modal Component</h2><p>点击More Info按钮，会显示电影的信息。在Treanding Now下面会加一个展开按钮，会展开电影相关的信息。</p>
<p>创建<code>hooks/useInfoModel.ts</code>，并通过命令<code>npm install zustand</code>安装新的库。<code>zustand</code>是一个轻量化的全局状态管理库。在<code>useInfoModel.ts</code>中写入以下的代码：<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&quot;zustand&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ModalStoreInterface</span> &#123;</span><br><span class="line">    movieId?: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">isOpen</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">openModal</span>: <span class="function">(<span class="params">movieId: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">closeModal</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook</span></span><br><span class="line"><span class="keyword">const</span> useInfoModal = create&lt;<span class="title class_">ModalStoreInterface</span>&gt;(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">movieId</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">isOpen</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">openModal</span>: <span class="function">(<span class="params">movieId: <span class="built_in">string</span></span>) =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">isOpen</span>: <span class="literal">true</span>, movieId &#125;),</span><br><span class="line">    <span class="attr">closeModal</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">isOpen</span>: <span class="literal">false</span>, <span class="attr">movieId</span>: <span class="literal">undefined</span>&#125;),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useInfoModal;</span><br></pre></td></tr></table></figure></p>
<p>创建<code>components/InfoModal.tsx</code>，写入以下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AiOutlineClose</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/ai&quot;</span>; <span class="comment">// close Button</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PlayButton</span> <span class="keyword">from</span> <span class="string">&quot;./PlayButton&quot;</span>; <span class="comment">// PlayButton</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FavoriteButton</span> <span class="keyword">from</span> <span class="string">&quot;./FavoriteButton&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useInfoModal <span class="keyword">from</span> <span class="string">&quot;@/hooks/useInfoModal&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useMovie <span class="keyword">from</span> <span class="string">&quot;@/hooks/useMovie&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InfoModalProps</span> &#123;</span><br><span class="line">    visible?: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">onClose</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InfoModal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">InfoModalProps</span>&gt; = <span class="function">(<span class="params">&#123; visible, onClose &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// a state for visible, visible is boolean so !! before it</span></span><br><span class="line">    <span class="keyword">const</span> [isVisible, setIsVisible] = <span class="title function_">useState</span>(!!visible);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fetch moveId</span></span><br><span class="line">    <span class="keyword">const</span> &#123; movieId &#125; = <span class="title function_">useInfoModal</span>();</span><br><span class="line">    <span class="comment">// fetch data from movie</span></span><br><span class="line">    <span class="keyword">const</span> &#123; data = &#123;&#125; &#125; = <span class="title function_">useMovie</span>(movieId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use Effect</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setIsVisible</span>(!!visible); <span class="comment">// set visible on every new visible change that we get</span></span><br><span class="line">    &#125;, [visible]); <span class="comment">// visible in dependency</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClose = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setIsVisible</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// a cool animation</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">onClose</span>();</span><br><span class="line">        &#125;, <span class="number">300</span>); <span class="comment">// 300 ms </span></span><br><span class="line">    &#125;, [onClose]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!visible) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">InfoModal</span>;</span><br></pre></td></tr></table></figure></p>
<p>在<code>pages/index.tsx</code>中加入<code>InfoModal</code>：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">InfoModal</span> <span class="keyword">from</span> <span class="string">&quot;@/components/InfoModal&quot;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">InfoModal</span> <span class="attr">visible</span> <span class="attr">onClose</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接下来继续丰满<code>InfoModal.tsx</code>：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AiOutlineClose</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/ai&quot;</span>; <span class="comment">// close Button</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PlayButton</span> <span class="keyword">from</span> <span class="string">&quot;./PlayButton&quot;</span>; <span class="comment">// PlayButton</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FavoriteButton</span> <span class="keyword">from</span> <span class="string">&quot;./FavoriteButton&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useInfoModal <span class="keyword">from</span> <span class="string">&quot;@/hooks/useInfoModal&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useMovie <span class="keyword">from</span> <span class="string">&quot;@/hooks/useMovie&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InfoModalProps</span> &#123;</span><br><span class="line">    visible?: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">onClose</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InfoModal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">InfoModalProps</span>&gt; = <span class="function">(<span class="params">&#123; visible, onClose &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// a state for visible, visible is boolean so !! before it</span></span><br><span class="line">    <span class="keyword">const</span> [isVisible, setIsVisible] = <span class="title function_">useState</span>(!!visible);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fetch moveId</span></span><br><span class="line">    <span class="keyword">const</span> &#123; movieId &#125; = <span class="title function_">useInfoModal</span>();</span><br><span class="line">    <span class="comment">// fetch data from movie</span></span><br><span class="line">    <span class="keyword">const</span> &#123; data = &#123;&#125; &#125; = <span class="title function_">useMovie</span>(movieId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use Effect</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setIsVisible</span>(!!visible); <span class="comment">// set visible on every new visible change that we get</span></span><br><span class="line">    &#125;, [visible]); <span class="comment">// visible in dependency</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClose = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setIsVisible</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// a cool animation</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">onClose</span>();</span><br><span class="line">        &#125;, <span class="number">300</span>); <span class="comment">// 300 ms </span></span><br><span class="line">    &#125;, [onClose]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!visible) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                z-50</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                transition</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                duration-300</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                bg-black</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                bg-opacity-80</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                flex</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                justify-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                items-center</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                overflow-x-hidden</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                overflow-y-auto</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                fixed</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                inset-0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    relative</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    w-auto</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    mx-auto</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    max-w-3xl</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    rounded-md</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    overflow-hidden</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">className</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        $&#123;<span class="attr">isVisible</span> ? &#x27;<span class="attr">scale-100</span>&#x27;<span class="attr">:</span> &#x27;<span class="attr">scale-0</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">transform</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">duration-300</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">relative</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">flex-auto</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">bg-zinc-900</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">drop-shadow-md</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    `&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative h-96&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">video</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                    w-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                    brightness-[60%]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                    object-cover</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                    h-full</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">autoPlay</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">muted</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">loop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">poster</span>=<span class="string">&#123;data?.thumbnailUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">src</span>=<span class="string">&#123;data?.videoUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">InfoModal</span>;</span><br></pre></td></tr></table></figure></p>
<p>产生了如下的效果：<br><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-03-05_06-42-52.png?raw=true" alt="Snipaste_2024-03-05_06-42-52.png"></p>
<p>接下来再给上面的黑色方框加上一个关闭按钮，并添加播放按钮和收藏按钮。在<code>InfoModal.tsx</code>中添加以下代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;div </span><br><span class="line">className=<span class="string">&quot;</span></span><br><span class="line"><span class="string">    cursor-pointer</span></span><br><span class="line"><span class="string">    absolute</span></span><br><span class="line"><span class="string">    top-3</span></span><br><span class="line"><span class="string">    right-3</span></span><br><span class="line"><span class="string">    h-10</span></span><br><span class="line"><span class="string">    w-10</span></span><br><span class="line"><span class="string">    rounded-full</span></span><br><span class="line"><span class="string">    bg-black</span></span><br><span class="line"><span class="string">    bg-opacity-70</span></span><br><span class="line"><span class="string">    flex</span></span><br><span class="line"><span class="string">    items-center</span></span><br><span class="line"><span class="string">    justify-center</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line">onClick=&#123;<span class="function">() =&gt;</span> &#123;&#125;&#125;&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">AiOutlineClose</span> <span class="attr">className</span>=<span class="string">&quot;text-white&quot;</span> <span class="attr">size</span>=<span class="string">&#123;20&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">    absolute</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">    bottom-[10%]</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">    left-10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-3xl md:text-4xl h-full lg:text-5xl font-bold mb-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data?.title&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-row gap-4 items-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">PlayButton</span> <span class="attr">movieId</span>=<span class="string">&#123;data?.id&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FavoriteButton</span> <span class="attr">movieId</span>=<span class="string">&#123;data?.id&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>最后再加上New字样和电影的各类信息：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;px-12 py-8&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-green-400 font-semibold text-lg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        New</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-lg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data?.duration&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-lg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data?.genre&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-lg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data?.description&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>并加上点击关闭按钮实现关闭页面的功能，即在<code>onClick</code>函数中调用<code>handleClose</code>即可：<code>onClick=&#123;handleClose&#125;&gt;</code></p>
<p>然后在<code>pages/index.tsx</code>中实现对上述模块<code>InfoModal.tsx</code>的触发。<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; isOpen, closeModal &#125; = <span class="title function_">useInfoModal</span>(); <span class="comment">// use useInfoModal hook to trigger InfoModal </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">InfoModal</span> <span class="attr">visible</span>=<span class="string">&#123;isOpen&#125;</span> <span class="attr">onClose</span>=<span class="string">&#123;closeModal&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>现在需要实现在<code>billboard</code>中点击More Info按钮展现上述的<code>Info Modal</code>组件的功能。进入<code>components/Billboard.tsx</code>中，写入以下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; openModal &#125; = <span class="title function_">useInfoModal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleOpenModal = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">openModal</span>(data?.<span class="property">id</span>);</span><br><span class="line">&#125;, [openModal, data?.<span class="property">id</span>]);</span><br><span class="line"></span><br><span class="line">onClick=&#123;handleOpenModal&#125;</span><br></pre></td></tr></table></figure></p>
<p>在电影卡片中再插入一个按钮。使得点击该按钮，可以展现影片的详细信息，在<code>components/MovieCard.tsx</code>中加入以下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; openModal &#125; = <span class="title function_">useInfoModal</span>();</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> openModal(data?.id)&#125;</span></span><br><span class="line"><span class="language-xml">    className=&quot;</span></span><br><span class="line"><span class="language-xml">        cursor-pointer </span></span><br><span class="line"><span class="language-xml">        ml-auto </span></span><br><span class="line"><span class="language-xml">        group/item </span></span><br><span class="line"><span class="language-xml">        w-6 </span></span><br><span class="line"><span class="language-xml">        h-6 </span></span><br><span class="line"><span class="language-xml">        lg:w-10 </span></span><br><span class="line"><span class="language-xml">        lg:h-10 </span></span><br><span class="line"><span class="language-xml">        border-white </span></span><br><span class="line"><span class="language-xml">        border-2 </span></span><br><span class="line"><span class="language-xml">        rounded-full </span></span><br><span class="line"><span class="language-xml">        flex </span></span><br><span class="line"><span class="language-xml">        justify-center </span></span><br><span class="line"><span class="language-xml">        items-center </span></span><br><span class="line"><span class="language-xml">        transition </span></span><br><span class="line"><span class="language-xml">        hover:border-neutral-300&quot;&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">BiChevronDown</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">size</span>=<span class="string">&#123;30&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;text-white group-hover/item:text-neutral-300&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这样，点击电影卡片上的向下的箭头，就会显示出影片的详细信息。调用我们在本节实现的<code>useInfoModal</code>这个hook即可轻松地实现上述功能。</p>
<p>现在继续修复个人profile中名字始终加载为username的问题。将username改为用户实际的名字。进入<code>components/AccountMenu.tsx</code>中，修改以下的代码：<br><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useCurrentUser</span>();</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-white text-sm group-hover/item:underline&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;data?.name&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>即可在个人profile中加载出实际的用户名。</p>
<h2 id="Vercel-Deployment"><a href="#Vercel-Deployment" class="headerlink" title="Vercel Deployment"></a>Vercel Deployment</h2><p>可以同时复制并粘贴多行命令，命令行会自动逐一执行这些命令。要想在vercel上部署，要确保没有warning。要解决所有warning，只需要在<code>.eslintrc.json</code>中加入代码：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@next/next/no-img-element&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在命令行中输入：<code>npm run lint</code>，即可得到：<code>No ESLint warnings or errors</code>。此时所有warning就都被消去了。</p>
<p>注册vercel时，注意用github账号注册vercel，否则需要将账号绑定到github。进入vercel，点击add new，选中想要导入的github仓库，点击import，在configure project页面添加一些environment variables，即将原本项目中.env文件中的各个环境变量（除去NEXTAUTH_URL外）填入即可。.env文件的具体内容如下所示：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NEXTAUTH_URL=&quot;http://localhost:33350&quot;</span><br><span class="line"></span><br><span class="line">DATABASE_URL=&quot;mongodb+srv://cyf:20001017@cluster0.38xordg.mongodb.net/Cluster0&quot;</span><br><span class="line">NEXTAUTH_JWT_SECRET = &quot;NEXT-JWT-SECRET&quot;</span><br><span class="line">NEXTAUTH_SECRET = &quot;NEXT-SECRET&quot;</span><br><span class="line"></span><br><span class="line">GITHUB_ID=28956b7a01e99a046103</span><br><span class="line">GITHUB_SECRET=3fc4e3833a60bf4f1b5e7415b3e8e1ddb2d442de</span><br><span class="line"></span><br><span class="line">GOOGLE_CLIENT_ID=987236770457-d0hoafe7t4mpi32desbqnh50432drpg4.apps.googleusercontent.com</span><br><span class="line">GOOGLE_CLIENT_SECRET=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</span><br></pre></td></tr></table></figure></p>
<p>然后点击deploy即可。部署大概需要两三分钟的时间。部署以后，就可以直接通过域名访问我们的项目的网页。我发现要在本地启动项目，即运行命令：<code>npm run dev</code>，才能实现正常的登录功能。尚不清楚为什么，按理来说部署到云平台后就本地的服务就不需要启动了。</p>
<p>目前该问题依然无法解决，而且似乎部署在vercel上的项目无法正常进行google/github oauth验证登录，尚不明白原因，但不再浪费时间去尝试。至少本项目在本地是能够成功运行的，我将本地的项目回滚到了<a href="https://github.com/yfchenkeepgoing/Netflix_clone/commit/5b14e5cd38afa0d138759bf1b9cce77530761cb3">fix prisma error when deploying</a>的版本。通过链接：<a href="http://localhost:33350可以正常进行oauth登录，注册和邮箱密码登录。">http://localhost:33350可以正常进行oauth登录，注册和邮箱密码登录。</a></p>
<p>尝试在vercel上重新部署本应用，现在发现账号密码登录和github oauth登录都可以正常使用了（不需要在本地启动项目，项目直接在vercel上运行），但google oauth还是无法正常运行，我猜测是账号邮箱重复的问题，可以在数据库中查看并验证我的猜测。实际上应该不是账号邮箱重复的问题，就是哪一步配置不对或者网站抽风，不管了。</p>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>Frontend</tag>
        <tag>React</tag>
        <tag>Tailwind CSS</tag>
        <tag>Next.JS</tag>
        <tag>Prisma</tag>
        <tag>MongoDB</tag>
        <tag>NextAuth</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Migrate and Restart a Cloud Server</title>
    <url>/2024/01/21/How-to-Migrate-and-Restart-a-Cloud-Server/</url>
    <content><![CDATA[<h1 id="迁移云服务器"><a href="#迁移云服务器" class="headerlink" title="迁移云服务器"></a>迁移云服务器</h1><h2 id="1、租云服务器，配置其免密登录"><a href="#1、租云服务器，配置其免密登录" class="headerlink" title="1、租云服务器，配置其免密登录"></a>1、租云服务器，配置其免密登录</h2><p>将本地的公钥复制到云服务器的~/.ssh/authorized_keys中，或者使用云服务器平台提供的密钥，在本地的.ssh文件夹中添加密钥在本地的位置<br>第一次登录云服务器（未配置免密登录）的具体流程可以参照以下步骤：</p>
<p>IR_Group_7_project Demo Instruction</p>
<ol>
<li>Login our VM instance<br>Move key to secure location (eg. ~/.ssh in linux), then</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 path/to/shaoxi_key.pem</span><br><span class="line">ssh -i path/to/shaoxi_key.pem shaoxi@52.174.147.101</span><br></pre></td></tr></table></figure>
<h2 id="2、在云服务器中安装docker"><a href="#2、在云服务器中安装docker" class="headerlink" title="2、在云服务器中安装docker"></a>2、在云服务器中安装docker</h2><p>安装步骤参见官网：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a><br>一般安装的版本为20.10.9，使用命令：<code>VERSION_STRING=5:20.10.9~3-0~ubuntu-focal</code><br>查看docker是否安装成功：<code>docker --version</code></p>
<h2 id="3、在云服务器平台开放以下端口"><a href="#3、在云服务器平台开放以下端口" class="headerlink" title="3、在云服务器平台开放以下端口"></a>3、在云服务器平台开放以下端口</h2><p>22， 8000， 443， 80， 20000，协议均为TCP，源和目的地都为任何（0.0.0.0）</p>
<h2 id="4、将本地的C-Users-chen-yi-fan-django-lesson-1-tar上传到云服务器里"><a href="#4、将本地的C-Users-chen-yi-fan-django-lesson-1-tar上传到云服务器里" class="headerlink" title="4、将本地的C:\Users\chen yi fan\django_lesson_1.tar上传到云服务器里"></a>4、将本地的C:\Users\chen yi fan\django_lesson_1.tar上传到云服务器里</h2><p>在powershell中执行的具体的命令为：<br><code>scp .\django_lesson_1.tar azureuser@20.123.135.13:~/</code></p>
<h2 id="5、将镜像xxxx从本地文件xxxx-tar中加载出来"><a href="#5、将镜像xxxx从本地文件xxxx-tar中加载出来" class="headerlink" title="5、将镜像xxxx从本地文件xxxx.tar中加载出来"></a>5、将镜像xxxx从本地文件xxxx.tar中加载出来</h2><p><code>sudo docker load -i xxxx.tar</code></p>
<h2 id="6、查看镜像是否成功加载出来"><a href="#6、查看镜像是否成功加载出来" class="headerlink" title="6、查看镜像是否成功加载出来"></a>6、查看镜像是否成功加载出来</h2><p>查看所有镜像的命令: <code>sudo docker images</code></p>
<h2 id="7、使用镜像重新创建并运行容器"><a href="#7、使用镜像重新创建并运行容器" class="headerlink" title="7、使用镜像重新创建并运行容器"></a>7、使用镜像重新创建并运行容器</h2><p><code>docker run -p 20000:22 -p 8000:8000 -p 80:80 -p 443:443 --name django_server -itd django_lesson:1.1</code></p>
<h2 id="8、登录到容器中"><a href="#8、登录到容器中" class="headerlink" title="8、登录到容器中"></a>8、登录到容器中</h2><p><code>sudo docker attach django_server</code><br>登录为root用户</p>
<h2 id="9、创建非root用户"><a href="#9、创建非root用户" class="headerlink" title="9、创建非root用户"></a>9、创建非root用户</h2><p><code>adduser acs</code><br>赋予其sudo权限：<code>usermod -aG sudo acs</code><br>设置密码</p>
<h2 id="10、配置容器的免密登录"><a href="#10、配置容器的免密登录" class="headerlink" title="10、配置容器的免密登录"></a>10、配置容器的免密登录</h2><p>配置免密登录的过程是：在容器的.ssh/authorized_keys中写入本地的.ssh文件夹（C:\Users\chen yi fan.ssh）中的公钥的内容<br>然后修改本地的.ssh/config文件，添加容器的信息，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host django_azure</span><br><span class="line">    HostName 20.123.135.13</span><br><span class="line">    User acs</span><br><span class="line">    Port 20000</span><br></pre></td></tr></table></figure>
<h2 id="11、从本地-其他云服务器上登录到容器的命令"><a href="#11、从本地-其他云服务器上登录到容器的命令" class="headerlink" title="11、从本地/其他云服务器上登录到容器的命令"></a>11、从本地/其他云服务器上登录到容器的命令</h2><p><code>ssh acs@ip -p 20000</code><br>退出容器时注意不要关闭容器，而是挂起容器：ctrl+p ctrl+q</p>
<h2 id="12、完成容器的一些配置："><a href="#12、完成容器的一些配置：" class="headerlink" title="12、完成容器的一些配置："></a>12、完成容器的一些配置：</h2><p>nginx配置：<br>（1）修改yxc的acapp中的服务器IP<br>（2）将服务器的IP添加到项目的settings.py的ALLOWED_HOSTS中<br>（3）将yxc提供的nginx.conf写入容器的/etc/nginx/nginx.conf文件中<br>（4）将yxc提供的acapp.key写入容器的/etc/nginx/cert/acapp.key文件中<br>（5）将yxc提供的acapp.pem写入容器的/etc/nginx/cert/acapp.pem文件中<br>（6）启动nginx服务：<code>sudo /etc/init.d/nginx start</code><br>（7）启动uwsgi服务：<code>uwsgi --ini scripts/uwsgi.ini</code></p>
<p>redis配置：<br>（1）安装redis：<code>pip install django_redis</code><br>（2）启动redis-server：<code>sudo redis-server /etc/redis/redis.conf</code><br>（3）用<code>top</code>命令看有没有进程叫redis-server</p>
<p>django channels配置：<br>（1）安装channels_redis：<code>pip install channels_redis</code><br>（2）启动django_channels：<br>  在~/acapp目录下执行：<code>daphne -b 0.0.0.0 -p 5015 acapp.asgi:application</code></p>
<p>同时启动https（uwsgi）和wss（daphne）协议的服务后，项目就应该可以正常运行</p>
<h2 id="13、启动https和wss服务"><a href="#13、启动https和wss服务" class="headerlink" title="13、启动https和wss服务"></a>13、启动https和wss服务</h2><p>启动https服务：<code>uwsgi --ini scripts/uwsgi.ini</code></p>
<p>启动wss服务：<code>daphne -b 0.0.0.0 -p 5015 acapp.asgi:application</code></p>
<hr>
<h1 id="重启云服务器"><a href="#重启云服务器" class="headerlink" title="重启云服务器"></a>重启云服务器</h1><p>在云平台暂停云服务器后重新启动服务器并进入容器</p>
<h2 id="1-在云平台启动云服务器"><a href="#1-在云平台启动云服务器" class="headerlink" title="1. 在云平台启动云服务器"></a>1. 在云平台启动云服务器</h2><p>需要等待5-10分钟才能完成重启的过程</p>
<h2 id="2-查看云服务器中已有的容器"><a href="#2-查看云服务器中已有的容器" class="headerlink" title="2. 查看云服务器中已有的容器"></a>2. 查看云服务器中已有的容器</h2><p>运行命令：<code>sudo docker ps -a</code></p>
<h2 id="3-启动被暂停-退出的容器"><a href="#3-启动被暂停-退出的容器" class="headerlink" title="3. 启动被暂停/退出的容器"></a>3. 启动被暂停/退出的容器</h2><p>运行命令：<code>sudo docker start django_server</code></p>
<h2 id="4-进入容器"><a href="#4-进入容器" class="headerlink" title="4. 进入容器"></a>4. 进入容器</h2><p>在vscode上选择django_azure，点击进入即可</p>
<h2 id="5-启动容器中的服务"><a href="#5-启动容器中的服务" class="headerlink" title="5. 启动容器中的服务"></a>5. 启动容器中的服务</h2><p>主要需要启动以下五个服务：</p>
<p>启动nginx服务：<code>sudo /etc/init.d/nginx start</code></p>
<p>启动redis-server：<code>sudo redis-server /etc/redis/redis.conf</code></p>
<p>启动uwsgi（https）服务：<code>uwsgi --ini scripts/uwsgi.ini</code></p>
<p>启动wss服务：<code>daphne -b 0.0.0.0 -p 5015 acapp.asgi:application</code></p>
<p>启动match system服务：<code>./main.py</code></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Cloud Server</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Understand an Open Source Project</title>
    <url>/2024/01/30/How-to-Understand-an-Open-Source-Project/</url>
    <content><![CDATA[<h2 id="快速了解项目"><a href="#快速了解项目" class="headerlink" title="快速了解项目"></a>快速了解项目</h2><p><img src="https://github.com/yfchenkeepgoing/image/blob/main/Snipaste_2024-01-30_11-45-52.png?raw=true" alt="Snipaste_2024-01-30_11-45-52.png"></p>
<p>从0带读Java小说项目。项目：<a href="https://novel.xxyopen.com/">小说精品屋</a></p>
<p>首先看代码的简介（README），然后看代码的更新频率（几年没更新的就不用看了）。</p>
<p>接着看项目的介绍，看项目的技术栈和我们自己的技术栈是否匹配。</p>
<p>接着看包结构（项目结构）。</p>
<p>看技术选型。高级的技术：ShardingSphere-JDBC（数据库分库分表支持）、分布式缓存支持、搜索引擎服务、开源消息中间件、文件存储、对象存储。</p>
<p>接着看<strong>核心：项目如何安装，如何启动</strong>。</p>
<h2 id="了解项目依赖"><a href="#了解项目依赖" class="headerlink" title="了解项目依赖"></a>了解项目依赖</h2><p>通过github1s（在线查看项目的工具）看项目。</p>
<p>==看项目从整体到局部，先看项目的架构及关键配置文件==</p>
<p>比如assets放静态文件，sql放SQL语句。根目录下的pom.xml定义了父工程的配置。在父工程的配置中又定义了子模块，可以达到多包同时编译的效果。</p>
<p>dockerfile：可以用其来生成一个docker镜像</p>
<p>Java的项目主要分为两部分：resources放一些资源文件和配置，另一部分是java的核心代码。</p>
<p>看resources/application.yml：跑起这个项目需要启动哪些服务。</p>
<p>resources/mybatis：放一些SQL语句</p>
<p>resources/static：放前端的文件，比如javascript, css等等。</p>
<p>resources/templates：用的是thymeleaf，拓展标签可以动态地把一些后台数据渲染到页面。</p>
<p>resources/application-dev.yml：是项目的开发环境的配置。</p>
<p>resources/application-prod.yml：是项目生成环境的配置。</p>
<p>resources/logback.yml：日志</p>
<h2 id="了解项目结构"><a href="#了解项目结构" class="headerlink" title="了解项目结构"></a>了解项目结构</h2><p>现在java项目的目录结构比较清晰和规范。都是mvc结构：model view controller。</p>
<p>controller：控制层，接收用户的请求，给予一些响应，业务逻辑一般不写在其中</p>
<p>core：项目核心的类</p>
<p>mapper：mybatis的映射文件，在这个文件中定义操作数据库的方法</p>
<p>page：控制页面的返回。用户请求一个地址，请求发送到controller，会响应并返回某个页面给用户，和前端的模板有关联。</p>
<p>service：编写业务的逻辑</p>
<p>vo：返回给页面的数据</p>
<p>springboot的启动类，会自动帮助我启动一个tomcat服务器</p>
<h2 id="追踪请求（了解分层）"><a href="#追踪请求（了解分层）" class="headerlink" title="追踪请求（了解分层）"></a>追踪请求（了解分层）</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV13q4y1U7JU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bf2f8cedefdf16acd0e7a14d8e4669fd">带你读懂一个开源项目，学习通用套路！程序员阅读项目源码技巧、Java 编程项目分享</a></p>
<p><a href="https://www.code-nav.cn/">编程导航</a></p>
<p><a href="https://novel.xxyopen.com/">小说精品屋</a></p>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>Java编程项目</tag>
        <tag>开源项目</tag>
        <tag>阅读项目源码技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>How to use Typora</title>
    <url>/2024/01/20/Typora/</url>
    <content><![CDATA[<h2 id="（1）标题"><a href="#（1）标题" class="headerlink" title="（1）标题"></a>（1）标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="（2）快捷键"><a href="#（2）快捷键" class="headerlink" title="（2）快捷键"></a>（2）快捷键</h2><p>普通模式和源代码模式：ctrl+/<br>md语法正确显示需要在有文字的一行后面再空一行，把鼠标放在有文字的最后一行的后两行的位置</p>
<p>标题：按下ctrl和+，则当前行变成第六级的标题，每按一次ctrl和+则当前标题的等级提升一级。按下ctrl和-则是按下ctrl和+的逆向操作。</p>
<h2 id="（3）字体"><a href="#（3）字体" class="headerlink" title="（3）字体"></a>（3）字体</h2><p><strong>加粗</strong><br><em>倾斜</em><br><strong><em>斜体加粗</em></strong><br><del>删除线</del> （~<em>2删除线~</em>2）<br>==高亮==<br>我是^上标^<br>我是~下标~       （注意用英文的~）</p>
<h2 id="（4）列表"><a href="#（4）列表" class="headerlink" title="（4）列表"></a>（4）列表</h2><p>无序列表：<br>下一级是加号前面空两格<br>第一级是实心的圆，第二级是空心的圆，第三级开始都是实心的小方框</p>
<ul>
<li>一二三四五<ul>
<li>上山打老虎<ul>
<li>老虎没打到<ul>
<li>打到小松鼠</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>有序列表：</p>
<ol>
<li>一二三四五</li>
<li>上山打老虎</li>
<li>老虎没达到</li>
<li>打到小松鼠</li>
</ol>
<h2 id="（5）表格"><a href="#（5）表格" class="headerlink" title="（5）表格"></a>（5）表格</h2><div class="table-container">
<table>
<thead>
<tr>
<th>MON</th>
<th>TUE</th>
<th>WED</th>
<th>THU</th>
<th>FRI</th>
</tr>
</thead>
<tbody>
<tr>
<td>上山</td>
<td>上山</td>
<td>上山</td>
<td>上山</td>
<td>上山</td>
</tr>
<tr>
<td>打老虎</td>
<td>打老虎</td>
<td>打老虎</td>
<td>打老虎</td>
<td>打老虎</td>
</tr>
</tbody>
</table>
</div>
<p>在普通模式下，输入：|MON|TUE|WED|THU|FRI|，再输入回车，即可出现表格，可以增加表格的行和列，以及左右居中等等</p>
<h2 id="（6）引用"><a href="#（6）引用" class="headerlink" title="（6）引用"></a>（6）引用</h2><p>下一级别：加一个&gt;</p>
<blockquote>
<p>一二三四五</p>
<blockquote>
<p>上山打老虎</p>
<blockquote>
<p>老虎没达到</p>
<blockquote>
<p>打到小松鼠</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="（7）分割线"><a href="#（7）分割线" class="headerlink" title="（7）分割线"></a>（7）分割线</h2><p>疯狂打——-即可</p>
<hr>
<h2 id="（7）代码"><a href="#（7）代码" class="headerlink" title="==（7）代码=="></a>==（7）代码==</h2><p><code>我是代码</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="（8）字数和侧边栏"><a href="#（8）字数和侧边栏" class="headerlink" title="（8）字数和侧边栏"></a>（8）字数和侧边栏</h2><p>字数在右下角<br>侧边栏在左侧，可以通过在普通模式中点击左下角的小圆圈呼出<br>大纲也在侧边栏中</p>
<h2 id="（9）插入图片"><a href="#（9）插入图片" class="headerlink" title="（9）插入图片"></a>（9）插入图片</h2><p>将图片放入到图片文件夹中，然后复制图片将其直接粘贴进来即可</p>
<p><img src="D:/OneDrive%20-%20stu.xjtu.edu.cn/%E5%9B%BE%E7%89%87/Snipaste_2023-12-27_04-15-35.png" alt="Snipaste_2023-12-27_04-15-35"></p>
<p><img src="D:/OneDrive%20-%20stu.xjtu.edu.cn/%E5%9B%BE%E7%89%87/Snipaste_2023-12-27_04-12-14.png" alt="Snipaste_2023-12-27_04-12-14"></p>
<h2 id="（10）改变字体颜色"><a href="#（10）改变字体颜色" class="headerlink" title="（10）改变字体颜色"></a>（10）改变字体颜色</h2><p>将字体改变为红色：<code>&lt;font color=red&gt;</code>文字 <code>&lt;/font&gt;</code></p>
<p>==平常用高亮即可，不要用红色==</p>
<h2 id="11-diff代码块"><a href="#11-diff代码块" class="headerlink" title="(11) diff代码块"></a>(11) diff代码块</h2><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- 这行被删除了</span></span><br><span class="line"><span class="addition">+ 这行被添加了</span></span><br><span class="line">  这行没有改变</span><br></pre></td></tr></table></figure>
<h2 id="12-enter和shift-enter的区别"><a href="#12-enter和shift-enter的区别" class="headerlink" title="(12) enter和shift enter的区别"></a>(12) enter和shift enter的区别</h2><p>enter: 新起一段（空一行）<br>shift enter: 新起一行</p>
<h2 id="13-markdown-source-code"><a href="#13-markdown-source-code" class="headerlink" title="(13) markdown source code"></a>(13) markdown source code</h2><pre><code>
## （1）标题

# 一级标题

## 二级标题

### 三级标题

#### 四级标题

##### 五级标题

###### 六级标题

## （2）快捷键

普通模式和源代码模式：ctrl+/
md语法正确显示需要在有文字的一行后面再空一行，把鼠标放在有文字的最后一行的后两行的位置

标题：按下ctrl和+，则当前行变成第六级的标题，每按一次ctrl和+则当前标题的等级提升一级。按下ctrl和-则是按下ctrl和+的逆向操作。

## （3）字体

**加粗**
*倾斜*
***斜体加粗***
~~删除线~~ （~*2删除线~*2）
==高亮==
我是^上标^
我是~下标~       （注意用英文的~）

## （4）列表

无序列表：
下一级是加号前面空两格
第一级是实心的圆，第二级是空心的圆，第三级开始都是实心的小方框

+ 一二三四五
  + 上山打老虎
    + 老虎没打到
      + 打到小松鼠

有序列表：

1. 一二三四五
2. 上山打老虎
3. 老虎没达到
4. 打到小松鼠

## （5）表格

| MON    | TUE    | WED    | THU    | FRI    |
| ------ | ------ | ------ | ------ | ------ |
| 上山   | 上山   | 上山   | 上山   | 上山   |
| 打老虎 | 打老虎 | 打老虎 | 打老虎 | 打老虎 |

在普通模式下，输入：|MON|TUE|WED|THU|FRI|，再输入回车，即可出现表格，可以增加表格的行和列，以及左右居中等等

## （6）引用

下一级别：加一个>

> 一二三四五
>
>> 上山打老虎
>>
>>> 老虎没达到
>>>
>>>> 打到小松鼠
>>>>
>>>
>>

## （7）分割线

疯狂打-----即可

---

##==（7）代码==

`我是代码`

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

## （8）字数和侧边栏

字数在右下角
侧边栏在左侧，可以通过在普通模式中点击左下角的小圆圈呼出
大纲也在侧边栏中

## （9）插入图片

将图片放入到图片文件夹中，然后复制图片将其直接粘贴进来即可

![Snipaste_2023-12-27_04-15-35](D:/OneDrive%20-%20stu.xjtu.edu.cn/%E5%9B%BE%E7%89%87/Snipaste_2023-12-27_04-15-35.png)

![Snipaste_2023-12-27_04-12-14](D:/OneDrive%20-%20stu.xjtu.edu.cn/%E5%9B%BE%E7%89%87/Snipaste_2023-12-27_04-12-14.png)

## （10）改变字体颜色

将字体改变为红色：`<font color=red>`文字 `</font>`

==平常用高亮即可，不要用红色==

## (11) diff代码块

<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- 这行被删除了</span></span><br><span class="line"><span class="addition">+ 这行被添加了</span></span><br><span class="line">  这行没有改变</span><br></pre></td></tr></table></figure>

## (12) enter和shift enter的区别

enter: 新起一段（空一行）
shift enter: 新起一行
</code></pre>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Mardown</tag>
      </tags>
  </entry>
  <entry>
    <title>Summary of full stack netflix clone</title>
    <url>/2024/03/07/Summary-of-full-stack-netflix-clone/</url>
    <content><![CDATA[<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul>
<li>Frontend: React</li>
<li>Server-side Rendering: Next.js</li>
<li>Styling: Tailwind CSS</li>
<li>Data abstraction layer: Prisma</li>
<li>Storage: MongoDB</li>
<li>Authentication: NextAuth</li>
<li>Deploy: Vercel</li>
<li>Typescript</li>
<li>the entire website fully</li>
</ul>
<p>The entire website fully responsive across all devices.</p>
<h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul>
<li>credential login: username + password</li>
<li>profile: automatically generated once we register</li>
<li>homepage: loaded with a random movie-billboard</li>
<li>movies: load from database</li>
<li>favourites: add movies as favourites</li>
<li>botton:  shows more information about the movie</li>
<li>play the movie</li>
<li>Google and GitHub oauth login</li>
</ul>
<h2 id="全栈开发的一般流程"><a href="#全栈开发的一般流程" class="headerlink" title="全栈开发的一般流程"></a>全栈开发的一般流程</h2><ul>
<li><p>对登录页面：</p>
<p> 先在pages中创建auth.tsx，然后在components中创建Input.tsx，将其加入到auth.tsx中。实现next auth时需要创建pages/api/[…nextauth].ts文件。</p>
</li>
<li><p>通过授权登录保护登录界面以外的路径：</p>
<p> 在lib文件夹中创建<code>serverAuth.ts</code>，可以在所有的api routes中检查我们是否登录。进入<code>pages/api</code>中，创建<code>current.ts</code>；接着写用于front end fetching的部分，创建<code>libs/fetcher.ts</code>。在前端写用于载入当前用户的代码。在根目录下新建hooks文件夹，在其中新建文件<code>useCurrentUser.ts</code>。在<code>pages/index.tsx</code>中保护家路径。接下来关注如何通过<code>useCurrentUser.ts</code>中的hook来获取用户信息，在index.tsx中加入代码即可。为了创建profile，在pages文件夹下创建<code>profiles.tsx</code>文件。接着在<code>auth.tsx</code>中，将三个登录处的重定向URL重定向到profiles页面并删除<code>router</code>。现在产生了效果：在未登录时访问profiles页面会被重定向到auth页面。</p>
</li>
<li><p>对导航组件：</p>
</li>
<li><p>对广告牌组件：</p>
</li>
<li><p>对电影列表和电影卡片组件：</p>
</li>
<li><p>对收藏功能：</p>
</li>
<li><p>对电影播放功能：</p>
</li>
<li><p>对电影详细信息功能：</p>
</li>
</ul>
<h2 id="我的思考"><a href="#我的思考" class="headerlink" title="我的思考"></a>我的思考</h2><ol>
<li><p>Tailwind CSS的好处：我的主要感受是不需要手写css文件，直接在classname中写内容就可以。注意使用Tailwind CSS前，需要进行必要的配置。Tailwind CSS的具体优点如下所示：</p>
<ul>
<li><p>快速原型开发<br>Tailwind 的实用工具类使得快速原型设计变得非常简单。你可以通过组合不同的类来快速构建界面，而不需要离开 HTML 文件去编写和调试 CSS 文件，这可以显著加快开发速度。</p>
</li>
<li><p>一致性和可重用性<br>通过使用 Tailwind 提供的实用工具类，可以在整个项目中保持样式的一致性。由于你在不同的地方复用相同的实用工具类，这自然而然地导致了样式的可重用性和一致性。</p>
</li>
<li><p>可定制和可配置<br>Tailwind CSS 高度可定制。你可以根据项目的设计指南调整配置文件（如颜色、字体大小、边距等），这使得创建符合品牌指南的设计变得简单。</p>
</li>
<li><p>减少 CSS 的复杂性<br>由于采用实用工具类的方式，你可以避免编写过多的自定义 CSS 和处理复杂的 CSS 继承关系，这降低了代码的复杂性。</p>
</li>
<li><p>响应式设计友好<br>Tailwind CSS 内置了响应式设计的支持，通过简单的前缀可以轻松地实现不同屏幕尺寸的样式适配，而不需要编写额外的媒体查询。</p>
</li>
<li><p>减少未使用的 CSS<br>通过与 PurgeCSS 的集成，Tailwind CSS 可以在构建过程中自动移除未使用的 CSS，这意味着最终的样式表非常精简，加载时间快。</p>
</li>
<li><p>总结<br>尽管 Tailwind CSS 提供了诸多好处，如加速开发、提高一致性和可维护性，但它也有一定的学习曲线，尤其是对于习惯了传统 CSS 开发方式的开发者来说。此外，一些开发者可能会对在 HTML 中大量使用实用工具类表示担忧，担心这会导致 HTML 文件的可读性降低。不过，对于许多项目和团队而言，Tailwind CSS 提供的好处远远超过了这些潜在的缺点。</p>
</li>
</ul>
</li>
<li><p>Google oauth比较难用。在本地将项目跑起来时，Google oauth功能正常，但当我尝试在vercel上部署本项目时，Google oauth就完全无法正常使用，甚至每次产生的报错信息都不相同。与此形成鲜明对比的是，GitHub oauth比较好用，配置和更改都较为简单，且将项目部署在vercel上以后再使用GitHub oauth也不会出问题。</p>
</li>
<li><p>Next.js和React各自的作用：</p>
<p>React 和 Next.js 在一个项目中的共存实际上非常常见，并且它们各自扮演着互补的角色。理解它们的主要用途有助于更好地利用这两个库/框架来构建你的应用。</p>
<p>React</p>
<p>React 是一个用于构建用户界面的 JavaScript 库，由 Facebook 开发。它的主要特点是组件化开发和声明式编程，使得开发复杂、高性能的单页应用（SPA）变得简单。React 本身主要关注于视图层（UI），允许开发者以组件的形式构建复杂的用户界面。它并不提供诸如路由、服务器端渲染等功能，这些通常需要通过其他库或框架来实现。</p>
<p>Next.js</p>
<p>Next.js 是一个基于 Node.js 的框架，它为 React 应用提供了额外的结构和功能，如自动的代码分割、服务器端渲染（SSR）、静态站点生成（SSG）、基于文件的路由系统、API 路由等。Next.js 旨在解决 React 单页应用的一些限制，特别是在 SEO 和首屏加载性能方面。通过服务器端渲染，Next.js 可以提前渲染页面，使其内容能够被搜索引擎索引，同时也提升了页面加载的速度。</p>
<p>它们是如何一起工作的</p>
<ul>
<li>React 在项目中的角色：负责定义应用的组件结构、状态管理和用户交互逻辑。开发者会使用 React 来创建应用的各个界面组件。</li>
<li>Next.js 在项目中的角色：提供框架和额外功能，帮助这些 React 组件以更高效、优化的方式被呈现和服务。<strong>例如，Next.js 通过文件系统提供的路由功能，自动将位于 <code>pages/</code> 目录下的 React 组件转换为可访问的页面</strong>。</li>
</ul>
<p>总结</p>
<p>在一个项目中，React 用来构建用户界面的组件，而 Next.js 则用来增强 React 应用，提供路由、预渲染（SSR 或 SSG）等功能，以及优化应用的性能和可访问性。Next.js 让开发者能够更专注于业务逻辑和组件本身，而不是底层的架构问题，从而简化了 React 应用的开发和部署过程。简言之，你可以将 React 视为构建应用的砖块，而 Next.js 则是将这些砖块组织起来，建造出结构化、高效、易于维护的应用的框架。<strong>我的理解：React只能做前端，而React+Next.js就可以做全栈了</strong>。</p>
</li>
<li><p>Prisma是一款现代化的ORM框架，它可以连接到多种数据库类型（如 PostgreSQL 、 MySQL 、 SQLite 和 SQL Server等），在本项目中我们用Prisma连接了MongoDB。在ORM的帮助下，我们不需要写SQL语句，只需要定义数据库中的数据名称和数据类型，就可以实现对数据库的各种操作。</p>
</li>
<li><p>本项目中的大多数代码都是Typescript（.ts）代码或者TypeScript JSX(.tsx)代码。前者是基于javascript开发的。TypeScript 是 JavaScript 的一个超集，这意味着它包含了 JavaScript 的所有功能，并在此基础上添加了更多的特性。后者是 TypeScript 的扩展，允许在 TypeScript 文件中使用 JSX 语法。JSX 是一种语法糖，允许开发者在 JavaScript 代码中写像HTML一样的标记语言，这在React 开发中非常常见。由于 TypeScript 默认不理解 JSX 语法，TSX（<code>.tsx</code> 文件扩展名）提供了一种方式来使用 TypeScript 和 JSX。因此，<code>.tsx</code> 文件通常用于包含 JSX 的 TypeScript 项目，尤其是在开发 React 组件时。<strong>简而言之，当代码中需要有类似HTML的代码时，即需要创建一个页面或者页面的一部分时，用tsx。无类似HTML的代码，则用ts</strong>。在本项目中，定义所有组件的components文件夹中的文件全用了tsx，因为要写HTML代码；同理，pages文件夹中除了api文件夹以外的所有文件用的也是tsx。剩下的文件夹中的文件普遍用的是ts，包括hooks文件夹，lib文件夹和pages/api文件夹。</p>
</li>
<li><p>本项目中几个主要文件夹的作用：</p>
<p>属于 Next.js 的特定文件夹：</p>
<ul>
<li><strong>pages</strong>：这是 Next.js 特有的一个文件夹，用于基于文件系统的路由。在 Next.js 中，<code>pages</code> 目录下的每一个文件都会自动对应一个路由，这是 Next.js 框架的核心特性之一。pages中还有api文件夹，因此在本项目中可以像前后端分离的项目那样在后端定义api，然后在前端调用。<strong>只不过本项目中是在next.js实现的伪后端中定义api，然后在react实现的纯前端中调用api</strong>。</li>
<li><strong>public</strong>：这个文件夹也是 Next.js 的标准部分，用于存放静态文件，如图片、字体等。在项目中，你可以通过相对路径直接引用 <code>public</code> 文件夹中的资源。</li>
<li><strong>styles</strong>：虽然存放样式的做法在前端项目中非常常见，但在 Next.js 项目中，<code>styles</code> 文件夹通常用于组织 CSS 或 SCSS 文件。Next.js 支持 CSS Modules 和内置的 Sass 支持，这个文件夹通常用来利用这些特性。本项目中的styles文件夹中只有一个global.css文件，主要负责对tailwind css的配置和定义一些默认的css格式。</li>
</ul>
<p>通常属于开发者根据项目需求创建的文件夹（既适用于 React，也适用于 Next.js）：</p>
</li>
</ol>
<ul>
<li><p>components：存放 React 组件的文件夹。这些组件可以在不同的页面中复用。这是 React 项目的常见结构，但在 Next.js 项目中同样适用。</p>
</li>
<li><p>hooks：存放自定义 React 钩子（Hooks）。自定义钩子是 React 16.8 引入的功能，用于在函数组件之间复用状态逻辑。</p>
</li>
<li><p>lib：通常用于存放一些工具库或者用于与 API 交互的函数等。这个文件夹的具体用途依项目需求而定，既适用于纯 React 项目，也适用于 Next.js 项目。</p>
</li>
</ul>
<p>数据库相关的文件：</p>
<p>prisma：这个文件夹通常用于存放与 Prisma 相关的配置和模型文件。Prisma 是一个流行的 Node.js 和 TypeScript ORM（对象关系映射），用于构建数据库访问。这不是 Next.js 或 React 特有的，而是根据你的项目是否需要与数据库交互来决定使用。</p>
<p>总结：<br>Next.js 特有：pages 和 public 文件夹是 Next.js 特定的，而 styles 虽然不是 Next.js 特有的，但其在 Next.js 项目中的使用方式往往利用了 Next.js 的一些特性。</p>
<p>React 和 Next.js 通用：components、hooks、lib 和 prisma 文件夹是根据开发者的项目需求创建的，它们既适用于 React 项目，也适用于 Next.js 项目。这些文件夹的使用反映了现代前端项目的一些最佳实践，如组件化开发、自定义钩子的使用等。</p>
]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
